public class CH.ifa.draw.standard.SelectAreaTracker extends CH.ifa.draw.standard.AbstractTool
{
    private java.awt.Rectangle fSelectGroup;

    public void <init>(CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        newDrawingEditor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        specialinvoke this.<CH.ifa.draw.standard.AbstractTool: void <init>(CH.ifa.draw.framework.DrawingEditor)>(newDrawingEditor);
        return;
    }

    public void mouseDown(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        java.awt.event.MouseEvent e;
        int x, y, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        temp$0 = virtualinvoke e.<java.awt.event.MouseEvent: int getX()>();
        temp$1 = virtualinvoke e.<java.awt.event.MouseEvent: int getY()>();
        specialinvoke this.<CH.ifa.draw.standard.AbstractTool: void mouseDown(java.awt.event.MouseEvent,int,int)>(e, temp$0, temp$1);
        temp$2 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorX>;
        temp$3 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorY>;
        temp$4 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorX>;
        temp$5 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorY>;
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void rubberBand(int,int,int,int)>(temp$2, temp$3, temp$4, temp$5);
        return;
    }

    public void mouseDrag(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        java.awt.event.MouseEvent e;
        int x, y, temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        specialinvoke this.<CH.ifa.draw.standard.AbstractTool: void mouseDrag(java.awt.event.MouseEvent,int,int)>(e, x, y);
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void eraseRubberBand()>();
        temp$0 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorX>;
        temp$1 = this.<CH.ifa.draw.standard.SelectAreaTracker: int fAnchorY>;
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void rubberBand(int,int,int,int)>(temp$0, temp$1, x, y);
        return;
    }

    public void mouseUp(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        java.awt.event.MouseEvent e;
        int x, y;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        specialinvoke this.<CH.ifa.draw.standard.AbstractTool: void mouseUp(java.awt.event.MouseEvent,int,int)>(e, x, y);
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void eraseRubberBand()>();
        temp$0 = virtualinvoke e.<java.awt.event.MouseEvent: boolean isShiftDown()>();
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void selectGroup(boolean)>(temp$0);
        return;
    }

    private final void rubberBand(int, int, int, int)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        int x1, y1, x2, y2;
        java.awt.Rectangle temp$0, temp$2, temp$4;
        java.awt.Point temp$1, temp$3;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        x1 := @parameter0: int;
        y1 := @parameter1: int;
        x2 := @parameter2: int;
        y2 := @parameter3: int;
        temp$0 = new java.awt.Rectangle;
        temp$1 = new java.awt.Point;
        specialinvoke temp$1.<java.awt.Point: void <init>(int,int)>(x1, y1);
        specialinvoke temp$0.<java.awt.Rectangle: void <init>(java.awt.Point)>(temp$1);
        this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup> = temp$0;
        temp$2 = this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup>;
        temp$3 = new java.awt.Point;
        specialinvoke temp$3.<java.awt.Point: void <init>(int,int)>(x2, y2);
        virtualinvoke temp$2.<java.awt.Rectangle: void add(java.awt.Point)>(temp$3);
        temp$4 = this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup>;
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void drawXORRect(java.awt.Rectangle)>(temp$4);
        return;
    }

    private final void eraseRubberBand()
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        java.awt.Rectangle temp$0;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        temp$0 = this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup>;
        virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: void drawXORRect(java.awt.Rectangle)>(temp$0);
        return;
    }

    private final void drawXORRect(java.awt.Rectangle)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        java.awt.Rectangle r;
        java.awt.Graphics g, temp$1;
        CH.ifa.draw.framework.DrawingView temp$0, temp$2;
        java.awt.Color temp$3, temp$4;
        int temp$5, temp$6, temp$7, temp$8;
        java.lang.Throwable temp$9;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        r := @parameter0: java.awt.Rectangle;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: CH.ifa.draw.framework.DrawingView view()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingView: java.awt.Graphics getGraphics()>();
        g = temp$1;
        if g != null goto label0;

        goto label4;

     label0:
        nop;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: CH.ifa.draw.framework.DrawingView view()>();
        temp$3 = interfaceinvoke temp$2.<CH.ifa.draw.framework.DrawingView: java.awt.Color getBackground()>();
        virtualinvoke g.<java.awt.Graphics: void setXORMode(java.awt.Color)>(temp$3);
        temp$4 = <java.awt.Color: java.awt.Color black>;
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$4);
        temp$5 = r.<java.awt.Rectangle: int x>;
        temp$6 = r.<java.awt.Rectangle: int y>;
        temp$7 = r.<java.awt.Rectangle: int width>;
        temp$8 = r.<java.awt.Rectangle: int height>;
        virtualinvoke g.<java.awt.Graphics: void drawRect(int,int,int,int)>(temp$5, temp$6, temp$7, temp$8);
        virtualinvoke g.<java.awt.Graphics: void dispose()>();
        goto label3;

     label2:
        nop;
        temp$9 := @caughtexception;
        virtualinvoke g.<java.awt.Graphics: void dispose()>();
        throw temp$9;

     label3:
        nop;

     label4:
        nop;
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    private final void selectGroup(boolean)
    {
        CH.ifa.draw.standard.SelectAreaTracker this;
        boolean toggle, temp$2, temp$8, temp$16;
        CH.ifa.draw.framework.FigureEnumeration k, temp$1;
        CH.ifa.draw.framework.Drawing temp$0;
        CH.ifa.draw.framework.Figure figure, temp$3;
        java.awt.Rectangle r2, temp$4, temp$5, temp$9;
        int temp$6, temp$7, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15;
        CH.ifa.draw.framework.DrawingView temp$17, temp$18;

        this := @this: CH.ifa.draw.standard.SelectAreaTracker;
        toggle := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: CH.ifa.draw.framework.Drawing drawing()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figuresReverse()>();
        k = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label8;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        figure = temp$3;
        temp$4 = interfaceinvoke figure.<CH.ifa.draw.framework.Figure: java.awt.Rectangle displayBox()>();
        r2 = temp$4;
        temp$5 = this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup>;
        temp$6 = r2.<java.awt.Rectangle: int x>;
        temp$7 = r2.<java.awt.Rectangle: int y>;
        temp$8 = virtualinvoke temp$5.<java.awt.Rectangle: boolean contains(int,int)>(temp$6, temp$7);
        if temp$8 == 0 goto label7;

        goto label2;

     label2:
        nop;
        temp$9 = this.<CH.ifa.draw.standard.SelectAreaTracker: java.awt.Rectangle fSelectGroup>;
        temp$10 = r2.<java.awt.Rectangle: int x>;
        temp$11 = r2.<java.awt.Rectangle: int width>;
        temp$12 = temp$10 + temp$11;
        temp$13 = r2.<java.awt.Rectangle: int y>;
        temp$14 = r2.<java.awt.Rectangle: int height>;
        temp$15 = temp$13 + temp$14;
        temp$16 = virtualinvoke temp$9.<java.awt.Rectangle: boolean contains(int,int)>(temp$12, temp$15);
        if temp$16 == 0 goto label7;

        goto label3;

        goto label3;

     label3:
        nop;
        if toggle == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$17 = virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$17.<CH.ifa.draw.framework.DrawingView: void toggleSelection(CH.ifa.draw.framework.Figure)>(figure);
        goto label6;

     label5:
        nop;
        temp$18 = virtualinvoke this.<CH.ifa.draw.standard.SelectAreaTracker: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$18.<CH.ifa.draw.framework.DrawingView: void addToSelection(CH.ifa.draw.framework.Figure)>(figure);

     label6:
        nop;

     label7:
        nop;
        goto label0;

     label8:
        nop;
        return;
    }
}
