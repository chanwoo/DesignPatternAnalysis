public class CH.ifa.draw.util.UndoableTool extends java.lang.Object implements CH.ifa.draw.framework.Tool, CH.ifa.draw.framework.ToolListener
{
    private CH.ifa.draw.framework.Tool myWrappedTool;
    private CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher;

    public void <init>(CH.ifa.draw.framework.Tool)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool newWrappedTool, temp$1;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newWrappedTool := @parameter0: CH.ifa.draw.framework.Tool;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher createEventDispatcher()>();
        virtualinvoke this.<CH.ifa.draw.util.UndoableTool: void setEventDispatcher(CH.ifa.draw.standard.AbstractTool$EventDispatcher)>(temp$0);
        virtualinvoke this.<CH.ifa.draw.util.UndoableTool: void setWrappedTool(CH.ifa.draw.framework.Tool)>(newWrappedTool);
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.Tool: void addToolListener(CH.ifa.draw.framework.ToolListener)>(this);
        return;
    }

    public void activate()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void activate()>();
        return;
    }

    public void deactivate()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0, temp$1;
        CH.ifa.draw.util.Undoable undoActivity, temp$2;
        boolean temp$3;
        CH.ifa.draw.framework.DrawingEditor temp$4, temp$6, temp$8;
        CH.ifa.draw.util.UndoManager temp$5, temp$7;
        CH.ifa.draw.framework.DrawingView temp$9;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void deactivate()>();
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        temp$2 = interfaceinvoke temp$1.<CH.ifa.draw.framework.Tool: CH.ifa.draw.util.Undoable getUndoActivity()>();
        undoActivity = temp$2;
        if undoActivity != null goto label0;

        goto label2;

     label0:
        nop;
        temp$3 = interfaceinvoke undoActivity.<CH.ifa.draw.util.Undoable: boolean isUndoable()>();
        if temp$3 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$5 = interfaceinvoke temp$4.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$5.<CH.ifa.draw.util.UndoManager: void pushUndo(CH.ifa.draw.util.Undoable)>(undoActivity);
        temp$6 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$7 = interfaceinvoke temp$6.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$7.<CH.ifa.draw.util.UndoManager: void clearRedos()>();
        temp$8 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$9 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$8.<CH.ifa.draw.framework.DrawingEditor: void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)>(temp$9);

     label2:
        nop;
        return;
    }

    public void mouseDown(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.awt.event.MouseEvent e;
        int x, y;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void mouseDown(java.awt.event.MouseEvent,int,int)>(e, x, y);
        return;
    }

    public void mouseDrag(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.awt.event.MouseEvent e;
        int x, y;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void mouseDrag(java.awt.event.MouseEvent,int,int)>(e, x, y);
        return;
    }

    public void mouseUp(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.awt.event.MouseEvent e;
        int x, y;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void mouseUp(java.awt.event.MouseEvent,int,int)>(e, x, y);
        return;
    }

    public void mouseMove(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.awt.event.MouseEvent evt;
        int x, y;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        evt := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void mouseMove(java.awt.event.MouseEvent,int,int)>(evt, x, y);
        return;
    }

    public void keyDown(java.awt.event.KeyEvent, int)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.awt.event.KeyEvent evt;
        int key;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        evt := @parameter0: java.awt.event.KeyEvent;
        key := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void keyDown(java.awt.event.KeyEvent,int)>(evt, key);
        return;
    }

    public boolean isUsable()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: boolean isUsable()>();
        return temp$1;
    }

    public boolean isActive()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.Tool temp$1;
        boolean temp$2;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.Tool tool()>();
        if temp$1 == this goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = 0;
        goto label2;

     label1:
        nop;
        temp$2 = 1;

     label2:
        nop;
        return temp$2;
    }

    public boolean isEnabled()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: boolean isEnabled()>();
        return temp$1;
    }

    public void setUsable(boolean)
    {
        CH.ifa.draw.util.UndoableTool this;
        boolean newIsUsable;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newIsUsable := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void setUsable(boolean)>(newIsUsable);
        return;
    }

    public void setEnabled(boolean)
    {
        CH.ifa.draw.util.UndoableTool this;
        boolean newIsEnabled;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newIsEnabled := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: void setEnabled(boolean)>(newIsEnabled);
        return;
    }

    protected void setWrappedTool(CH.ifa.draw.framework.Tool)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool newWrappedTool;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newWrappedTool := @parameter0: CH.ifa.draw.framework.Tool;
        this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool myWrappedTool> = newWrappedTool;
        return;
    }

    protected CH.ifa.draw.framework.Tool getWrappedTool()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool myWrappedTool>;
        return temp$0;
    }

    public CH.ifa.draw.framework.DrawingEditor editor()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.Tool temp$0;
        CH.ifa.draw.framework.DrawingEditor temp$1;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.Tool getWrappedTool()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Tool: CH.ifa.draw.framework.DrawingEditor editor()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.DrawingView view()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.DrawingView view()>();
        return temp$1;
    }

    public CH.ifa.draw.util.Undoable getUndoActivity()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.util.UndoableAdapter temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = new CH.ifa.draw.util.UndoableAdapter;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.framework.DrawingView view()>();
        specialinvoke temp$0.<CH.ifa.draw.util.UndoableAdapter: void <init>(CH.ifa.draw.framework.DrawingView)>(temp$1);
        return temp$0;
    }

    public void setUndoActivity(CH.ifa.draw.util.Undoable)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.util.Undoable newUndoableActivity;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newUndoableActivity := @parameter0: CH.ifa.draw.util.Undoable;
        return;
    }

    public void toolUsable(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolUsableEvent()>();
        return;
    }

    public void toolUnusable(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolUnusableEvent()>();
        return;
    }

    public void toolActivated(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolActivatedEvent()>();
        return;
    }

    public void toolDeactivated(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolDeactivatedEvent()>();
        return;
    }

    public void toolEnabled(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolEnabledEvent()>();
        return;
    }

    public void toolDisabled(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableTool this;
        java.util.EventObject toolEvent;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        toolEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolDisabledEvent()>();
        return;
    }

    public void addToolListener(CH.ifa.draw.framework.ToolListener)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.ToolListener newToolListener;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newToolListener := @parameter0: CH.ifa.draw.framework.ToolListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void addToolListener(CH.ifa.draw.framework.ToolListener)>(newToolListener);
        return;
    }

    public void removeToolListener(CH.ifa.draw.framework.ToolListener)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.framework.ToolListener oldToolListener;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        oldToolListener := @parameter0: CH.ifa.draw.framework.ToolListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void removeToolListener(CH.ifa.draw.framework.ToolListener)>(oldToolListener);
        return;
    }

    private final void setEventDispatcher(CH.ifa.draw.standard.AbstractTool$EventDispatcher)
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher newEventDispatcher;

        this := @this: CH.ifa.draw.util.UndoableTool;
        newEventDispatcher := @parameter0: CH.ifa.draw.standard.AbstractTool$EventDispatcher;
        this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher> = newEventDispatcher;
        return;
    }

    protected CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = this.<CH.ifa.draw.util.UndoableTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher>;
        return temp$0;
    }

    public CH.ifa.draw.standard.AbstractTool$EventDispatcher createEventDispatcher()
    {
        CH.ifa.draw.util.UndoableTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableTool;
        temp$0 = new CH.ifa.draw.standard.AbstractTool$EventDispatcher;
        specialinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void <init>(CH.ifa.draw.framework.Tool)>(this);
        return temp$0;
    }
}
