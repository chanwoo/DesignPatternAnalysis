public class CH.ifa.draw.util.Bounds extends java.lang.Object implements java.io.Serializable
{
    protected double _dX1;
    protected double _dY1;
    protected double _dX2;
    protected double _dY2;

    public void <init>(double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x, y, temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        x := @parameter0: double;
        y := @parameter1: double;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$0;
        temp$1 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$1;
        temp$2 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$2;
        temp$3 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$3;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = x;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = x;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = y;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = y;
        return;
    }

    public void <init>(double, double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, y1, x2, y2, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$0;
        temp$1 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$1;
        temp$2 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$2;
        temp$3 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$3;
        temp$4 = staticinvoke <java.lang.Math: double min(double,double)>(x1, x2);
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$4;
        temp$5 = staticinvoke <java.lang.Math: double max(double,double)>(x1, x2);
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$5;
        temp$6 = staticinvoke <java.lang.Math: double min(double,double)>(y1, y2);
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$6;
        temp$7 = staticinvoke <java.lang.Math: double max(double,double)>(y1, y2);
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$7;
        return;
    }

    public void <init>(java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D aPoint2D;
        double temp$0, temp$1;

        this := @this: CH.ifa.draw.util.Bounds;
        aPoint2D := @parameter0: java.awt.geom.Point2D;
        temp$0 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getY()>();
        specialinvoke this.<CH.ifa.draw.util.Bounds: void <init>(double,double)>(temp$0, temp$1);
        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D firstPoint2D, secondPoint2D;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        firstPoint2D := @parameter0: java.awt.geom.Point2D;
        secondPoint2D := @parameter1: java.awt.geom.Point2D;
        temp$0 = virtualinvoke firstPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke firstPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$2 = virtualinvoke secondPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$3 = virtualinvoke secondPoint2D.<java.awt.geom.Point2D: double getY()>();
        specialinvoke this.<CH.ifa.draw.util.Bounds: void <init>(double,double,double,double)>(temp$0, temp$1, temp$2, temp$3);
        return;
    }

    public void <init>(CH.ifa.draw.util.Bounds)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        aBounds := @parameter0: CH.ifa.draw.util.Bounds;
        temp$0 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        temp$1 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        temp$2 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        temp$3 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        specialinvoke this.<CH.ifa.draw.util.Bounds: void <init>(double,double,double,double)>(temp$0, temp$1, temp$2, temp$3);
        return;
    }

    public void <init>(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Rectangle2D aRectangle2D;
        double temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7;

        this := @this: CH.ifa.draw.util.Bounds;
        aRectangle2D := @parameter0: java.awt.geom.Rectangle2D;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$0;
        temp$1 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$1;
        temp$2 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$2;
        temp$3 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$3;
        temp$4 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMinX()>();
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$4;
        temp$5 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMaxX()>();
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$5;
        temp$6 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMinY()>();
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$6;
        temp$7 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMaxY()>();
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$7;
        return;
    }

    public void <init>(java.awt.geom.Point2D, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D centerPoint2D;
        double dWidth, dHeight, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15, temp$16, temp$17;

        this := @this: CH.ifa.draw.util.Bounds;
        centerPoint2D := @parameter0: java.awt.geom.Point2D;
        dWidth := @parameter1: double;
        dHeight := @parameter2: double;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$0;
        temp$1 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$1;
        temp$2 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$2;
        temp$3 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$3;
        temp$4 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$5 = dWidth / 2.0;
        temp$6 = temp$4 - temp$5;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$6;
        temp$7 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$8 = temp$7;
        temp$9 = dWidth / 2.0;
        temp$10 = temp$8 + temp$9;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$10;
        temp$11 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$12 = dHeight / 2.0;
        temp$13 = temp$11 - temp$12;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$13;
        temp$14 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$15 = temp$14;
        temp$16 = dHeight / 2.0;
        temp$17 = temp$15 + temp$16;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$17;
        return;
    }

    public void <init>(java.awt.Dimension)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.Dimension aDimension;
        int temp$0, temp$2;
        double temp$1, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        aDimension := @parameter0: java.awt.Dimension;
        temp$0 = aDimension.<java.awt.Dimension: int width>;
        temp$1 = (double) temp$0;
        temp$2 = aDimension.<java.awt.Dimension: int height>;
        temp$3 = (double) temp$2;
        specialinvoke this.<CH.ifa.draw.util.Bounds: void <init>(double,double,double,double)>(0.0, 0.0, temp$1, temp$3);
        return;
    }

    protected void <init>()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$0;
        temp$1 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$1;
        temp$2 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$2;
        temp$3 = 0.0;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$3;
        return;
    }

    public double getLesserX()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        return temp$0;
    }

    public double getGreaterX()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        return temp$0;
    }

    public double getLesserY()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        return temp$0;
    }

    public double getGreaterY()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        return temp$0;
    }

    public double getWest()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        return temp$0;
    }

    public double getEast()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        return temp$0;
    }

    public double getSouth()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        return temp$0;
    }

    public double getNorth()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        return temp$0;
    }

    public double getWidth()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = temp$0 - temp$1;
        return temp$2;
    }

    public double getHeight()
    {
        CH.ifa.draw.util.Bounds this;
        double temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$2 = temp$0 - temp$1;
        return temp$2;
    }

    public java.awt.geom.Rectangle2D asRectangle2D()
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Rectangle2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        temp$3 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getWidth()>();
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getHeight()>();
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(temp$1, temp$2, temp$3, temp$4);
        return temp$0;
    }

    public void setCenter(java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D centerPoint2D, currentCenterPoint2D, temp$0;
        double dDeltaX, temp$1, temp$2, temp$3, dDeltaY, temp$4, temp$5, temp$6;

        this := @this: CH.ifa.draw.util.Bounds;
        centerPoint2D := @parameter0: java.awt.geom.Point2D;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.Bounds: java.awt.geom.Point2D getCenter()>();
        currentCenterPoint2D = temp$0;
        temp$1 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$2 = virtualinvoke currentCenterPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$3 = temp$1 - temp$2;
        dDeltaX = temp$3;
        temp$4 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$5 = virtualinvoke currentCenterPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$6 = temp$4 - temp$5;
        dDeltaY = temp$6;
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void offset(double,double)>(dDeltaX, dDeltaY);
        return;
    }

    public java.awt.geom.Point2D getCenter()
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = new java.awt.geom.Point2D$Double;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$3 = temp$1 + temp$2;
        temp$4 = temp$3 / 2.0;
        temp$5 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$7 = temp$5 + temp$6;
        temp$8 = temp$7 / 2.0;
        specialinvoke temp$0.<java.awt.geom.Point2D$Double: void <init>(double,double)>(temp$4, temp$8);
        return temp$0;
    }

    public void zoomBy(double)
    {
        CH.ifa.draw.util.Bounds this;
        double dRatio, dWidth, temp$0, temp$1, temp$2, dHeight, temp$3, temp$4, temp$5, dNewWidth, temp$6, dNewHeight, temp$7, temp$9, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15, temp$16, temp$17, temp$18, temp$19, temp$20, temp$21, temp$22;
        java.awt.geom.Point2D centerPoint2D, temp$8;

        this := @this: CH.ifa.draw.util.Bounds;
        dRatio := @parameter0: double;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = temp$0 - temp$1;
        dWidth = temp$2;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$5 = temp$3 - temp$4;
        dHeight = temp$5;
        temp$6 = dWidth * dRatio;
        dNewWidth = temp$6;
        temp$7 = dHeight * dRatio;
        dNewHeight = temp$7;
        temp$8 = virtualinvoke this.<CH.ifa.draw.util.Bounds: java.awt.geom.Point2D getCenter()>();
        centerPoint2D = temp$8;
        temp$9 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$10 = dNewWidth / 2.0;
        temp$11 = temp$9 - temp$10;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$11;
        temp$12 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$13 = dNewHeight / 2.0;
        temp$14 = temp$12 - temp$13;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$14;
        temp$15 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$16 = temp$15;
        temp$17 = dNewWidth / 2.0;
        temp$18 = temp$16 + temp$17;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$18;
        temp$19 = virtualinvoke centerPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$20 = temp$19;
        temp$21 = dNewHeight / 2.0;
        temp$22 = temp$20 + temp$21;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$22;
        return;
    }

    public void shiftBy(int, int)
    {
        CH.ifa.draw.util.Bounds this;
        int nXPercentage, nYPercentage;
        double dWidth, temp$0, temp$1, temp$2, dHeight, temp$3, temp$4, temp$5, dDeltaX, temp$6, temp$7, temp$8, dDeltaY, temp$9, temp$10, temp$11;

        this := @this: CH.ifa.draw.util.Bounds;
        nXPercentage := @parameter0: int;
        nYPercentage := @parameter1: int;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = temp$0 - temp$1;
        dWidth = temp$2;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$5 = temp$3 - temp$4;
        dHeight = temp$5;
        temp$6 = (double) nXPercentage;
        temp$7 = dWidth * temp$6;
        temp$8 = temp$7 / 100.0;
        dDeltaX = temp$8;
        temp$9 = (double) nYPercentage;
        temp$10 = dHeight * temp$9;
        temp$11 = temp$10 / 100.0;
        dDeltaY = temp$11;
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void offset(double,double)>(dDeltaX, dDeltaY);
        return;
    }

    public void offset(double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double dDeltaX, dDeltaY, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7;

        this := @this: CH.ifa.draw.util.Bounds;
        dDeltaX := @parameter0: double;
        dDeltaY := @parameter1: double;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$1 = temp$0 + dDeltaX;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$1;
        temp$2 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$3 = temp$2 + dDeltaX;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$3;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$5 = temp$4 + dDeltaY;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$5;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$7 = temp$6 + dDeltaY;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$7;
        return;
    }

    public void expandToRatio(double)
    {
        CH.ifa.draw.util.Bounds this;
        double dRatio, dCurrentRatio, temp$0, temp$1, temp$2, dNewWidth, temp$4, temp$5, dCenterX, temp$6, temp$7, temp$8, temp$9, dDelta, temp$10, temp$11, temp$12, temp$13, dNewHeight, temp$15, temp$16, dCenterY, temp$17, temp$18, temp$19, temp$20, dDelta, temp$21, temp$22, temp$23, temp$24;
        int temp$3, temp$14;

        this := @this: CH.ifa.draw.util.Bounds;
        dRatio := @parameter0: double;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getWidth()>();
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getHeight()>();
        temp$2 = temp$0 / temp$1;
        dCurrentRatio = temp$2;
        temp$3 = dCurrentRatio cmpg dRatio;
        if temp$3 >= 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getHeight()>();
        temp$5 = dRatio * temp$4;
        dNewWidth = temp$5;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$7 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$8 = temp$6 + temp$7;
        temp$9 = temp$8 / 2.0;
        dCenterX = temp$9;
        temp$10 = dNewWidth / 2.0;
        dDelta = temp$10;
        temp$11 = dCenterX - dDelta;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$11;
        temp$12 = dCenterX;
        temp$13 = temp$12 + dDelta;
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$13;

     label1:
        nop;
        temp$14 = dCurrentRatio cmpl dRatio;
        if temp$14 <= 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$15 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double getWidth()>();
        temp$16 = temp$15 / dRatio;
        dNewHeight = temp$16;
        temp$17 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$18 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$19 = temp$17 + temp$18;
        temp$20 = temp$19 / 2.0;
        dCenterY = temp$20;
        temp$21 = dNewHeight / 2.0;
        dDelta = temp$21;
        temp$22 = dCenterY - dDelta;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$22;
        temp$23 = dCenterY;
        temp$24 = temp$23 + dDelta;
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$24;

     label3:
        nop;
        return;
    }

    public void includeXCoordinate(double)
    {
        CH.ifa.draw.util.Bounds this;
        double x, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5;

        this := @this: CH.ifa.draw.util.Bounds;
        x := @parameter0: double;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double min(double,double,double)>(temp$0, temp$1, x);
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$2;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$5 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double max(double,double,double)>(temp$3, temp$4, x);
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$5;
        return;
    }

    public void includeYCoordinate(double)
    {
        CH.ifa.draw.util.Bounds this;
        double y, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5;

        this := @this: CH.ifa.draw.util.Bounds;
        y := @parameter0: double;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double min(double,double,double)>(temp$0, temp$1, y);
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$2;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$5 = virtualinvoke this.<CH.ifa.draw.util.Bounds: double max(double,double,double)>(temp$3, temp$4, y);
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$5;
        return;
    }

    public void includePoint(double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x, y;

        this := @this: CH.ifa.draw.util.Bounds;
        x := @parameter0: double;
        y := @parameter1: double;
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeXCoordinate(double)>(x);
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeYCoordinate(double)>(y);
        return;
    }

    public void includePoint(java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D aPoint2D;
        double temp$0, temp$1;

        this := @this: CH.ifa.draw.util.Bounds;
        aPoint2D := @parameter0: java.awt.geom.Point2D;
        temp$0 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includePoint(double,double)>(temp$0, temp$1);
        return;
    }

    public void includeLine(double, double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, y1, x2, y2;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includePoint(double,double)>(x1, y1);
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includePoint(double,double)>(x2, y2);
        return;
    }

    public void includeLine(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D onePoint2D, twoPoint2D;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        onePoint2D := @parameter0: java.awt.geom.Point2D;
        twoPoint2D := @parameter1: java.awt.geom.Point2D;
        temp$0 = virtualinvoke onePoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke onePoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$2 = virtualinvoke twoPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$3 = virtualinvoke twoPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeLine(double,double,double,double)>(temp$0, temp$1, temp$2, temp$3);
        return;
    }

    public void includeBounds(CH.ifa.draw.util.Bounds)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        aBounds := @parameter0: CH.ifa.draw.util.Bounds;
        temp$0 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeXCoordinate(double)>(temp$0);
        temp$1 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeXCoordinate(double)>(temp$1);
        temp$2 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeYCoordinate(double)>(temp$2);
        temp$3 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeYCoordinate(double)>(temp$3);
        return;
    }

    public void includeRectangle2D(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Rectangle2D aRectangle2D;
        double temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.Bounds;
        aRectangle2D := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMinX()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeXCoordinate(double)>(temp$0);
        temp$1 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMaxX()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeXCoordinate(double)>(temp$1);
        temp$2 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMinY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeYCoordinate(double)>(temp$2);
        temp$3 = virtualinvoke aRectangle2D.<java.awt.geom.Rectangle2D: double getMaxY()>();
        virtualinvoke this.<CH.ifa.draw.util.Bounds: void includeYCoordinate(double)>(temp$3);
        return;
    }

    public void intersect(CH.ifa.draw.util.Bounds)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        double temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13, temp$15, temp$16, temp$17, temp$19;
        int temp$14, temp$18;

        this := @this: CH.ifa.draw.util.Bounds;
        aBounds := @parameter0: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$1 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        temp$2 = staticinvoke <java.lang.Math: double max(double,double)>(temp$0, temp$1);
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$2;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$4 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        temp$5 = staticinvoke <java.lang.Math: double max(double,double)>(temp$3, temp$4);
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$5;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$7 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        temp$8 = staticinvoke <java.lang.Math: double min(double,double)>(temp$6, temp$7);
        this.<CH.ifa.draw.util.Bounds: double _dX2> = temp$8;
        temp$9 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$10 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        temp$11 = staticinvoke <java.lang.Math: double min(double,double)>(temp$9, temp$10);
        this.<CH.ifa.draw.util.Bounds: double _dY2> = temp$11;
        temp$12 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$13 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$14 = temp$12 cmpl temp$13;
        if temp$14 <= 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$15 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        this.<CH.ifa.draw.util.Bounds: double _dX1> = temp$15;

     label1:
        nop;
        temp$16 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$17 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$18 = temp$16 cmpl temp$17;
        if temp$18 <= 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$19 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        this.<CH.ifa.draw.util.Bounds: double _dY1> = temp$19;

     label3:
        nop;
        return;
    }

    public boolean intersectsPoint(double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x, y, temp$0, temp$2, temp$4, temp$6;
        int temp$1, temp$3, temp$5, temp$7;
        boolean temp$8;

        this := @this: CH.ifa.draw.util.Bounds;
        x := @parameter0: double;
        y := @parameter1: double;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$1 = temp$0 cmpg x;
        if temp$1 > 0 goto label3;

        goto label0;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$3 = x cmpg temp$2;
        if temp$3 > 0 goto label3;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$5 = temp$4 cmpg y;
        if temp$5 > 0 goto label3;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$7 = y cmpg temp$6;
        if temp$7 > 0 goto label3;

        goto label4;

        goto label4;

     label3:
        nop;
        temp$8 = 0;
        goto label5;

     label4:
        nop;
        temp$8 = 1;

     label5:
        nop;
        return temp$8;
    }

    public boolean intersectsPoint(java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D aPoint2D;
        double temp$0, temp$1;
        boolean temp$2;

        this := @this: CH.ifa.draw.util.Bounds;
        aPoint2D := @parameter0: java.awt.geom.Point2D;
        temp$0 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke aPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(temp$0, temp$1);
        return temp$2;
    }

    public boolean intersectsLine(double, double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, y1, x2, y2, temp$4, temp$6, temp$9, temp$11, temp$14, temp$16, temp$19, temp$21, temp$24, temp$26, temp$28, temp$30, temp$33, temp$35, temp$37, temp$39, dSlope, temp$42, temp$43, temp$44, _dYIntersectionAtX1, temp$45, temp$46, temp$47, temp$48, _dYIntersectionAtX2, temp$49, temp$50, temp$51, temp$52, _dXIntersectionAtY1, temp$53, temp$54, temp$55, temp$56, _dXIntersectionAtY2, temp$57, temp$58, temp$59, temp$60, temp$61, temp$63, temp$65, temp$67;
        boolean temp$0, temp$1, temp$2, temp$3, temp$8, temp$13, temp$18, temp$23, temp$32, temp$41, temp$62, temp$64, temp$66, temp$68, temp$69;
        int temp$5, temp$7, temp$10, temp$12, temp$15, temp$17, temp$20, temp$22, temp$25, temp$27, temp$29, temp$31, temp$34, temp$36, temp$38, temp$40;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(x1, y1);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = 1;
        return temp$1;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(x2, y2);
        if temp$2 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$3 = 1;
        return temp$3;

     label3:
        nop;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$5 = x1 cmpg temp$4;
        if temp$5 >= 0 goto label6;

        goto label4;

     label4:
        nop;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$7 = x2 cmpg temp$6;
        if temp$7 >= 0 goto label6;

        goto label5;

        goto label5;

     label5:
        nop;
        temp$8 = 0;
        return temp$8;

     label6:
        nop;
        temp$9 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$10 = x1 cmpl temp$9;
        if temp$10 <= 0 goto label9;

        goto label7;

     label7:
        nop;
        temp$11 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$12 = x2 cmpl temp$11;
        if temp$12 <= 0 goto label9;

        goto label8;

        goto label8;

     label8:
        nop;
        temp$13 = 0;
        return temp$13;

     label9:
        nop;
        temp$14 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$15 = y1 cmpg temp$14;
        if temp$15 >= 0 goto label12;

        goto label10;

     label10:
        nop;
        temp$16 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$17 = y2 cmpg temp$16;
        if temp$17 >= 0 goto label12;

        goto label11;

        goto label11;

     label11:
        nop;
        temp$18 = 0;
        return temp$18;

     label12:
        nop;
        temp$19 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$20 = y1 cmpl temp$19;
        if temp$20 <= 0 goto label15;

        goto label13;

     label13:
        nop;
        temp$21 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$22 = y2 cmpl temp$21;
        if temp$22 <= 0 goto label15;

        goto label14;

        goto label14;

     label14:
        nop;
        temp$23 = 0;
        return temp$23;

     label15:
        nop;
        temp$24 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$25 = temp$24 cmpg x1;
        if temp$25 > 0 goto label20;

        goto label16;

     label16:
        nop;
        temp$26 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$27 = x1 cmpg temp$26;
        if temp$27 > 0 goto label20;

        goto label17;

        goto label17;

     label17:
        nop;
        temp$28 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$29 = temp$28 cmpg x2;
        if temp$29 > 0 goto label20;

        goto label18;

     label18:
        nop;
        temp$30 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$31 = x2 cmpg temp$30;
        if temp$31 > 0 goto label20;

        goto label19;

        goto label19;

        goto label19;

     label19:
        nop;
        temp$32 = 1;
        return temp$32;

     label20:
        nop;
        temp$33 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$34 = temp$33 cmpg y1;
        if temp$34 > 0 goto label25;

        goto label21;

     label21:
        nop;
        temp$35 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$36 = y1 cmpg temp$35;
        if temp$36 > 0 goto label25;

        goto label22;

        goto label22;

     label22:
        nop;
        temp$37 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$38 = temp$37 cmpg y2;
        if temp$38 > 0 goto label25;

        goto label23;

     label23:
        nop;
        temp$39 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$40 = y2 cmpg temp$39;
        if temp$40 > 0 goto label25;

        goto label24;

        goto label24;

        goto label24;

     label24:
        nop;
        temp$41 = 1;
        return temp$41;

     label25:
        nop;
        temp$42 = y2 - y1;
        temp$43 = x2 - x1;
        temp$44 = temp$42 / temp$43;
        dSlope = temp$44;
        temp$45 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$46 = temp$45 - x1;
        temp$47 = dSlope * temp$46;
        temp$48 = temp$47;
        _dYIntersectionAtX1 = temp$48 + y1;
        temp$49 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$50 = temp$49 - x1;
        temp$51 = dSlope * temp$50;
        temp$52 = temp$51;
        _dYIntersectionAtX2 = temp$52 + y1;
        temp$53 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$54 = temp$53 - y1;
        temp$55 = temp$54 / dSlope;
        temp$56 = temp$55;
        _dXIntersectionAtY1 = temp$56 + x1;
        temp$57 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$58 = temp$57 - y1;
        temp$59 = temp$58 / dSlope;
        temp$60 = temp$59;
        _dXIntersectionAtY2 = temp$60 + x1;
        temp$61 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$62 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(temp$61, _dYIntersectionAtX1);
        if temp$62 == 0 goto label26;

        goto label30;

     label26:
        nop;
        temp$63 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$64 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(temp$63, _dYIntersectionAtX2);
        if temp$64 == 0 goto label27;

        goto label30;

        goto label27;

     label27:
        nop;
        temp$65 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$66 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(_dXIntersectionAtY1, temp$65);
        if temp$66 == 0 goto label28;

        goto label30;

        goto label28;

     label28:
        nop;
        temp$67 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$68 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(double,double)>(_dXIntersectionAtY2, temp$67);
        if temp$68 == 0 goto label29;

        goto label30;

        goto label29;

     label29:
        nop;
        temp$69 = 0;
        goto label31;

     label30:
        nop;
        temp$69 = 1;

     label31:
        nop;
        return temp$69;
    }

    public boolean intersectsLine(java.awt.geom.Point2D, java.awt.geom.Point2D)
    {
        CH.ifa.draw.util.Bounds this;
        java.awt.geom.Point2D onePoint2D, twoPoint2D;
        double temp$0, temp$1, temp$2, temp$3;
        boolean temp$4;

        this := @this: CH.ifa.draw.util.Bounds;
        onePoint2D := @parameter0: java.awt.geom.Point2D;
        twoPoint2D := @parameter1: java.awt.geom.Point2D;
        temp$0 = virtualinvoke onePoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$1 = virtualinvoke onePoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$2 = virtualinvoke twoPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$3 = virtualinvoke twoPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsLine(double,double,double,double)>(temp$0, temp$1, temp$2, temp$3);
        return temp$4;
    }

    public boolean intersectsBounds(CH.ifa.draw.util.Bounds)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        double dLesserX, temp$0, dGreaterX, temp$1, dLesserY, temp$2, dGreaterY, temp$3, temp$4, temp$6, temp$8, temp$10, temp$13, temp$15, temp$18, temp$20, temp$22, temp$25, temp$27;
        int temp$5, temp$7, temp$9, temp$11, temp$14, temp$16, temp$19, temp$21, temp$23, temp$26, temp$28;
        boolean temp$12, temp$17, temp$24, temp$29;

        this := @this: CH.ifa.draw.util.Bounds;
        aBounds := @parameter0: CH.ifa.draw.util.Bounds;
        temp$0 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        dLesserX = temp$0;
        temp$1 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        dGreaterX = temp$1;
        temp$2 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        dLesserY = temp$2;
        temp$3 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        dGreaterY = temp$3;
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$5 = dLesserX cmpg temp$4;
        if temp$5 >= 0 goto label11;

        goto label0;

     label0:
        nop;
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$7 = dLesserY cmpg temp$6;
        if temp$7 >= 0 goto label6;

        goto label1;

     label1:
        nop;
        temp$8 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$9 = dGreaterX cmpl temp$8;
        if temp$9 < 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$10 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$11 = dGreaterY cmpl temp$10;
        if temp$11 < 0 goto label3;

        goto label4;

        goto label4;

     label3:
        nop;
        temp$12 = 0;
        goto label5;

     label4:
        nop;
        temp$12 = 1;

     label5:
        nop;
        return temp$12;

     label6:
        nop;
        temp$13 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$14 = dGreaterX cmpl temp$13;
        if temp$14 < 0 goto label8;

        goto label7;

     label7:
        nop;
        temp$15 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$16 = dLesserY cmpg temp$15;
        if temp$16 > 0 goto label8;

        goto label9;

        goto label9;

     label8:
        nop;
        temp$17 = 0;
        goto label10;

     label9:
        nop;
        temp$17 = 1;

     label10:
        nop;
        return temp$17;

     label11:
        nop;
        temp$18 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$19 = dLesserY cmpg temp$18;
        if temp$19 >= 0 goto label17;

        goto label12;

     label12:
        nop;
        temp$20 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$21 = dLesserX cmpg temp$20;
        if temp$21 > 0 goto label14;

        goto label13;

     label13:
        nop;
        temp$22 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$23 = dGreaterY cmpl temp$22;
        if temp$23 < 0 goto label14;

        goto label15;

        goto label15;

     label14:
        nop;
        temp$24 = 0;
        goto label16;

     label15:
        nop;
        temp$24 = 1;

     label16:
        nop;
        return temp$24;

     label17:
        nop;
        temp$25 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$26 = dLesserX cmpg temp$25;
        if temp$26 > 0 goto label19;

        goto label18;

     label18:
        nop;
        temp$27 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$28 = dLesserY cmpg temp$27;
        if temp$28 > 0 goto label19;

        goto label20;

        goto label20;

     label19:
        nop;
        temp$29 = 0;
        goto label21;

     label20:
        nop;
        temp$29 = 1;

     label21:
        nop;
        return temp$29;
    }

    public boolean completelyContainsLine(double, double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, y1, x2, y2, temp$0, temp$1, temp$3, temp$4, temp$6, temp$7, temp$9, temp$10;
        int temp$2, temp$5, temp$8, temp$11;
        boolean temp$12;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        temp$0 = staticinvoke <java.lang.Math: double min(double,double)>(x1, x2);
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = temp$1 cmpl temp$0;
        if temp$2 <= 0 goto label3;

        goto label0;

     label0:
        nop;
        temp$3 = staticinvoke <java.lang.Math: double max(double,double)>(x1, x2);
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$5 = temp$4 cmpg temp$3;
        if temp$5 >= 0 goto label3;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$6 = staticinvoke <java.lang.Math: double min(double,double)>(y1, y2);
        temp$7 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$8 = temp$7 cmpl temp$6;
        if temp$8 <= 0 goto label3;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$9 = staticinvoke <java.lang.Math: double max(double,double)>(y1, y2);
        temp$10 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$11 = temp$10 cmpg temp$9;
        if temp$11 >= 0 goto label3;

        goto label4;

        goto label4;

     label3:
        nop;
        temp$12 = 0;
        goto label5;

     label4:
        nop;
        temp$12 = 1;

     label5:
        nop;
        return temp$12;
    }

    public boolean isCompletelyInside(CH.ifa.draw.util.Bounds)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        double temp$0, temp$1, temp$3, temp$4, temp$6, temp$7, temp$9, temp$10;
        int temp$2, temp$5, temp$8, temp$11;
        boolean temp$12;

        this := @this: CH.ifa.draw.util.Bounds;
        aBounds := @parameter0: CH.ifa.draw.util.Bounds;
        temp$0 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = temp$1 cmpl temp$0;
        if temp$2 <= 0 goto label3;

        goto label0;

     label0:
        nop;
        temp$3 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        temp$4 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$5 = temp$4 cmpg temp$3;
        if temp$5 >= 0 goto label3;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$6 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        temp$7 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$8 = temp$7 cmpl temp$6;
        if temp$8 <= 0 goto label3;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$9 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        temp$10 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$11 = temp$10 cmpg temp$9;
        if temp$11 >= 0 goto label3;

        goto label4;

        goto label4;

     label3:
        nop;
        temp$12 = 0;
        goto label5;

     label4:
        nop;
        temp$12 = 1;

     label5:
        nop;
        return temp$12;
    }

    public java.awt.geom.Point2D[] cropLine(double, double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, y1, x2, y2, temp$4, temp$5, temp$7, temp$8, temp$10, temp$11, temp$12, temp$13, temp$15, temp$16, temp$17, temp$18, temp$20, temp$21, temp$22, temp$23, temp$25, temp$26, temp$27, temp$28, temp$30, temp$31, temp$33, temp$34, temp$35, temp$36, temp$38, temp$39, temp$40, temp$41, temp$43, temp$44, temp$45, temp$46, temp$48, temp$49, dSlope, temp$50, temp$51, temp$52, temp$53, temp$54, temp$55, temp$56, temp$58, temp$59, x, temp$61, temp$62, temp$63, temp$64, temp$65, temp$66, temp$67, temp$69, temp$71, temp$72, temp$73, temp$74, temp$75, x, temp$77, temp$78, temp$79, temp$80, temp$81, temp$82, temp$83, temp$85, temp$87, temp$88, temp$89, temp$90, temp$91, y, temp$93, temp$94, temp$95, temp$96, temp$97, temp$98, temp$99, temp$101, temp$103, temp$104, temp$105, temp$106, temp$107, y, temp$109, temp$110, temp$111, temp$112, temp$113, temp$114, temp$115, temp$117, temp$119, temp$120, temp$121, temp$123, temp$124, x, temp$126, temp$127, temp$128, temp$129, temp$130, temp$131, temp$132, temp$134, temp$136, temp$137, temp$138, temp$139, temp$140, x, temp$142, temp$143, temp$144, temp$145, temp$146, temp$147, temp$148, temp$150, temp$152, temp$153, temp$154, temp$155, temp$156, y, temp$158, temp$159, temp$160, temp$161, temp$162, temp$163, temp$164, temp$166, temp$168, temp$169, temp$170, temp$171, temp$172, y, temp$174, temp$175, temp$176, temp$177, temp$178, temp$179, temp$180, temp$182, temp$184, temp$185, temp$186;
        boolean temp$0, temp$57, temp$122;
        java.awt.geom.Point2D[] temp$1, resultLine, temp$187, temp$189;
        java.awt.geom.Point2D beginPoint2D, endPoint2D;
        java.awt.geom.Point2D$Double temp$2, temp$3;
        int temp$6, temp$9, temp$14, temp$19, temp$24, temp$29, temp$32, temp$37, temp$42, temp$47, temp$60, temp$68, temp$70, temp$76, temp$84, temp$86, temp$92, temp$100, temp$102, temp$108, temp$116, temp$118, temp$125, temp$133, temp$135, temp$141, temp$149, temp$151, temp$157, temp$165, temp$167, temp$173, temp$181, temp$183, temp$188, temp$190;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsLine(double,double,double,double)>(x1, y1, x2, y2);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = null;
        return temp$1;

     label1:
        nop;
        resultLine = newarray (java.awt.geom.Point2D)[2];
        temp$2 = new java.awt.geom.Point2D$Double;
        specialinvoke temp$2.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x1, y1);
        beginPoint2D = temp$2;
        temp$3 = new java.awt.geom.Point2D$Double;
        specialinvoke temp$3.<java.awt.geom.Point2D$Double: void <init>(double,double)>(x2, y2);
        endPoint2D = temp$3;
        temp$4 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$5 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$6 = temp$4 cmpg temp$5;
        if temp$6 != 0 goto label11;

        goto label2;

     label2:
        nop;
        temp$7 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$8 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$9 = temp$7 cmpl temp$8;
        if temp$9 <= 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$10 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$11 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$10, temp$11);

     label4:
        nop;
        temp$12 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$13 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$14 = temp$12 cmpl temp$13;
        if temp$14 <= 0 goto label6;

        goto label5;

     label5:
        nop;
        temp$15 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$16 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$15, temp$16);

     label6:
        nop;
        temp$17 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$18 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$19 = temp$17 cmpg temp$18;
        if temp$19 >= 0 goto label8;

        goto label7;

     label7:
        nop;
        temp$20 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$21 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$20, temp$21);

     label8:
        nop;
        temp$22 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$23 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$24 = temp$22 cmpg temp$23;
        if temp$24 >= 0 goto label10;

        goto label9;

     label9:
        nop;
        temp$25 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$26 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$25, temp$26);

     label10:
        nop;
        goto label67;

     label11:
        nop;
        temp$27 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$28 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$29 = temp$27 cmpg temp$28;
        if temp$29 != 0 goto label21;

        goto label12;

     label12:
        nop;
        temp$30 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$31 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$32 = temp$30 cmpl temp$31;
        if temp$32 <= 0 goto label14;

        goto label13;

     label13:
        nop;
        temp$33 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$34 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$33, temp$34);

     label14:
        nop;
        temp$35 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$36 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$37 = temp$35 cmpl temp$36;
        if temp$37 <= 0 goto label16;

        goto label15;

     label15:
        nop;
        temp$38 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$39 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$38, temp$39);

     label16:
        nop;
        temp$40 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$41 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$42 = temp$40 cmpg temp$41;
        if temp$42 >= 0 goto label18;

        goto label17;

     label17:
        nop;
        temp$43 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$44 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$43, temp$44);

     label18:
        nop;
        temp$45 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$46 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$47 = temp$45 cmpg temp$46;
        if temp$47 >= 0 goto label20;

        goto label19;

     label19:
        nop;
        temp$48 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$49 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$48, temp$49);

     label20:
        nop;
        goto label66;

     label21:
        nop;
        temp$50 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$51 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$52 = temp$50 - temp$51;
        temp$53 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$54 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$55 = temp$53 - temp$54;
        temp$56 = temp$52 / temp$55;
        dSlope = temp$56;
        temp$57 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(java.awt.geom.Point2D)>(beginPoint2D);
        if temp$57 == 0 goto label22;

        goto label43;

     label22:
        nop;
        temp$58 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$59 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$60 = temp$58 cmpl temp$59;
        if temp$60 <= 0 goto label27;

        goto label23;

     label23:
        nop;
        temp$61 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$62 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$63 = temp$62 - temp$61;
        temp$64 = temp$63 / dSlope;
        temp$65 = temp$64;
        temp$66 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        x = temp$65 + temp$66;
        temp$67 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$68 = x cmpl temp$67;
        if temp$68 < 0 goto label26;

        goto label24;

     label24:
        nop;
        temp$69 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$70 = x cmpg temp$69;
        if temp$70 > 0 goto label26;

        goto label25;

        goto label25;

     label25:
        nop;
        temp$71 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(x, temp$71);
        temp$72 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$73 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$72, temp$73);

     label26:
        nop;

     label27:
        nop;
        temp$74 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$75 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$76 = temp$74 cmpg temp$75;
        if temp$76 >= 0 goto label32;

        goto label28;

     label28:
        nop;
        temp$77 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$78 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$79 = temp$78 - temp$77;
        temp$80 = temp$79 / dSlope;
        temp$81 = temp$80;
        temp$82 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        x = temp$81 + temp$82;
        temp$83 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$84 = x cmpl temp$83;
        if temp$84 < 0 goto label31;

        goto label29;

     label29:
        nop;
        temp$85 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$86 = x cmpg temp$85;
        if temp$86 > 0 goto label31;

        goto label30;

        goto label30;

     label30:
        nop;
        temp$87 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(x, temp$87);
        temp$88 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$89 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$88, temp$89);

     label31:
        nop;

     label32:
        nop;
        temp$90 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$91 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$92 = temp$90 cmpl temp$91;
        if temp$92 <= 0 goto label37;

        goto label33;

     label33:
        nop;
        temp$93 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$94 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$95 = temp$94 - temp$93;
        temp$96 = dSlope * temp$95;
        temp$97 = temp$96;
        temp$98 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        y = temp$97 + temp$98;
        temp$99 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$100 = y cmpl temp$99;
        if temp$100 < 0 goto label36;

        goto label34;

     label34:
        nop;
        temp$101 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$102 = y cmpg temp$101;
        if temp$102 > 0 goto label36;

        goto label35;

        goto label35;

     label35:
        nop;
        temp$103 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$104 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$103, temp$104);
        temp$105 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$105, y);

     label36:
        nop;

     label37:
        nop;
        temp$106 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$107 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$108 = temp$106 cmpg temp$107;
        if temp$108 >= 0 goto label42;

        goto label38;

     label38:
        nop;
        temp$109 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$110 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$111 = temp$110 - temp$109;
        temp$112 = dSlope * temp$111;
        temp$113 = temp$112;
        temp$114 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        y = temp$113 + temp$114;
        temp$115 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$116 = y cmpl temp$115;
        if temp$116 < 0 goto label41;

        goto label39;

     label39:
        nop;
        temp$117 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$118 = y cmpg temp$117;
        if temp$118 > 0 goto label41;

        goto label40;

        goto label40;

     label40:
        nop;
        temp$119 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$120 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$119, temp$120);
        temp$121 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        virtualinvoke beginPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$121, y);

     label41:
        nop;

     label42:
        nop;

     label43:
        nop;
        temp$122 = virtualinvoke this.<CH.ifa.draw.util.Bounds: boolean intersectsPoint(java.awt.geom.Point2D)>(endPoint2D);
        if temp$122 == 0 goto label44;

        goto label65;

     label44:
        nop;
        temp$123 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$124 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$125 = temp$123 cmpl temp$124;
        if temp$125 <= 0 goto label49;

        goto label45;

     label45:
        nop;
        temp$126 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$127 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$128 = temp$127 - temp$126;
        temp$129 = temp$128 / dSlope;
        temp$130 = temp$129;
        temp$131 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        x = temp$130 + temp$131;
        temp$132 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$133 = x cmpl temp$132;
        if temp$133 < 0 goto label48;

        goto label46;

     label46:
        nop;
        temp$134 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$135 = x cmpg temp$134;
        if temp$135 > 0 goto label48;

        goto label47;

        goto label47;

     label47:
        nop;
        temp$136 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(x, temp$136);
        temp$137 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$138 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$137, temp$138);

     label48:
        nop;

     label49:
        nop;
        temp$139 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$140 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$141 = temp$139 cmpg temp$140;
        if temp$141 >= 0 goto label54;

        goto label50;

     label50:
        nop;
        temp$142 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        temp$143 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$144 = temp$143 - temp$142;
        temp$145 = temp$144 / dSlope;
        temp$146 = temp$145;
        temp$147 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        x = temp$146 + temp$147;
        temp$148 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$149 = x cmpl temp$148;
        if temp$149 < 0 goto label53;

        goto label51;

     label51:
        nop;
        temp$150 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$151 = x cmpg temp$150;
        if temp$151 > 0 goto label53;

        goto label52;

        goto label52;

     label52:
        nop;
        temp$152 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(x, temp$152);
        temp$153 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$154 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$153, temp$154);

     label53:
        nop;

     label54:
        nop;
        temp$155 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$156 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$157 = temp$155 cmpl temp$156;
        if temp$157 <= 0 goto label59;

        goto label55;

     label55:
        nop;
        temp$158 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$159 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$160 = temp$159 - temp$158;
        temp$161 = dSlope * temp$160;
        temp$162 = temp$161;
        temp$163 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        y = temp$162 + temp$163;
        temp$164 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$165 = y cmpl temp$164;
        if temp$165 < 0 goto label58;

        goto label56;

     label56:
        nop;
        temp$166 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$167 = y cmpg temp$166;
        if temp$167 > 0 goto label58;

        goto label57;

        goto label57;

     label57:
        nop;
        temp$168 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$169 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$168, temp$169);
        temp$170 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$170, y);

     label58:
        nop;

     label59:
        nop;
        temp$171 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$172 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$173 = temp$171 cmpg temp$172;
        if temp$173 >= 0 goto label64;

        goto label60;

     label60:
        nop;
        temp$174 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getX()>();
        temp$175 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$176 = temp$175 - temp$174;
        temp$177 = dSlope * temp$176;
        temp$178 = temp$177;
        temp$179 = virtualinvoke beginPoint2D.<java.awt.geom.Point2D: double getY()>();
        y = temp$178 + temp$179;
        temp$180 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$181 = y cmpl temp$180;
        if temp$181 < 0 goto label63;

        goto label61;

     label61:
        nop;
        temp$182 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$183 = y cmpg temp$182;
        if temp$183 > 0 goto label63;

        goto label62;

        goto label62;

     label62:
        nop;
        temp$184 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$185 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getY()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$184, temp$185);
        temp$186 = virtualinvoke endPoint2D.<java.awt.geom.Point2D: double getX()>();
        virtualinvoke endPoint2D.<java.awt.geom.Point2D: void setLocation(double,double)>(temp$186, y);

     label63:
        nop;

     label64:
        nop;

     label65:
        nop;

     label66:
        nop;

     label67:
        nop;
        temp$187 = resultLine;
        temp$188 = 0;
        temp$187[temp$188] = beginPoint2D;
        temp$189 = resultLine;
        temp$190 = 1;
        temp$189[temp$190] = endPoint2D;
        return resultLine;
    }

    public boolean equals(java.lang.Object)
    {
        CH.ifa.draw.util.Bounds this, aBounds;
        java.lang.Object anObject;
        boolean temp$0, temp$1, temp$14, temp$15;
        double temp$2, temp$3, temp$5, temp$6, temp$8, temp$9, temp$11, temp$12;
        int temp$4, temp$7, temp$10, temp$13;

        this := @this: CH.ifa.draw.util.Bounds;
        anObject := @parameter0: java.lang.Object;
        if anObject == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = anObject instanceof CH.ifa.draw.util.Bounds;
        if temp$0 == 0 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$1 = 0;
        return temp$1;

     label2:
        nop;
        aBounds = (CH.ifa.draw.util.Bounds) anObject;
        temp$2 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserX()>();
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$4 = temp$3 cmpg temp$2;
        if temp$4 != 0 goto label7;

        goto label3;

     label3:
        nop;
        temp$5 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterX()>();
        temp$6 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$7 = temp$6 cmpg temp$5;
        if temp$7 != 0 goto label7;

        goto label4;

        goto label4;

     label4:
        nop;
        temp$8 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getLesserY()>();
        temp$9 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$10 = temp$9 cmpg temp$8;
        if temp$10 != 0 goto label7;

        goto label5;

        goto label5;

     label5:
        nop;
        temp$11 = virtualinvoke aBounds.<CH.ifa.draw.util.Bounds: double getGreaterY()>();
        temp$12 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$13 = temp$12 cmpg temp$11;
        if temp$13 != 0 goto label7;

        goto label6;

        goto label6;

     label6:
        nop;
        temp$14 = 1;
        return temp$14;

     label7:
        nop;
        temp$15 = 0;
        return temp$15;
    }

    public int hashCode()
    {
        CH.ifa.draw.util.Bounds this;
        double temp, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$10, temp$11;
        int temp$8, temp$9, temp$12;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$2 = temp$0 + temp$1;
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$4 = temp$2 + temp$3;
        temp$5 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$6 = temp$4 + temp$5;
        temp$7 = staticinvoke <java.lang.Math: double abs(double)>(temp$6);
        temp = temp$7;

     label0:
        nop;
        temp$8 = temp cmpg 0.0;
        if temp$8 == 0 goto label3;

        goto label1;

     label1:
        nop;
        temp$9 = temp cmpg 1.0;
        if temp$9 >= 0 goto label3;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$10 = temp;
        temp$11 = temp$10 * 4.0;
        temp = temp$11;
        goto label0;

     label3:
        nop;
        temp$12 = (int) temp;
        return temp$12;
    }

    public java.lang.String toString()
    {
        CH.ifa.draw.util.Bounds this;
        java.lang.StringBuffer temp$0;
        double temp$1, temp$3, temp$5, temp$7;
        java.lang.String temp$2, temp$4, temp$6, temp$8, temp$9;

        this := @this: CH.ifa.draw.util.Bounds;
        temp$0 = new java.lang.StringBuffer;
        specialinvoke temp$0.<java.lang.StringBuffer: void <init>()>();
        temp$1 = this.<CH.ifa.draw.util.Bounds: double _dX1>;
        temp$2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(temp$1);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$2);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        temp$3 = this.<CH.ifa.draw.util.Bounds: double _dY1>;
        temp$4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(temp$3);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$4);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        temp$5 = this.<CH.ifa.draw.util.Bounds: double _dX2>;
        temp$6 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(temp$5);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$6);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" ");
        temp$7 = this.<CH.ifa.draw.util.Bounds: double _dY2>;
        temp$8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(temp$7);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$8);
        temp$9 = virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$9;
    }

    private final double min(double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, x2, x3, temp$0, temp$1;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        x2 := @parameter1: double;
        x3 := @parameter2: double;
        temp$0 = staticinvoke <java.lang.Math: double min(double,double)>(x1, x2);
        temp$1 = staticinvoke <java.lang.Math: double min(double,double)>(temp$0, x3);
        return temp$1;
    }

    private final double max(double, double, double)
    {
        CH.ifa.draw.util.Bounds this;
        double x1, x2, x3, temp$0, temp$1;

        this := @this: CH.ifa.draw.util.Bounds;
        x1 := @parameter0: double;
        x2 := @parameter1: double;
        x3 := @parameter2: double;
        temp$0 = staticinvoke <java.lang.Math: double max(double,double)>(x1, x2);
        temp$1 = staticinvoke <java.lang.Math: double max(double,double)>(temp$0, x3);
        return temp$1;
    }
}
