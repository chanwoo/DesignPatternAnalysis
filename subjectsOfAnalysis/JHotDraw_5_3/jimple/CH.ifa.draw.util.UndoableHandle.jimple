public class CH.ifa.draw.util.UndoableHandle extends java.lang.Object implements CH.ifa.draw.framework.Handle
{
    private CH.ifa.draw.framework.Handle myWrappedHandle;
    private CH.ifa.draw.framework.DrawingView myDrawingView;

    public void <init>(CH.ifa.draw.framework.Handle, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle newWrappedHandle;
        CH.ifa.draw.framework.DrawingView newDrawingView;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        newWrappedHandle := @parameter0: CH.ifa.draw.framework.Handle;
        newDrawingView := @parameter1: CH.ifa.draw.framework.DrawingView;
        specialinvoke this.<java.lang.Object: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: void setWrappedHandle(CH.ifa.draw.framework.Handle)>(newWrappedHandle);
        virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: void setDrawingView(CH.ifa.draw.framework.DrawingView)>(newDrawingView);
        return;
    }

    public java.awt.Point locate()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle temp$0;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: java.awt.Point locate()>();
        return temp$1;
    }

    public void invokeStart(int, int, CH.ifa.draw.framework.Drawing)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int x, y;
        CH.ifa.draw.framework.Drawing drawing;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        x := @parameter0: int;
        y := @parameter1: int;
        drawing := @parameter2: CH.ifa.draw.framework.Drawing;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeStart(int,int,CH.ifa.draw.framework.Drawing)>(x, y, drawing);
        return;
    }

    public void invokeStart(int, int, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int x, y;
        CH.ifa.draw.framework.DrawingView view;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        x := @parameter0: int;
        y := @parameter1: int;
        view := @parameter2: CH.ifa.draw.framework.DrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeStart(int,int,CH.ifa.draw.framework.DrawingView)>(x, y, view);
        return;
    }

    public void invokeStep(int, int, CH.ifa.draw.framework.Drawing)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int dx, dy;
        CH.ifa.draw.framework.Drawing drawing;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        dx := @parameter0: int;
        dy := @parameter1: int;
        drawing := @parameter2: CH.ifa.draw.framework.Drawing;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeStep(int,int,CH.ifa.draw.framework.Drawing)>(dx, dy, drawing);
        return;
    }

    public void invokeStep(int, int, int, int, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int x, y, anchorX, anchorY;
        CH.ifa.draw.framework.DrawingView view;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        x := @parameter0: int;
        y := @parameter1: int;
        anchorX := @parameter2: int;
        anchorY := @parameter3: int;
        view := @parameter4: CH.ifa.draw.framework.DrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeStep(int,int,int,int,CH.ifa.draw.framework.DrawingView)>(x, y, anchorX, anchorY, view);
        return;
    }

    public void invokeEnd(int, int, int, int, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int x, y, anchorX, anchorY;
        CH.ifa.draw.framework.DrawingView view, temp$4, temp$7;
        CH.ifa.draw.framework.Handle temp$0, temp$1;
        CH.ifa.draw.util.Undoable undoableActivity, temp$2;
        boolean temp$3;
        CH.ifa.draw.framework.DrawingEditor temp$5, temp$8;
        CH.ifa.draw.util.UndoManager temp$6, temp$9;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        x := @parameter0: int;
        y := @parameter1: int;
        anchorX := @parameter2: int;
        anchorY := @parameter3: int;
        view := @parameter4: CH.ifa.draw.framework.DrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeEnd(int,int,int,int,CH.ifa.draw.framework.DrawingView)>(x, y, anchorX, anchorY, view);
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        temp$2 = interfaceinvoke temp$1.<CH.ifa.draw.framework.Handle: CH.ifa.draw.util.Undoable getUndoActivity()>();
        undoableActivity = temp$2;
        if undoableActivity != null goto label0;

        goto label2;

     label0:
        nop;
        temp$3 = interfaceinvoke undoableActivity.<CH.ifa.draw.util.Undoable: boolean isUndoable()>();
        if temp$3 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.DrawingView getDrawingView()>();
        temp$5 = interfaceinvoke temp$4.<CH.ifa.draw.framework.DrawingView: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$6 = interfaceinvoke temp$5.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$6.<CH.ifa.draw.util.UndoManager: void pushUndo(CH.ifa.draw.util.Undoable)>(undoableActivity);
        temp$7 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.DrawingView getDrawingView()>();
        temp$8 = interfaceinvoke temp$7.<CH.ifa.draw.framework.DrawingView: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$9 = interfaceinvoke temp$8.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$9.<CH.ifa.draw.util.UndoManager: void clearRedos()>();

     label2:
        nop;
        return;
    }

    public void invokeEnd(int, int, CH.ifa.draw.framework.Drawing)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int dx, dy;
        CH.ifa.draw.framework.Drawing drawing;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        dx := @parameter0: int;
        dy := @parameter1: int;
        drawing := @parameter2: CH.ifa.draw.framework.Drawing;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void invokeEnd(int,int,CH.ifa.draw.framework.Drawing)>(dx, dy, drawing);
        return;
    }

    public CH.ifa.draw.framework.Figure owner()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle temp$0;
        CH.ifa.draw.framework.Figure temp$1;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: CH.ifa.draw.framework.Figure owner()>();
        return temp$1;
    }

    public java.awt.Rectangle displayBox()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle temp$0;
        java.awt.Rectangle temp$1;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: java.awt.Rectangle displayBox()>();
        return temp$1;
    }

    public boolean containsPoint(int, int)
    {
        CH.ifa.draw.util.UndoableHandle this;
        int x, y;
        CH.ifa.draw.framework.Handle temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: boolean containsPoint(int,int)>(x, y);
        return temp$1;
    }

    public void draw(java.awt.Graphics)
    {
        CH.ifa.draw.util.UndoableHandle this;
        java.awt.Graphics g;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle getWrappedHandle()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Handle: void draw(java.awt.Graphics)>(g);
        return;
    }

    protected void setWrappedHandle(CH.ifa.draw.framework.Handle)
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle newWrappedHandle;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        newWrappedHandle := @parameter0: CH.ifa.draw.framework.Handle;
        this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle myWrappedHandle> = newWrappedHandle;
        return;
    }

    protected CH.ifa.draw.framework.Handle getWrappedHandle()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.Handle temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.Handle myWrappedHandle>;
        return temp$0;
    }

    public CH.ifa.draw.framework.DrawingView getDrawingView()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.DrawingView temp$0;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.DrawingView myDrawingView>;
        return temp$0;
    }

    protected void setDrawingView(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.framework.DrawingView newDrawingView;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        newDrawingView := @parameter0: CH.ifa.draw.framework.DrawingView;
        this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.DrawingView myDrawingView> = newDrawingView;
        return;
    }

    public CH.ifa.draw.util.Undoable getUndoActivity()
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.util.UndoableAdapter temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        temp$0 = new CH.ifa.draw.util.UndoableAdapter;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableHandle: CH.ifa.draw.framework.DrawingView getDrawingView()>();
        specialinvoke temp$0.<CH.ifa.draw.util.UndoableAdapter: void <init>(CH.ifa.draw.framework.DrawingView)>(temp$1);
        return temp$0;
    }

    public void setUndoActivity(CH.ifa.draw.util.Undoable)
    {
        CH.ifa.draw.util.UndoableHandle this;
        CH.ifa.draw.util.Undoable newUndoableActivity;

        this := @this: CH.ifa.draw.util.UndoableHandle;
        newUndoableActivity := @parameter0: CH.ifa.draw.util.Undoable;
        return;
    }
}
