public abstract class CH.ifa.draw.standard.DecoratorFigure extends CH.ifa.draw.standard.AbstractFigure implements CH.ifa.draw.framework.FigureChangeListener
{
    private CH.ifa.draw.framework.Figure fComponent;
    private static final long serialVersionUID;
    private int decoratorFigureSerializedDataVersion;

    static void <clinit>()
    {
        long temp$0;

        temp$0 = 8993011151564573288L;
        <CH.ifa.draw.standard.DecoratorFigure: long serialVersionUID> = temp$0;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.standard.DecoratorFigure: int decoratorFigureSerializedDataVersion> = temp$0;
        virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: void initialize()>();
        return;
    }

    public void <init>(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure figure;
        int temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.standard.DecoratorFigure: int decoratorFigureSerializedDataVersion> = temp$0;
        virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: void initialize()>();
        virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: void decorate(CH.ifa.draw.framework.Figure)>(figure);
        return;
    }

    protected void initialize()
    {
        CH.ifa.draw.standard.DecoratorFigure this;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        return;
    }

    public java.awt.Insets connectionInsets()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        java.awt.Insets temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: java.awt.Insets connectionInsets()>();
        return temp$1;
    }

    public boolean canConnect()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: boolean canConnect()>();
        return temp$1;
    }

    public boolean containsPoint(int, int)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int x, y;
        CH.ifa.draw.framework.Figure temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: boolean containsPoint(int,int)>(x, y);
        return temp$1;
    }

    public void decorate(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure figure, temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure fComponent> = figure;
        temp$0 = this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure fComponent>;
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void addToContainer(CH.ifa.draw.framework.FigureChangeListener)>(this);
        return;
    }

    public CH.ifa.draw.framework.Figure peelDecoration()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void removeFromContainer(CH.ifa.draw.framework.FigureChangeListener)>(this);
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.Figure getDecoratedFigure()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure fComponent>;
        return temp$0;
    }

    public java.awt.Rectangle displayBox()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        java.awt.Rectangle temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: java.awt.Rectangle displayBox()>();
        return temp$1;
    }

    public void basicDisplayBox(java.awt.Point, java.awt.Point)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        java.awt.Point origin, corner;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        origin := @parameter0: java.awt.Point;
        corner := @parameter1: java.awt.Point;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void basicDisplayBox(java.awt.Point,java.awt.Point)>(origin, corner);
        return;
    }

    public void draw(java.awt.Graphics)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        java.awt.Graphics g;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void draw(java.awt.Graphics)>(g);
        return;
    }

    public CH.ifa.draw.framework.Figure findFigureInside(int, int)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int x, y;
        CH.ifa.draw.framework.Figure temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Figure findFigureInside(int,int)>(x, y);
        return temp$1;
    }

    public java.util.Vector handles()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        java.util.Vector temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: java.util.Vector handles()>();
        return temp$1;
    }

    public boolean includes(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure figure, temp$1;
        boolean temp$0, temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: boolean includes(CH.ifa.draw.framework.Figure)>(figure);
        if temp$0 == 0 goto label0;

        goto label2;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$2 = interfaceinvoke temp$1.<CH.ifa.draw.framework.Figure: boolean includes(CH.ifa.draw.framework.Figure)>(figure);
        if temp$2 == 0 goto label1;

        goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = 0;
        goto label3;

     label2:
        nop;
        temp$3 = 1;

     label3:
        nop;
        return temp$3;
    }

    public void moveBy(int, int)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int x, y;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void moveBy(int,int)>(x, y);
        return;
    }

    protected void basicMoveBy(int, int)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int x, y;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        return;
    }

    public void release()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void release()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void removeFromContainer(CH.ifa.draw.framework.FigureChangeListener)>(this);
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.Figure: void release()>();
        return;
    }

    public void figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)>(e);

     label1:
        nop;
        return;
    }

    public void figureChanged(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        return;
    }

    public void figureRemoved(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        return;
    }

    public void figureRequestUpdate(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureRequestUpdate(CH.ifa.draw.framework.FigureChangeEvent)>(e);

     label1:
        nop;
        return;
    }

    public void figureRequestRemove(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e, temp$2;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        temp$2 = new CH.ifa.draw.framework.FigureChangeEvent;
        specialinvoke temp$2.<CH.ifa.draw.framework.FigureChangeEvent: void <init>(CH.ifa.draw.framework.Figure)>(this);
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureRequestRemove(CH.ifa.draw.framework.FigureChangeEvent)>(temp$2);

     label1:
        nop;
        return;
    }

    public CH.ifa.draw.framework.FigureEnumeration figures()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        CH.ifa.draw.framework.FigureEnumeration temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.FigureEnumeration figures()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.FigureEnumeration decompose()
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure temp$0;
        CH.ifa.draw.framework.FigureEnumeration temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.FigureEnumeration decompose()>();
        return temp$1;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        java.lang.String name;
        java.lang.Object value;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.Object;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void setAttribute(java.lang.String,java.lang.Object)>(name, value);
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        java.lang.String name;
        CH.ifa.draw.framework.Figure temp$0;
        java.lang.Object temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        name := @parameter0: java.lang.String;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: java.lang.Object getAttribute(java.lang.String)>(name);
        return temp$1;
    }

    public CH.ifa.draw.framework.Locator connectedTextLocator(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.framework.Figure text, temp$0;
        CH.ifa.draw.framework.Locator temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        text := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Locator connectedTextLocator(CH.ifa.draw.framework.Figure)>(text);
        return temp$1;
    }

    public CH.ifa.draw.framework.Connector connectorAt(int, int)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        int x, y;
        CH.ifa.draw.framework.Figure temp$0;
        CH.ifa.draw.framework.Connector temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Connector connectorAt(int,int)>(x, y);
        return temp$1;
    }

    public void connectorVisibility(boolean)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        boolean isVisible;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        isVisible := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void connectorVisibility(boolean)>(isVisible);
        return;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.util.StorableOutput dw;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void write(CH.ifa.draw.util.StorableOutput)>(dw);
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$0);
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        CH.ifa.draw.util.StorableInput dr;
        CH.ifa.draw.util.Storable temp$0;
        CH.ifa.draw.framework.Figure temp$1;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void read(CH.ifa.draw.util.StorableInput)>(dr);
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$1 = (CH.ifa.draw.framework.Figure) temp$0;
        virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: void decorate(CH.ifa.draw.framework.Figure)>(temp$1);
        return;
    }

    private final void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        CH.ifa.draw.standard.DecoratorFigure this;
        java.io.ObjectInputStream s;
        CH.ifa.draw.framework.Figure temp$0;

        this := @this: CH.ifa.draw.standard.DecoratorFigure;
        s := @parameter0: java.io.ObjectInputStream;
        virtualinvoke s.<java.io.ObjectInputStream: void defaultReadObject()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.DecoratorFigure: CH.ifa.draw.framework.Figure getDecoratedFigure()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Figure: void addToContainer(CH.ifa.draw.framework.FigureChangeListener)>(this);
        return;
    }
}
