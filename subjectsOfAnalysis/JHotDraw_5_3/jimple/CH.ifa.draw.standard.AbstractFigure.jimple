public abstract class CH.ifa.draw.standard.AbstractFigure extends java.lang.Object implements CH.ifa.draw.framework.Figure
{
    private CH.ifa.draw.framework.FigureChangeListener fListener;
    private static final long serialVersionUID;
    private int abstractFigureSerializedDataVersion;
    private int _nZ;

    static void <clinit>()
    {
        long temp$0;

        temp$0 = -10857585979273442L;
        <CH.ifa.draw.standard.AbstractFigure: long serialVersionUID> = temp$0;
        return;
    }

    protected void <init>()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.standard.AbstractFigure: int abstractFigureSerializedDataVersion> = temp$0;
        return;
    }

    public void moveBy(int, int)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int dx, dy;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        dx := @parameter0: int;
        dy := @parameter1: int;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void willChange()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void basicMoveBy(int,int)>(dx, dy);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void changed()>();
        return;
    }

    protected abstract void basicMoveBy(int, int);

    public void displayBox(java.awt.Point, java.awt.Point)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Point origin, corner;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        origin := @parameter0: java.awt.Point;
        corner := @parameter1: java.awt.Point;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void willChange()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void basicDisplayBox(java.awt.Point,java.awt.Point)>(origin, corner);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void changed()>();
        return;
    }

    public abstract void basicDisplayBox(java.awt.Point, java.awt.Point);

    public abstract java.awt.Rectangle displayBox();

    public abstract java.util.Vector handles();

    public CH.ifa.draw.framework.FigureEnumeration figures()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.util.Vector figures, temp$0;
        CH.ifa.draw.standard.FigureEnumerator temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(1);
        figures = temp$0;
        virtualinvoke figures.<java.util.Vector: void addElement(java.lang.Object)>(this);
        temp$1 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$1.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(figures);
        return temp$1;
    }

    public java.awt.Dimension size()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Dimension temp$0;
        java.awt.Rectangle temp$1, temp$3;
        int temp$2, temp$4;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = new java.awt.Dimension;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Rectangle displayBox()>();
        temp$2 = temp$1.<java.awt.Rectangle: int width>;
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Rectangle displayBox()>();
        temp$4 = temp$3.<java.awt.Rectangle: int height>;
        specialinvoke temp$0.<java.awt.Dimension: void <init>(int,int)>(temp$2, temp$4);
        return temp$0;
    }

    public boolean isEmpty()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Dimension temp$0, temp$2;
        int temp$1, temp$3;
        boolean temp$4;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Dimension size()>();
        temp$1 = temp$0.<java.awt.Dimension: int width>;
        if temp$1 < 3 goto label2;

        goto label0;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Dimension size()>();
        temp$3 = temp$2.<java.awt.Dimension: int height>;
        if temp$3 < 3 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$4 = 0;
        goto label3;

     label2:
        nop;
        temp$4 = 1;

     label3:
        nop;
        return temp$4;
    }

    public CH.ifa.draw.framework.Figure findFigureInside(int, int)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int x, y;
        boolean temp$0;
        CH.ifa.draw.framework.Figure temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: boolean containsPoint(int,int)>(x, y);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        return this;

     label1:
        nop;
        temp$1 = null;
        return temp$1;
    }

    public boolean containsPoint(int, int)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int x, y;
        java.awt.Rectangle temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Rectangle displayBox()>();
        temp$1 = virtualinvoke temp$0.<java.awt.Rectangle: boolean contains(int,int)>(x, y);
        return temp$1;
    }

    public void displayBox(java.awt.Rectangle)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Rectangle r;
        java.awt.Point temp$0, temp$3;
        int temp$1, temp$2, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        r := @parameter0: java.awt.Rectangle;
        temp$0 = new java.awt.Point;
        temp$1 = r.<java.awt.Rectangle: int x>;
        temp$2 = r.<java.awt.Rectangle: int y>;
        specialinvoke temp$0.<java.awt.Point: void <init>(int,int)>(temp$1, temp$2);
        temp$3 = new java.awt.Point;
        temp$4 = r.<java.awt.Rectangle: int x>;
        temp$5 = r.<java.awt.Rectangle: int width>;
        temp$6 = temp$4 + temp$5;
        temp$7 = r.<java.awt.Rectangle: int y>;
        temp$8 = r.<java.awt.Rectangle: int height>;
        temp$9 = temp$7 + temp$8;
        specialinvoke temp$3.<java.awt.Point: void <init>(int,int)>(temp$6, temp$9);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void displayBox(java.awt.Point,java.awt.Point)>(temp$0, temp$3);
        return;
    }

    public boolean includes(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.Figure figure;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        if figure == this goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = 0;
        goto label2;

     label1:
        nop;
        temp$0 = 1;

     label2:
        nop;
        return temp$0;
    }

    public CH.ifa.draw.framework.FigureEnumeration decompose()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.util.Vector figures, temp$0;
        CH.ifa.draw.standard.FigureEnumerator temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(1);
        figures = temp$0;
        virtualinvoke figures.<java.util.Vector: void addElement(java.lang.Object)>(this);
        temp$1 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$1.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(figures);
        return temp$1;
    }

    public void addToContainer(CH.ifa.draw.framework.FigureChangeListener)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener c;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        c := @parameter0: CH.ifa.draw.framework.FigureChangeListener;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void addFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(c);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void invalidate()>();
        return;
    }

    public void removeFromContainer(CH.ifa.draw.framework.FigureChangeListener)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener c;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        c := @parameter0: CH.ifa.draw.framework.FigureChangeListener;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void invalidate()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void removeFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(c);
        return;
    }

    public void addFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener l, temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        l := @parameter0: CH.ifa.draw.framework.FigureChangeListener;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        temp$1 = staticinvoke <CH.ifa.draw.standard.FigureChangeEventMulticaster: CH.ifa.draw.framework.FigureChangeListener add(CH.ifa.draw.framework.FigureChangeListener,CH.ifa.draw.framework.FigureChangeListener)>(temp$0, l);
        this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener> = temp$1;
        return;
    }

    public void removeFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener l, temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        l := @parameter0: CH.ifa.draw.framework.FigureChangeListener;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        temp$1 = staticinvoke <CH.ifa.draw.standard.FigureChangeEventMulticaster: CH.ifa.draw.framework.FigureChangeListener remove(CH.ifa.draw.framework.FigureChangeListener,CH.ifa.draw.framework.FigureChangeListener)>(temp$0, l);
        this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener> = temp$1;
        return;
    }

    public CH.ifa.draw.framework.FigureChangeListener listener()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        return temp$0;
    }

    public void release()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;
        CH.ifa.draw.framework.FigureChangeEvent temp$2;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        temp$2 = new CH.ifa.draw.framework.FigureChangeEvent;
        specialinvoke temp$2.<CH.ifa.draw.framework.FigureChangeEvent: void <init>(CH.ifa.draw.framework.Figure)>(this);
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureRemoved(CH.ifa.draw.framework.FigureChangeEvent)>(temp$2);

     label1:
        nop;
        return;
    }

    public void invalidate()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$2;
        java.awt.Rectangle r, temp$1;
        CH.ifa.draw.framework.FigureChangeEvent temp$3;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Rectangle displayBox()>();
        r = temp$1;
        virtualinvoke r.<java.awt.Rectangle: void grow(int,int)>(8, 8);
        temp$2 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        temp$3 = new CH.ifa.draw.framework.FigureChangeEvent;
        specialinvoke temp$3.<CH.ifa.draw.framework.FigureChangeEvent: void <init>(CH.ifa.draw.framework.Figure,java.awt.Rectangle)>(this, r);
        interfaceinvoke temp$2.<CH.ifa.draw.framework.FigureChangeListener: void figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)>(temp$3);

     label1:
        nop;
        return;
    }

    public void willChange()
    {
        CH.ifa.draw.standard.AbstractFigure this;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void invalidate()>();
        return;
    }

    public void changed()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;
        CH.ifa.draw.framework.FigureChangeEvent temp$2;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: void invalidate()>();
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.AbstractFigure: CH.ifa.draw.framework.FigureChangeListener fListener>;
        temp$2 = new CH.ifa.draw.framework.FigureChangeEvent;
        specialinvoke temp$2.<CH.ifa.draw.framework.FigureChangeEvent: void <init>(CH.ifa.draw.framework.Figure)>(this);
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureChanged(CH.ifa.draw.framework.FigureChangeEvent)>(temp$2);

     label1:
        nop;
        return;
    }

    public java.awt.Point center()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Rectangle temp$0;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.awt.Rectangle displayBox()>();
        temp$1 = staticinvoke <CH.ifa.draw.util.Geom: java.awt.Point center(java.awt.Rectangle)>(temp$0);
        return temp$1;
    }

    public boolean canConnect()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = 1;
        return temp$0;
    }

    public java.awt.Insets connectionInsets()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.awt.Insets temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = new java.awt.Insets;
        specialinvoke temp$0.<java.awt.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0);
        return temp$0;
    }

    public CH.ifa.draw.framework.Connector connectorAt(int, int)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int x, y;
        CH.ifa.draw.standard.ChopBoxConnector temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = new CH.ifa.draw.standard.ChopBoxConnector;
        specialinvoke temp$0.<CH.ifa.draw.standard.ChopBoxConnector: void <init>(CH.ifa.draw.framework.Figure)>(this);
        return temp$0;
    }

    public void connectorVisibility(boolean)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        boolean isVisible;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        isVisible := @parameter0: boolean;
        return;
    }

    public CH.ifa.draw.framework.Locator connectedTextLocator(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.framework.Figure text;
        CH.ifa.draw.framework.Locator temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        text := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = staticinvoke <CH.ifa.draw.standard.RelativeLocator: CH.ifa.draw.framework.Locator center()>();
        return temp$0;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.lang.String name;
        java.lang.Object temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        name := @parameter0: java.lang.String;
        temp$0 = null;
        return temp$0;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.lang.String name;
        java.lang.Object value;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.Object;
        return;
    }

    public java.lang.Object clone()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        java.lang.Object clone, temp$8;
        java.io.ByteArrayOutputStream output, temp$0;
        java.io.ObjectOutput writer;
        java.io.ObjectOutputStream temp$1;
        java.io.IOException e, e;
        java.io.PrintStream temp$2, temp$9, temp$11;
        java.lang.StringBuffer temp$3, temp$12;
        java.lang.String temp$4, temp$10, temp$13;
        java.io.InputStream input;
        java.io.ByteArrayInputStream temp$5;
        byte[] temp$6;
        java.io.ObjectInput reader;
        java.io.ObjectInputStream temp$7;
        java.lang.ClassNotFoundException e;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        clone = null;
        temp$0 = new java.io.ByteArrayOutputStream;
        specialinvoke temp$0.<java.io.ByteArrayOutputStream: void <init>(int)>(200);
        output = temp$0;

     label0:
        nop;
        temp$1 = new java.io.ObjectOutputStream;
        specialinvoke temp$1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(output);
        writer = temp$1;
        interfaceinvoke writer.<java.io.ObjectOutput: void writeObject(java.lang.Object)>(this);
        interfaceinvoke writer.<java.io.ObjectOutput: void close()>();
        goto label2;

     label1:
        nop;
        e := @caughtexception;
        temp$2 = <java.lang.System: java.io.PrintStream err>;
        temp$3 = new java.lang.StringBuffer;
        specialinvoke temp$3.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Class not found: ");
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(e);
        temp$4 = virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$2.<java.io.PrintStream: void println(java.lang.String)>(temp$4);
        nop;
        goto label2;

     label2:
        nop;
        temp$5 = new java.io.ByteArrayInputStream;
        temp$6 = virtualinvoke output.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke temp$5.<java.io.ByteArrayInputStream: void <init>(byte[])>(temp$6);
        input = temp$5;

     label3:
        nop;
        temp$7 = new java.io.ObjectInputStream;
        specialinvoke temp$7.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(input);
        reader = temp$7;
        temp$8 = interfaceinvoke reader.<java.io.ObjectInput: java.lang.Object readObject()>();
        clone = temp$8;
        goto label6;

     label4:
        nop;
        e := @caughtexception;
        temp$9 = <java.lang.System: java.io.PrintStream err>;
        temp$10 = virtualinvoke e.<java.io.IOException: java.lang.String toString()>();
        virtualinvoke temp$9.<java.io.PrintStream: void println(java.lang.String)>(temp$10);
        nop;
        goto label6;

     label5:
        nop;
        e := @caughtexception;
        temp$11 = <java.lang.System: java.io.PrintStream err>;
        temp$12 = new java.lang.StringBuffer;
        specialinvoke temp$12.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Class not found: ");
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(e);
        temp$13 = virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$11.<java.io.PrintStream: void println(java.lang.String)>(temp$13);
        nop;
        goto label6;

     label6:
        nop;
        return clone;

        catch java.io.IOException from label0 to label1 with label1;
        catch java.io.IOException from label3 to label4 with label4;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.util.StorableOutput dw;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.standard.AbstractFigure this;
        CH.ifa.draw.util.StorableInput dr;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        return;
    }

    public int getZValue()
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int temp$0;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        temp$0 = this.<CH.ifa.draw.standard.AbstractFigure: int _nZ>;
        return temp$0;
    }

    public void setZValue(int)
    {
        CH.ifa.draw.standard.AbstractFigure this;
        int z;

        this := @this: CH.ifa.draw.standard.AbstractFigure;
        z := @parameter0: int;
        this.<CH.ifa.draw.standard.AbstractFigure: int _nZ> = z;
        return;
    }
}
