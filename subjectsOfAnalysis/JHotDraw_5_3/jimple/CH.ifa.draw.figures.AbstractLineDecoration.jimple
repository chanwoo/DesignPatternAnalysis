public abstract class CH.ifa.draw.figures.AbstractLineDecoration extends java.lang.Object implements CH.ifa.draw.figures.LineDecoration
{
    static final long serialVersionUID;
    private java.awt.Color fFillColor;
    private java.awt.Color fBorderColor;

    static void <clinit>()
    {
        long temp$0;

        temp$0 = 1577970039258356627L;
        <CH.ifa.draw.figures.AbstractLineDecoration: long serialVersionUID> = temp$0;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void draw(java.awt.Graphics, int, int, int, int)
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        java.awt.Graphics g;
        int x1, y1, x2, y2, temp$4, temp$9, temp$16;
        java.awt.Polygon p, temp$0;
        java.awt.Color temp$1, drawColor, temp$5, temp$6, temp$10, temp$11, drawColor, temp$12, temp$13;
        int[] temp$2, temp$3, temp$7, temp$8, temp$14, temp$15;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        g := @parameter0: java.awt.Graphics;
        x1 := @parameter1: int;
        y1 := @parameter2: int;
        x2 := @parameter3: int;
        y2 := @parameter4: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Polygon outline(int,int,int,int)>(x1, y1, x2, y2);
        p = temp$0;
        temp$1 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getFillColor()>();
        if temp$1 == null goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = p.<java.awt.Polygon: int[] xpoints>;
        temp$3 = p.<java.awt.Polygon: int[] ypoints>;
        temp$4 = p.<java.awt.Polygon: int npoints>;
        virtualinvoke g.<java.awt.Graphics: void fillPolygon(int[],int[],int)>(temp$2, temp$3, temp$4);
        goto label2;

     label1:
        nop;
        temp$5 = virtualinvoke g.<java.awt.Graphics: java.awt.Color getColor()>();
        drawColor = temp$5;
        temp$6 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getFillColor()>();
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$6);
        temp$7 = p.<java.awt.Polygon: int[] xpoints>;
        temp$8 = p.<java.awt.Polygon: int[] ypoints>;
        temp$9 = p.<java.awt.Polygon: int npoints>;
        virtualinvoke g.<java.awt.Graphics: void fillPolygon(int[],int[],int)>(temp$7, temp$8, temp$9);
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(drawColor);

     label2:
        nop;
        temp$10 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getBorderColor()>();
        temp$11 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getFillColor()>();
        if temp$10 != temp$11 goto label3;

        goto label4;

     label3:
        nop;
        temp$12 = virtualinvoke g.<java.awt.Graphics: java.awt.Color getColor()>();
        drawColor = temp$12;
        temp$13 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getBorderColor()>();
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$13);
        temp$14 = p.<java.awt.Polygon: int[] xpoints>;
        temp$15 = p.<java.awt.Polygon: int[] ypoints>;
        temp$16 = p.<java.awt.Polygon: int npoints>;
        virtualinvoke g.<java.awt.Graphics: void drawPolygon(int[],int[],int)>(temp$14, temp$15, temp$16);
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(drawColor);

     label4:
        nop;
        return;
    }

    public abstract java.awt.Polygon outline(int, int, int, int);

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        CH.ifa.draw.util.StorableOutput dw;
        java.awt.Color temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getFillColor()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getFillColor()>();
        staticinvoke <CH.ifa.draw.figures.FigureAttributes: void writeColor(CH.ifa.draw.util.StorableOutput,java.lang.String,java.awt.Color)>(dw, "FillColor", temp$1);
        goto label2;

     label1:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("noFillColor");

     label2:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getBorderColor()>();
        if temp$2 != null goto label3;

        goto label4;

     label3:
        nop;
        temp$3 = virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color getBorderColor()>();
        staticinvoke <CH.ifa.draw.figures.FigureAttributes: void writeColor(CH.ifa.draw.util.StorableOutput,java.lang.String,java.awt.Color)>(dw, "BorderColor", temp$3);
        goto label5;

     label4:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("noBorderColor");

     label5:
        nop;
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        CH.ifa.draw.util.StorableInput dr;
        java.lang.String fillColorId, temp$0, borderColorId, temp$3;
        boolean temp$1, temp$4;
        java.awt.Color temp$2, temp$5;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        fillColorId = temp$0;
        temp$1 = virtualinvoke fillColorId.<java.lang.String: boolean equals(java.lang.Object)>("FillColor");
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = staticinvoke <CH.ifa.draw.figures.FigureAttributes: java.awt.Color readColor(CH.ifa.draw.util.StorableInput)>(dr);
        virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: void setFillColor(java.awt.Color)>(temp$2);

     label1:
        nop;
        temp$3 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        borderColorId = temp$3;
        temp$4 = virtualinvoke borderColorId.<java.lang.String: boolean equals(java.lang.Object)>("BorderColor");
        if temp$4 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$5 = staticinvoke <CH.ifa.draw.figures.FigureAttributes: java.awt.Color readColor(CH.ifa.draw.util.StorableInput)>(dr);
        virtualinvoke this.<CH.ifa.draw.figures.AbstractLineDecoration: void setBorderColor(java.awt.Color)>(temp$5);

     label3:
        nop;
        return;
    }

    public void setFillColor(java.awt.Color)
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        java.awt.Color fillColor;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        fillColor := @parameter0: java.awt.Color;
        this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color fFillColor> = fillColor;
        return;
    }

    public java.awt.Color getFillColor()
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        java.awt.Color temp$0;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        temp$0 = this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color fFillColor>;
        return temp$0;
    }

    public void setBorderColor(java.awt.Color)
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        java.awt.Color borderColor;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        borderColor := @parameter0: java.awt.Color;
        this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color fBorderColor> = borderColor;
        return;
    }

    public java.awt.Color getBorderColor()
    {
        CH.ifa.draw.figures.AbstractLineDecoration this;
        java.awt.Color temp$0;

        this := @this: CH.ifa.draw.figures.AbstractLineDecoration;
        temp$0 = this.<CH.ifa.draw.figures.AbstractLineDecoration: java.awt.Color fBorderColor>;
        return temp$0;
    }
}
