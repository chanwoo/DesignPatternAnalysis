public class CH.ifa.draw.util.VersionManagement extends java.lang.Object
{
    public static java.lang.String JHOTDRAW_COMPONENT;
    public static java.lang.String JHOTDRAW_JAR;
    public static java.lang.Package[] packages;

    static void <clinit>()
    {
        java.lang.String temp$0, temp$1;
        java.lang.Package[] temp$2;
        java.lang.Package temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9;

        temp$0 = "CH.ifa.draw/";
        <CH.ifa.draw.util.VersionManagement: java.lang.String JHOTDRAW_COMPONENT> = temp$0;
        temp$1 = "jhotdraw.jar";
        <CH.ifa.draw.util.VersionManagement: java.lang.String JHOTDRAW_JAR> = temp$1;
        temp$2 = newarray (java.lang.Package)[7];
        temp$3 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.applet");
        temp$2[0] = temp$3;
        temp$4 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.application");
        temp$2[1] = temp$4;
        temp$5 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.contrib");
        temp$2[2] = temp$5;
        temp$6 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.figures");
        temp$2[3] = temp$6;
        temp$7 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.framework");
        temp$2[4] = temp$7;
        temp$8 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.standard");
        temp$2[5] = temp$8;
        temp$9 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>("CH.ifa.draw.util");
        temp$2[6] = temp$9;
        <CH.ifa.draw.util.VersionManagement: java.lang.Package[] packages> = temp$2;
        return;
    }

    public static java.lang.String getJHotDrawVersion()
    {
        java.lang.Package pack;
        java.lang.Package[] temp$0;
        int temp$1;
        java.lang.String temp$2;

        temp$0 = <CH.ifa.draw.util.VersionManagement: java.lang.Package[] packages>;
        temp$1 = 4;
        pack = temp$0[temp$1];
        temp$2 = virtualinvoke pack.<java.lang.Package: java.lang.String getSpecificationVersion()>();
        return temp$2;
    }

    public static java.lang.String getPackageVersion(java.lang.Package)
    {
        java.lang.Package lookupPackage, temp$5;
        java.lang.String temp$0, specVersion, temp$1, normalizedPackageName, temp$2, temp$3, nextPackageName, temp$4, temp$6;

        lookupPackage := @parameter0: java.lang.Package;
        if lookupPackage == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = virtualinvoke lookupPackage.<java.lang.Package: java.lang.String getSpecificationVersion()>();
        specVersion = temp$1;
        if specVersion != null goto label2;

        goto label3;

     label2:
        nop;
        return specVersion;

     label3:
        nop;
        temp$2 = virtualinvoke lookupPackage.<java.lang.Package: java.lang.String getName()>();
        temp$3 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String normalizePackageName(java.lang.String)>(temp$2);
        normalizedPackageName = temp$3;
        temp$4 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String getNextPackage(java.lang.String)>(normalizedPackageName);
        nextPackageName = temp$4;
        temp$5 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>(nextPackageName);
        temp$6 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String getPackageVersion(java.lang.Package)>(temp$5);
        return temp$6;
    }

    public static boolean isCompatibleVersion(java.lang.String)
    {
        java.lang.String compareVersionString, temp$2;
        java.lang.Package pack;
        java.lang.Package[] temp$0;
        int temp$1;
        boolean temp$3, temp$4;

        compareVersionString := @parameter0: java.lang.String;
        temp$0 = <CH.ifa.draw.util.VersionManagement: java.lang.Package[] packages>;
        temp$1 = 4;
        pack = temp$0[temp$1];
        if compareVersionString == null goto label0;

        goto label4;

     label0:
        nop;
        temp$2 = virtualinvoke pack.<java.lang.Package: java.lang.String getSpecificationVersion()>();
        if temp$2 == null goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = 0;
        goto label3;

     label2:
        nop;
        temp$3 = 1;

     label3:
        nop;
        return temp$3;

     label4:
        nop;
        temp$4 = virtualinvoke pack.<java.lang.Package: boolean isCompatibleWith(java.lang.String)>(compareVersionString);
        return temp$4;
    }

    public static java.lang.String readVersionFromFile(java.lang.String, java.lang.String)
    {
        java.lang.String applicationName, versionFileName, packageName, temp$8, temp$9, packageSpecVersion, temp$12, temp$13, temp$14;
        java.io.FileInputStream fileInput, temp$0;
        java.util.jar.Manifest manifest, temp$1;
        java.util.Map entries, temp$2;
        java.util.Iterator entryIterator, temp$4;
        java.util.Set temp$3;
        boolean temp$5;
        java.util.Map$Entry currentEntry;
        java.lang.Object temp$6, temp$7, temp$10;
        java.util.jar.Attributes attributes;
        java.util.jar.Attributes$Name temp$11;
        java.io.IOException exception;

        applicationName := @parameter0: java.lang.String;
        versionFileName := @parameter1: java.lang.String;

     label0:
        nop;
        temp$0 = new java.io.FileInputStream;
        specialinvoke temp$0.<java.io.FileInputStream: void <init>(java.lang.String)>(versionFileName);
        fileInput = temp$0;
        temp$1 = new java.util.jar.Manifest;
        specialinvoke temp$1.<java.util.jar.Manifest: void <init>()>();
        manifest = temp$1;
        virtualinvoke manifest.<java.util.jar.Manifest: void read(java.io.InputStream)>(fileInput);
        temp$2 = virtualinvoke manifest.<java.util.jar.Manifest: java.util.Map getEntries()>();
        entries = temp$2;
        temp$3 = interfaceinvoke entries.<java.util.Map: java.util.Set entrySet()>();
        temp$4 = interfaceinvoke temp$3.<java.util.Set: java.util.Iterator iterator()>();
        entryIterator = temp$4;
        nop;
        temp$5 = interfaceinvoke entryIterator.<java.util.Iterator: boolean hasNext()>();
        if temp$5 == 0 goto label3;

        goto label1;

     label1:
        nop;
        temp$6 = interfaceinvoke entryIterator.<java.util.Iterator: java.lang.Object next()>();
        currentEntry = (java.util.Map$Entry) temp$6;
        temp$7 = interfaceinvoke currentEntry.<java.util.Map$Entry: java.lang.Object getKey()>();
        temp$8 = virtualinvoke temp$7.<java.lang.Object: java.lang.String toString()>();
        packageName = temp$8;
        temp$9 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String normalizePackageName(java.lang.String)>(packageName);
        packageName = temp$9;
        temp$10 = interfaceinvoke currentEntry.<java.util.Map$Entry: java.lang.Object getValue()>();
        attributes = (java.util.jar.Attributes) temp$10;
        temp$11 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name SPECIFICATION_VERSION>;
        temp$12 = virtualinvoke attributes.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>(temp$11);
        packageSpecVersion = temp$12;
        temp$13 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String extractVersionInfo(java.lang.String)>(packageSpecVersion);
        packageSpecVersion = temp$13;

     label2:
        nop;
        return packageSpecVersion;

     label3:
        nop;
        goto label5;

     label4:
        nop;
        exception := @caughtexception;
        virtualinvoke exception.<java.io.IOException: void printStackTrace()>();
        nop;
        goto label5;

     label5:
        nop;
        temp$14 = null;
        return temp$14;

        catch java.io.IOException from label0 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
    }

    protected static java.lang.String getNextPackage(java.lang.String)
    {
        java.lang.String searchPackage, temp$0, temp$2, temp$3;
        int foundNextPackage, temp$1;

        searchPackage := @parameter0: java.lang.String;
        if searchPackage == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = virtualinvoke searchPackage.<java.lang.String: int lastIndexOf(int)>(46);
        foundNextPackage = temp$1;
        if foundNextPackage > 0 goto label2;

        goto label3;

     label2:
        nop;
        temp$2 = virtualinvoke searchPackage.<java.lang.String: java.lang.String substring(int,int)>(0, foundNextPackage);
        return temp$2;

     label3:
        nop;
        temp$3 = null;
        return temp$3;
    }

    public static java.lang.String normalizePackageName(java.lang.String)
    {
        java.lang.String toBeNormalized, replaced, temp$0, temp$2, temp$5;
        char temp$1;
        boolean temp$3;
        int lastSeparator, temp$4;

        toBeNormalized := @parameter0: java.lang.String;
        temp$0 = virtualinvoke toBeNormalized.<java.lang.String: java.lang.String replace(char,char)>(47, 46);
        replaced = temp$0;
        temp$1 = <java.io.File: char pathSeparatorChar>;
        temp$2 = virtualinvoke replaced.<java.lang.String: java.lang.String replace(char,char)>(temp$1, 46);
        replaced = temp$2;
        temp$3 = virtualinvoke replaced.<java.lang.String: boolean endsWith(java.lang.String)>(".");
        if temp$3 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$4 = virtualinvoke replaced.<java.lang.String: int lastIndexOf(int)>(46);
        lastSeparator = temp$4;
        temp$5 = virtualinvoke replaced.<java.lang.String: java.lang.String substring(int,int)>(0, lastSeparator);
        return temp$5;

     label1:
        nop;
        return replaced;
    }

    public static java.lang.String extractVersionInfo(java.lang.String)
    {
        java.lang.String versionString, temp$0, temp$2, temp$9;
        int temp$1, startIndex, temp$3, temp$4, temp$5, temp$6, endIndex, temp$7, temp$8;

        versionString := @parameter0: java.lang.String;
        if versionString == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = null;
        return temp$0;

     label1:
        nop;
        temp$1 = virtualinvoke versionString.<java.lang.String: int length()>();
        if temp$1 == 0 goto label2;

        goto label3;

     label2:
        nop;
        temp$2 = "";
        return temp$2;

     label3:
        nop;
        temp$3 = virtualinvoke versionString.<java.lang.String: int indexOf(java.lang.String)>("\"");
        startIndex = temp$3;
        if startIndex < 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$4 = 0;
        startIndex = temp$4;
        goto label6;

     label5:
        nop;
        temp$5 = startIndex;
        temp$6 = temp$5 + 1;
        startIndex = temp$6;

     label6:
        nop;
        temp$7 = virtualinvoke versionString.<java.lang.String: int lastIndexOf(java.lang.String)>("\"");
        endIndex = temp$7;
        if endIndex < 0 goto label7;

        goto label8;

     label7:
        nop;
        temp$8 = virtualinvoke versionString.<java.lang.String: int length()>();
        endIndex = temp$8;

     label8:
        nop;
        temp$9 = virtualinvoke versionString.<java.lang.String: java.lang.String substring(int,int)>(startIndex, endIndex);
        return temp$9;
    }

    public void <init>()
    {
        CH.ifa.draw.util.VersionManagement this;

        this := @this: CH.ifa.draw.util.VersionManagement;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
