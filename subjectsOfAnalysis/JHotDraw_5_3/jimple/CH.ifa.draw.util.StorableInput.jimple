public class CH.ifa.draw.util.StorableInput extends java.lang.Object
{
    private java.io.StreamTokenizer fTokenizer;
    private java.util.Vector fMap;

    public void <init>(java.io.InputStream)
    {
        CH.ifa.draw.util.StorableInput this;
        java.io.InputStream stream;
        java.io.Reader r;
        java.io.BufferedReader temp$0;
        java.io.InputStreamReader temp$1;
        java.io.StreamTokenizer temp$2, temp$3;
        java.util.Vector temp$4;

        this := @this: CH.ifa.draw.util.StorableInput;
        stream := @parameter0: java.io.InputStream;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = new java.io.BufferedReader;
        temp$1 = new java.io.InputStreamReader;
        specialinvoke temp$1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(stream);
        specialinvoke temp$0.<java.io.BufferedReader: void <init>(java.io.Reader)>(temp$1);
        r = temp$0;
        temp$2 = new java.io.StreamTokenizer;
        specialinvoke temp$2.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(r);
        this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer> = temp$2;
        temp$3 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        virtualinvoke temp$3.<java.io.StreamTokenizer: void wordChars(int,int)>(36, 36);
        temp$4 = new java.util.Vector;
        specialinvoke temp$4.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.util.StorableInput: java.util.Vector fMap> = temp$4;
        return;
    }

    public CH.ifa.draw.util.Storable readStorable() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        CH.ifa.draw.util.Storable storable, temp$2, temp$5, temp$7;
        java.lang.String s, temp$0;
        boolean temp$1, temp$3;
        int ref, temp$4;
        java.lang.Object temp$6;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        s = temp$0;
        temp$1 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("NULL");
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = null;
        return temp$2;

     label1:
        nop;
        temp$3 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("REF");
        if temp$3 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: int readInt()>();
        ref = temp$4;
        temp$5 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable retrieve(int)>(ref);
        return temp$5;

     label3:
        nop;
        temp$6 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: java.lang.Object makeInstance(java.lang.String)>(s);
        temp$7 = (CH.ifa.draw.util.Storable) temp$6;
        storable = temp$7;
        virtualinvoke this.<CH.ifa.draw.util.StorableInput: void map(CH.ifa.draw.util.Storable)>(storable);
        interfaceinvoke storable.<CH.ifa.draw.util.Storable: void read(CH.ifa.draw.util.StorableInput)>(this);
        return storable;
    }

    public java.lang.String readString() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        int token, temp$1, temp$6;
        java.io.StreamTokenizer temp$0, temp$2, temp$5;
        java.lang.String temp$3, msg, temp$7;
        java.lang.StringBuffer temp$4;
        java.io.IOException temp$8;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$1 = virtualinvoke temp$0.<java.io.StreamTokenizer: int nextToken()>();
        token = temp$1;
        if token == -3 goto label1;

        goto label0;

     label0:
        nop;
        if token == 34 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$3 = temp$2.<java.io.StreamTokenizer: java.lang.String sval>;
        return temp$3;

     label2:
        nop;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("String expected in line: ");
        temp$5 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$6 = virtualinvoke temp$5.<java.io.StreamTokenizer: int lineno()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$6);
        temp$7 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        msg = temp$7;
        temp$8 = new java.io.IOException;
        specialinvoke temp$8.<java.io.IOException: void <init>(java.lang.String)>(msg);
        throw temp$8;
    }

    public int readInt() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        int token, temp$1, temp$4, temp$7;
        java.io.StreamTokenizer temp$0, temp$2, temp$6;
        double temp$3;
        java.lang.String msg, temp$8;
        java.lang.StringBuffer temp$5;
        java.io.IOException exception, temp$9, temp$10;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$1 = virtualinvoke temp$0.<java.io.StreamTokenizer: int nextToken()>();
        token = temp$1;
        if token == -2 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$3 = temp$2.<java.io.StreamTokenizer: double nval>;
        temp$4 = (int) temp$3;
        return temp$4;

     label1:
        nop;
        temp$5 = new java.lang.StringBuffer;
        specialinvoke temp$5.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Integer expected in line: ");
        temp$6 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$7 = virtualinvoke temp$6.<java.io.StreamTokenizer: int lineno()>();
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$7);
        temp$8 = virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.String toString()>();
        msg = temp$8;
        temp$9 = new java.io.IOException;
        specialinvoke temp$9.<java.io.IOException: void <init>(java.lang.String)>(msg);
        exception = temp$9;
        virtualinvoke exception.<java.io.IOException: void printStackTrace()>();
        temp$10 = new java.io.IOException;
        specialinvoke temp$10.<java.io.IOException: void <init>(java.lang.String)>(msg);
        throw temp$10;
    }

    public java.awt.Color readColor() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        java.awt.Color temp$0;
        int temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = new java.awt.Color;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$3 = virtualinvoke this.<CH.ifa.draw.util.StorableInput: int readInt()>();
        specialinvoke temp$0.<java.awt.Color: void <init>(int,int,int)>(temp$1, temp$2, temp$3);
        return temp$0;
    }

    public double readDouble() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        int token, temp$1, temp$6;
        java.io.StreamTokenizer temp$0, temp$2, temp$5;
        double temp$3;
        java.lang.String msg, temp$7;
        java.lang.StringBuffer temp$4;
        java.io.IOException temp$8;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$1 = virtualinvoke temp$0.<java.io.StreamTokenizer: int nextToken()>();
        token = temp$1;
        if token == -2 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$3 = temp$2.<java.io.StreamTokenizer: double nval>;
        return temp$3;

     label1:
        nop;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Double expected in line: ");
        temp$5 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$6 = virtualinvoke temp$5.<java.io.StreamTokenizer: int lineno()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$6);
        temp$7 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        msg = temp$7;
        temp$8 = new java.io.IOException;
        specialinvoke temp$8.<java.io.IOException: void <init>(java.lang.String)>(msg);
        throw temp$8;
    }

    public boolean readBoolean() throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        int token, temp$1, temp$4, temp$8;
        java.io.StreamTokenizer temp$0, temp$2, temp$7;
        double temp$3;
        boolean temp$5;
        java.lang.String msg, temp$9;
        java.lang.StringBuffer temp$6;
        java.io.IOException temp$10;

        this := @this: CH.ifa.draw.util.StorableInput;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$1 = virtualinvoke temp$0.<java.io.StreamTokenizer: int nextToken()>();
        token = temp$1;
        if token == -2 goto label0;

        goto label4;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$3 = temp$2.<java.io.StreamTokenizer: double nval>;
        temp$4 = (int) temp$3;
        if temp$4 == 1 goto label2;

        goto label1;

     label1:
        nop;
        temp$5 = 0;
        goto label3;

     label2:
        nop;
        temp$5 = 1;

     label3:
        nop;
        return temp$5;

     label4:
        nop;
        temp$6 = new java.lang.StringBuffer;
        specialinvoke temp$6.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Integer expected in line: ");
        temp$7 = this.<CH.ifa.draw.util.StorableInput: java.io.StreamTokenizer fTokenizer>;
        temp$8 = virtualinvoke temp$7.<java.io.StreamTokenizer: int lineno()>();
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$8);
        temp$9 = virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.String toString()>();
        msg = temp$9;
        temp$10 = new java.io.IOException;
        specialinvoke temp$10.<java.io.IOException: void <init>(java.lang.String)>(msg);
        throw temp$10;
    }

    private final java.lang.Object makeInstance(java.lang.String) throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput this;
        java.lang.String className, temp$4, temp$7, temp$10, temp$13;
        java.lang.Class cl, temp$0;
        java.lang.Object temp$1;
        java.lang.NoSuchMethodError e;
        java.io.IOException temp$2, temp$5, temp$8, temp$11;
        java.lang.StringBuffer temp$3, temp$6, temp$9, temp$12;
        java.lang.ClassNotFoundException e;
        java.lang.InstantiationException e;
        java.lang.IllegalAccessException e;

        this := @this: CH.ifa.draw.util.StorableInput;
        className := @parameter0: java.lang.String;

     label0:
        nop;
        temp$0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(className);
        cl = temp$0;
        temp$1 = virtualinvoke cl.<java.lang.Class: java.lang.Object newInstance()>();

     label1:
        nop;
        return temp$1;

     label2:
        nop;
        e := @caughtexception;
        temp$2 = new java.io.IOException;
        temp$3 = new java.lang.StringBuffer;
        specialinvoke temp$3.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Class ");
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(className);
        virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" does not seem to have a no-arg constructor");
        temp$4 = virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$2.<java.io.IOException: void <init>(java.lang.String)>(temp$4);
        throw temp$2;

     label3:
        nop;
        e := @caughtexception;
        temp$5 = new java.io.IOException;
        temp$6 = new java.lang.StringBuffer;
        specialinvoke temp$6.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("No class: ");
        virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(className);
        temp$7 = virtualinvoke temp$6.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$5.<java.io.IOException: void <init>(java.lang.String)>(temp$7);
        throw temp$5;

     label4:
        nop;
        e := @caughtexception;
        temp$8 = new java.io.IOException;
        temp$9 = new java.lang.StringBuffer;
        specialinvoke temp$9.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Cannot instantiate: ");
        virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(className);
        temp$10 = virtualinvoke temp$9.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$8.<java.io.IOException: void <init>(java.lang.String)>(temp$10);
        throw temp$8;

     label5:
        nop;
        e := @caughtexception;
        temp$11 = new java.io.IOException;
        temp$12 = new java.lang.StringBuffer;
        specialinvoke temp$12.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Class (");
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(className);
        virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(") not accessible");
        temp$13 = virtualinvoke temp$12.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$11.<java.io.IOException: void <init>(java.lang.String)>(temp$13);
        throw temp$11;

        catch java.lang.NoSuchMethodError from label0 to label1 with label2;
        catch java.lang.ClassNotFoundException from label0 to label1 with label3;
        catch java.lang.InstantiationException from label0 to label1 with label4;
        catch java.lang.IllegalAccessException from label0 to label1 with label5;
    }

    private final void map(CH.ifa.draw.util.Storable)
    {
        CH.ifa.draw.util.StorableInput this;
        CH.ifa.draw.util.Storable storable;
        java.util.Vector temp$0, temp$2;
        boolean temp$1;

        this := @this: CH.ifa.draw.util.StorableInput;
        storable := @parameter0: CH.ifa.draw.util.Storable;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.util.Vector fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean contains(java.lang.Object)>(storable);
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.util.StorableInput: java.util.Vector fMap>;
        virtualinvoke temp$2.<java.util.Vector: void addElement(java.lang.Object)>(storable);

     label1:
        nop;
        return;
    }

    private final CH.ifa.draw.util.Storable retrieve(int)
    {
        CH.ifa.draw.util.StorableInput this;
        int ref;
        java.util.Vector temp$0;
        java.lang.Object temp$1;
        CH.ifa.draw.util.Storable temp$2;

        this := @this: CH.ifa.draw.util.StorableInput;
        ref := @parameter0: int;
        temp$0 = this.<CH.ifa.draw.util.StorableInput: java.util.Vector fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.lang.Object elementAt(int)>(ref);
        temp$2 = (CH.ifa.draw.util.Storable) temp$1;
        return temp$2;
    }
}
