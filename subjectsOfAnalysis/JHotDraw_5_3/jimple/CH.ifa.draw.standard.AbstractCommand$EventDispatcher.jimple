public static class CH.ifa.draw.standard.AbstractCommand$EventDispatcher extends java.lang.Object
{
    private java.util.Vector myRegisteredListeners;
    private CH.ifa.draw.util.Command myObservedCommand;

    public void <init>(CH.ifa.draw.util.Command)
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        CH.ifa.draw.util.Command newObservedCommand;
        java.util.Vector temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        newObservedCommand := @parameter0: CH.ifa.draw.util.Command;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners> = temp$0;
        this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: CH.ifa.draw.util.Command myObservedCommand> = newObservedCommand;
        return;
    }

    public void fireCommandExecutedEvent()
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        java.util.Enumeration le, temp$1;
        java.util.Vector temp$0;
        boolean temp$2;
        java.lang.Object temp$3;
        CH.ifa.draw.util.CommandListener temp$4;
        java.util.EventObject temp$5;
        CH.ifa.draw.util.Command temp$6;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.util.Enumeration elements()>();
        le = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke le.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke le.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$4 = (CH.ifa.draw.util.CommandListener) temp$3;
        temp$5 = new java.util.EventObject;
        temp$6 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: CH.ifa.draw.util.Command myObservedCommand>;
        specialinvoke temp$5.<java.util.EventObject: void <init>(java.lang.Object)>(temp$6);
        interfaceinvoke temp$4.<CH.ifa.draw.util.CommandListener: void commandExecuted(java.util.EventObject)>(temp$5);
        goto label0;

     label2:
        nop;
        return;
    }

    public void fireCommandExecutableEvent()
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        java.util.Enumeration le, temp$1;
        java.util.Vector temp$0;
        boolean temp$2;
        java.lang.Object temp$3;
        CH.ifa.draw.util.CommandListener temp$4;
        java.util.EventObject temp$5;
        CH.ifa.draw.util.Command temp$6;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.util.Enumeration elements()>();
        le = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke le.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke le.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$4 = (CH.ifa.draw.util.CommandListener) temp$3;
        temp$5 = new java.util.EventObject;
        temp$6 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: CH.ifa.draw.util.Command myObservedCommand>;
        specialinvoke temp$5.<java.util.EventObject: void <init>(java.lang.Object)>(temp$6);
        interfaceinvoke temp$4.<CH.ifa.draw.util.CommandListener: void commandExecutable(java.util.EventObject)>(temp$5);
        goto label0;

     label2:
        nop;
        return;
    }

    public void fireCommandNotExecutableEvent()
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        java.util.Enumeration le, temp$1;
        java.util.Vector temp$0;
        boolean temp$2;
        java.lang.Object temp$3;
        CH.ifa.draw.util.CommandListener temp$4;
        java.util.EventObject temp$5;
        CH.ifa.draw.util.Command temp$6;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.util.Enumeration elements()>();
        le = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke le.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke le.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$4 = (CH.ifa.draw.util.CommandListener) temp$3;
        temp$5 = new java.util.EventObject;
        temp$6 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: CH.ifa.draw.util.Command myObservedCommand>;
        specialinvoke temp$5.<java.util.EventObject: void <init>(java.lang.Object)>(temp$6);
        interfaceinvoke temp$4.<CH.ifa.draw.util.CommandListener: void commandNotExecutable(java.util.EventObject)>(temp$5);
        goto label0;

     label2:
        nop;
        return;
    }

    public void addCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        CH.ifa.draw.util.CommandListener newCommandListener;
        java.util.Vector temp$0, temp$2;
        boolean temp$1, temp$3;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        newCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean contains(java.lang.Object)>(newCommandListener);
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$3 = virtualinvoke temp$2.<java.util.Vector: boolean add(java.lang.Object)>(newCommandListener);

     label1:
        nop;
        return;
    }

    public void removeCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher this;
        CH.ifa.draw.util.CommandListener oldCommandListener;
        java.util.Vector temp$0, temp$2;
        boolean temp$1, temp$3;

        this := @this: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        oldCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean contains(java.lang.Object)>(oldCommandListener);
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: java.util.Vector myRegisteredListeners>;
        temp$3 = virtualinvoke temp$2.<java.util.Vector: boolean remove(java.lang.Object)>(oldCommandListener);

     label1:
        nop;
        return;
    }
}
