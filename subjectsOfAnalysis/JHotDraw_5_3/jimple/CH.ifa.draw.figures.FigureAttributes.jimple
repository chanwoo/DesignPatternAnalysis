public class CH.ifa.draw.figures.FigureAttributes extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private java.util.Hashtable fMap;
    private static final long serialVersionUID;
    private int figureAttributesSerializedDataVersion;

    static void <clinit>()
    {
        long temp$0;

        temp$0 = -6886355144423666716L;
        <CH.ifa.draw.figures.FigureAttributes: long serialVersionUID> = temp$0;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.figures.FigureAttributes this;
        int temp$0;
        java.util.Hashtable temp$1;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.figures.FigureAttributes: int figureAttributesSerializedDataVersion> = temp$0;
        temp$1 = new java.util.Hashtable;
        specialinvoke temp$1.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap> = temp$1;
        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        CH.ifa.draw.figures.FigureAttributes this;
        java.lang.String name;
        java.util.Hashtable temp$0;
        java.lang.Object temp$1;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        name := @parameter0: java.lang.String;
        temp$0 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(name);
        return temp$1;
    }

    public void set(java.lang.String, java.lang.Object)
    {
        CH.ifa.draw.figures.FigureAttributes this;
        java.lang.String name;
        java.lang.Object value, temp$1, temp$3;
        java.util.Hashtable temp$0, temp$2;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.Object;
        if value != null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value);
        goto label2;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$3 = virtualinvoke temp$2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(name);

     label2:
        nop;
        return;
    }

    public boolean hasDefined(java.lang.String)
    {
        CH.ifa.draw.figures.FigureAttributes this;
        java.lang.String name;
        java.util.Hashtable temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        name := @parameter0: java.lang.String;
        temp$0 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(name);
        return temp$1;
    }

    public java.lang.Object clone()
    {
        CH.ifa.draw.figures.FigureAttributes this, a;
        java.lang.Object temp$0, temp$2;
        java.util.Hashtable temp$1, temp$3;
        java.lang.CloneNotSupportedException e;
        java.lang.InternalError temp$4;

        this := @this: CH.ifa.draw.figures.FigureAttributes;

     label0:
        nop;
        temp$0 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();
        a = (CH.ifa.draw.figures.FigureAttributes) temp$0;
        temp$1 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$2 = virtualinvoke temp$1.<java.util.Hashtable: java.lang.Object clone()>();
        temp$3 = (java.util.Hashtable) temp$2;
        a.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap> = temp$3;

     label1:
        nop;
        return a;

     label2:
        nop;
        e := @caughtexception;
        temp$4 = new java.lang.InternalError;
        specialinvoke temp$4.<java.lang.InternalError: void <init>()>();
        throw temp$4;

        catch java.lang.CloneNotSupportedException from label0 to label1 with label2;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.figures.FigureAttributes this;
        CH.ifa.draw.util.StorableInput dr;
        java.lang.String s, temp$0, temp$1, key, temp$6, valtype, temp$7, temp$15, temp$17;
        boolean temp$2, temp$8, temp$13, temp$16, temp$18, temp$21, temp$23, temp$24;
        java.io.IOException temp$3;
        java.util.Hashtable temp$4, temp$25;
        int size, temp$5, i, temp$10, temp$11, temp$12, temp$20, temp$27, temp$28;
        java.lang.Object val, temp$26;
        java.awt.Color temp$9;
        java.lang.Boolean temp$14;
        java.lang.Integer temp$19;
        CH.ifa.draw.util.Storable temp$22;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        s = temp$0;
        temp$1 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();
        temp$2 = virtualinvoke temp$1.<java.lang.String: boolean equals(java.lang.Object)>("attributes");
        if temp$2 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$3 = new java.io.IOException;
        specialinvoke temp$3.<java.io.IOException: void <init>(java.lang.String)>("Attributes expected");
        throw temp$3;

     label1:
        nop;
        temp$4 = new java.util.Hashtable;
        specialinvoke temp$4.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap> = temp$4;
        temp$5 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        size = temp$5;
        i = 0;

     label2:
        nop;
        if i < size goto label3;

        goto label24;

     label3:
        nop;
        temp$6 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        key = temp$6;
        temp$7 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        valtype = temp$7;
        val = null;
        temp$8 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("Color");
        if temp$8 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$9 = new java.awt.Color;
        temp$10 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$11 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$12 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        specialinvoke temp$9.<java.awt.Color: void <init>(int,int,int)>(temp$10, temp$11, temp$12);
        val = temp$9;
        goto label22;

     label5:
        nop;
        temp$13 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("Boolean");
        if temp$13 == 0 goto label7;

        goto label6;

     label6:
        nop;
        temp$14 = new java.lang.Boolean;
        temp$15 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        specialinvoke temp$14.<java.lang.Boolean: void <init>(java.lang.String)>(temp$15);
        val = temp$14;
        goto label21;

     label7:
        nop;
        temp$16 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("String");
        if temp$16 == 0 goto label9;

        goto label8;

     label8:
        nop;
        temp$17 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        val = temp$17;
        goto label20;

     label9:
        nop;
        temp$18 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("Int");
        if temp$18 == 0 goto label11;

        goto label10;

     label10:
        nop;
        temp$19 = new java.lang.Integer;
        temp$20 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        specialinvoke temp$19.<java.lang.Integer: void <init>(int)>(temp$20);
        val = temp$19;
        goto label19;

     label11:
        nop;
        temp$21 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("Storable");
        if temp$21 == 0 goto label13;

        goto label12;

     label12:
        nop;
        temp$22 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        val = temp$22;
        goto label18;

     label13:
        nop;
        temp$23 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("POPUP_MENU");
        if temp$23 == 0 goto label15;

        goto label14;

     label14:
        nop;
        goto label23;

     label15:
        nop;
        temp$24 = virtualinvoke valtype.<java.lang.String: boolean equals(java.lang.Object)>("UNKNOWN");
        if temp$24 == 0 goto label17;

        goto label16;

     label16:
        nop;
        goto label23;

     label17:
        nop;

     label18:
        nop;

     label19:
        nop;

     label20:
        nop;

     label21:
        nop;

     label22:
        nop;
        temp$25 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$26 = virtualinvoke temp$25.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, val);

     label23:
        nop;
        temp$27 = i;
        temp$28 = temp$27 + 1;
        i = temp$28;
        goto label2;

     label24:
        nop;
        return;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.figures.FigureAttributes this;
        CH.ifa.draw.util.StorableOutput dw;
        java.util.Hashtable temp$0, temp$2, temp$6;
        int temp$1, temp$17;
        java.util.Enumeration k, temp$3;
        boolean temp$4, temp$8, temp$10, temp$12, temp$14, temp$15, temp$18, temp$20;
        java.lang.String s, temp$9, temp$23;
        java.lang.Object temp$5, v, temp$7;
        java.awt.Color temp$11;
        java.lang.Boolean temp$13;
        java.lang.Integer temp$16;
        CH.ifa.draw.util.Storable temp$19;
        java.io.PrintStream temp$21;
        java.lang.StringBuffer temp$22;

        this := @this: CH.ifa.draw.figures.FigureAttributes;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("attributes");
        temp$0 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$1 = virtualinvoke temp$0.<java.util.Hashtable: int size()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$1);
        temp$2 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$3 = virtualinvoke temp$2.<java.util.Hashtable: java.util.Enumeration keys()>();
        k = temp$3;

     label0:
        nop;
        temp$4 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$4 == 0 goto label23;

        goto label1;

     label1:
        nop;
        temp$5 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        s = (java.lang.String) temp$5;
        temp$6 = this.<CH.ifa.draw.figures.FigureAttributes: java.util.Hashtable fMap>;
        temp$7 = virtualinvoke temp$6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(s);
        v = temp$7;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>(s);
        temp$8 = v instanceof java.lang.String;
        if temp$8 == 0 goto label3;

        goto label2;

     label2:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("String");
        temp$9 = (java.lang.String) v;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>(temp$9);
        goto label22;

     label3:
        nop;
        temp$10 = v instanceof java.awt.Color;
        if temp$10 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$11 = (java.awt.Color) v;
        staticinvoke <CH.ifa.draw.figures.FigureAttributes: void writeColor(CH.ifa.draw.util.StorableOutput,java.lang.String,java.awt.Color)>(dw, "Color", temp$11);
        goto label21;

     label5:
        nop;
        temp$12 = v instanceof java.lang.Boolean;
        if temp$12 == 0 goto label10;

        goto label6;

     label6:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("Boolean");
        temp$13 = (java.lang.Boolean) v;
        temp$14 = virtualinvoke temp$13.<java.lang.Boolean: boolean booleanValue()>();
        if temp$14 == 0 goto label8;

        goto label7;

     label7:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("TRUE");
        goto label9;

     label8:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("FALSE");

     label9:
        nop;
        goto label20;

     label10:
        nop;
        temp$15 = v instanceof java.lang.Integer;
        if temp$15 == 0 goto label12;

        goto label11;

     label11:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("Int");
        temp$16 = (java.lang.Integer) v;
        temp$17 = virtualinvoke temp$16.<java.lang.Integer: int intValue()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$17);
        goto label19;

     label12:
        nop;
        temp$18 = v instanceof CH.ifa.draw.util.Storable;
        if temp$18 == 0 goto label14;

        goto label13;

     label13:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("Storable");
        temp$19 = (CH.ifa.draw.util.Storable) v;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$19);
        goto label18;

     label14:
        nop;
        temp$20 = v instanceof javax.swing.JPopupMenu;
        if temp$20 == 0 goto label16;

        goto label15;

     label15:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("POPUP_MENU");
        goto label17;

     label16:
        nop;
        temp$21 = <java.lang.System: java.io.PrintStream err>;
        temp$22 = new java.lang.StringBuffer;
        specialinvoke temp$22.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Unknown attribute: ");
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(v);
        temp$23 = virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$21.<java.io.PrintStream: void println(java.lang.String)>(temp$23);
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>("UNKNOWN");

     label17:
        nop;

     label18:
        nop;

     label19:
        nop;

     label20:
        nop;

     label21:
        nop;

     label22:
        nop;
        goto label0;

     label23:
        nop;
        return;
    }

    public static void writeColor(CH.ifa.draw.util.StorableOutput, java.lang.String, java.awt.Color)
    {
        CH.ifa.draw.util.StorableOutput dw;
        java.lang.String colorName;
        java.awt.Color color;
        int temp$0, temp$1, temp$2;

        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        colorName := @parameter1: java.lang.String;
        color := @parameter2: java.awt.Color;
        if color != null goto label0;

        goto label1;

     label0:
        nop;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>(colorName);
        temp$0 = virtualinvoke color.<java.awt.Color: int getRed()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$0);
        temp$1 = virtualinvoke color.<java.awt.Color: int getGreen()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$1);
        temp$2 = virtualinvoke color.<java.awt.Color: int getBlue()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$2);

     label1:
        nop;
        return;
    }

    public static java.awt.Color readColor(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.util.StorableInput dr;
        java.awt.Color temp$0;
        int temp$1, temp$2, temp$3;

        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        temp$0 = new java.awt.Color;
        temp$1 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$2 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$3 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        specialinvoke temp$0.<java.awt.Color: void <init>(int,int,int)>(temp$1, temp$2, temp$3);
        return temp$0;
    }
}
