public abstract class CH.ifa.draw.standard.AbstractTool extends java.lang.Object implements CH.ifa.draw.framework.Tool, CH.ifa.draw.framework.ViewChangeListener
{
    private CH.ifa.draw.framework.DrawingEditor myDrawingEditor;
    protected int fAnchorX;
    protected int fAnchorY;
    private CH.ifa.draw.util.Undoable myUndoActivity;
    private CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher;
    private boolean myIsUsable;
    private boolean myIsEnabled;

    public void <init>(CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor, temp$1;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newDrawingEditor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingEditor myDrawingEditor> = newDrawingEditor;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher createEventDispatcher()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void setEventDispatcher(CH.ifa.draw.standard.AbstractTool$EventDispatcher)>(temp$0);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void setEnabled(boolean)>(1);
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.DrawingEditor: void addViewChangeListener(CH.ifa.draw.framework.ViewChangeListener)>(this);
        return;
    }

    public void activate()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingView temp$0, temp$1;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$2;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.DrawingView: void clearSelection()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$2.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolActivatedEvent()>();

     label1:
        nop;
        return;
    }

    public void deactivate()
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean temp$0;
        CH.ifa.draw.framework.DrawingView temp$1, temp$2;
        java.awt.Cursor temp$3;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$4;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isActive()>();
        if temp$0 == 0 goto label3;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        if temp$1 != null goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        temp$3 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();
        interfaceinvoke temp$2.<CH.ifa.draw.framework.DrawingView: void setCursor(java.awt.Cursor)>(temp$3);

     label2:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$4.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolDeactivatedEvent()>();

     label3:
        nop;
        return;
    }

    public void viewSelectionChanged(CH.ifa.draw.framework.DrawingView, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingView oldView, newView;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        oldView := @parameter0: CH.ifa.draw.framework.DrawingView;
        newView := @parameter1: CH.ifa.draw.framework.DrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isActive()>();
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void deactivate()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void activate()>();

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void checkUsable()>();
        return;
    }

    public void viewCreated(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingView view;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        return;
    }

    public void viewDestroying(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingView view;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        return;
    }

    public void mouseDown(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.AbstractTool this;
        java.awt.event.MouseEvent e;
        int x, y;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        this.<CH.ifa.draw.standard.AbstractTool: int fAnchorX> = x;
        this.<CH.ifa.draw.standard.AbstractTool: int fAnchorY> = y;
        return;
    }

    public void mouseDrag(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.AbstractTool this;
        java.awt.event.MouseEvent e;
        int x, y;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        return;
    }

    public void mouseUp(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.AbstractTool this;
        java.awt.event.MouseEvent e;
        int x, y;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        e := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        return;
    }

    public void mouseMove(java.awt.event.MouseEvent, int, int)
    {
        CH.ifa.draw.standard.AbstractTool this;
        java.awt.event.MouseEvent evt;
        int x, y;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        evt := @parameter0: java.awt.event.MouseEvent;
        x := @parameter1: int;
        y := @parameter2: int;
        return;
    }

    public void keyDown(java.awt.event.KeyEvent, int)
    {
        CH.ifa.draw.standard.AbstractTool this;
        java.awt.event.KeyEvent evt;
        int key;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        evt := @parameter0: java.awt.event.KeyEvent;
        key := @parameter1: int;
        return;
    }

    public CH.ifa.draw.framework.Drawing drawing()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingView temp$0;
        CH.ifa.draw.framework.Drawing temp$1;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.DrawingEditor editor()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingEditor temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingEditor myDrawingEditor>;
        return temp$0;
    }

    public CH.ifa.draw.framework.DrawingView view()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.DrawingView view()>();
        return temp$1;
    }

    public boolean isUsable()
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isEnabled()>();
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.AbstractTool: boolean myIsUsable>;
        if temp$1 == 0 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$2 = 0;
        goto label3;

     label2:
        nop;
        temp$2 = 1;

     label3:
        nop;
        return temp$2;
    }

    public void setUsable(boolean)
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean newIsUsable, temp$0, temp$1;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newIsUsable := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isUsable()>();
        if temp$0 != newIsUsable goto label0;

        goto label4;

     label0:
        nop;
        this.<CH.ifa.draw.standard.AbstractTool: boolean myIsUsable> = newIsUsable;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isUsable()>();
        if temp$1 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$2.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolUsableEvent()>();
        goto label3;

     label2:
        nop;
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$3.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolUnusableEvent()>();

     label3:
        nop;

     label4:
        nop;
        return;
    }

    public void setEnabled(boolean)
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean newIsEnabled, temp$0, temp$1;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newIsEnabled := @parameter0: boolean;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isEnabled()>();
        if temp$0 != newIsEnabled goto label0;

        goto label4;

     label0:
        nop;
        this.<CH.ifa.draw.standard.AbstractTool: boolean myIsEnabled> = newIsEnabled;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isEnabled()>();
        if temp$1 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$2.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolEnabledEvent()>();
        goto label3;

     label2:
        nop;
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$3.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void fireToolDisabledEvent()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void setUsable(boolean)>(0);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void deactivate()>();

     label3:
        nop;

     label4:
        nop;
        return;
    }

    public boolean isEnabled()
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = this.<CH.ifa.draw.standard.AbstractTool: boolean myIsEnabled>;
        return temp$0;
    }

    public CH.ifa.draw.util.Undoable getUndoActivity()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.util.Undoable temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.util.Undoable myUndoActivity>;
        return temp$0;
    }

    public void setUndoActivity(CH.ifa.draw.util.Undoable)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.util.Undoable newUndoActivity;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newUndoActivity := @parameter0: CH.ifa.draw.util.Undoable;
        this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.util.Undoable myUndoActivity> = newUndoActivity;
        return;
    }

    public boolean isActive()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.Tool temp$1;
        boolean temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.Tool tool()>();
        if temp$1 == this goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isUsable()>();
        if temp$2 == 0 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$3 = 0;
        goto label3;

     label2:
        nop;
        temp$3 = 1;

     label3:
        nop;
        return temp$3;
    }

    public void addToolListener(CH.ifa.draw.framework.ToolListener)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.ToolListener newToolListener;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newToolListener := @parameter0: CH.ifa.draw.framework.ToolListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void addToolListener(CH.ifa.draw.framework.ToolListener)>(newToolListener);
        return;
    }

    public void removeToolListener(CH.ifa.draw.framework.ToolListener)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.framework.ToolListener oldToolListener;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        oldToolListener := @parameter0: CH.ifa.draw.framework.ToolListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void removeToolListener(CH.ifa.draw.framework.ToolListener)>(oldToolListener);
        return;
    }

    private final void setEventDispatcher(CH.ifa.draw.standard.AbstractTool$EventDispatcher)
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher newEventDispatcher;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        newEventDispatcher := @parameter0: CH.ifa.draw.standard.AbstractTool$EventDispatcher;
        this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher> = newEventDispatcher;
        return;
    }

    protected CH.ifa.draw.standard.AbstractTool$EventDispatcher getEventDispatcher()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.standard.AbstractTool$EventDispatcher myEventDispatcher>;
        return temp$0;
    }

    public CH.ifa.draw.standard.AbstractTool$EventDispatcher createEventDispatcher()
    {
        CH.ifa.draw.standard.AbstractTool this;
        CH.ifa.draw.standard.AbstractTool$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = new CH.ifa.draw.standard.AbstractTool$EventDispatcher;
        specialinvoke temp$0.<CH.ifa.draw.standard.AbstractTool$EventDispatcher: void <init>(CH.ifa.draw.framework.Tool)>(this);
        return temp$0;
    }

    protected void checkUsable()
    {
        CH.ifa.draw.standard.AbstractTool this;
        boolean temp$0, temp$3, temp$4;
        CH.ifa.draw.framework.DrawingView temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.AbstractTool;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: boolean isEnabled()>();
        if temp$0 == 0 goto label5;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        if temp$1 != null goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: CH.ifa.draw.framework.DrawingView view()>();
        temp$3 = interfaceinvoke temp$2.<CH.ifa.draw.framework.DrawingView: boolean isInteractive()>();
        if temp$3 == 0 goto label2;

        goto label3;

        goto label3;

     label2:
        nop;
        temp$4 = 0;
        goto label4;

     label3:
        nop;
        temp$4 = 1;

     label4:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.AbstractTool: void setUsable(boolean)>(temp$4);

     label5:
        nop;
        return;
    }
}
