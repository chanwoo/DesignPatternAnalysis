public class CH.ifa.draw.figures.TextFigure extends CH.ifa.draw.figures.AttributeFigure implements CH.ifa.draw.framework.FigureChangeListener, CH.ifa.draw.standard.TextHolder
{
    private int fOriginX;
    private int fOriginY;
    private boolean fSizeIsDirty;
    private int fWidth;
    private int fHeight;
    private java.lang.String fText;
    private java.awt.Font fFont;
    private boolean fIsReadOnly;
    private CH.ifa.draw.framework.Figure fObservedFigure;
    private CH.ifa.draw.standard.OffsetLocator fLocator;
    private static java.lang.String fgCurrentFontName;
    private static int fgCurrentFontSize;
    private static int fgCurrentFontStyle;
    private static final long serialVersionUID;
    private int textFigureSerializedDataVersion;

    static void <clinit>()
    {
        java.lang.String temp$0;
        int temp$1, temp$2;
        long temp$3;

        temp$0 = "Helvetica";
        <CH.ifa.draw.figures.TextFigure: java.lang.String fgCurrentFontName> = temp$0;
        temp$1 = 12;
        <CH.ifa.draw.figures.TextFigure: int fgCurrentFontSize> = temp$1;
        temp$2 = 0;
        <CH.ifa.draw.figures.TextFigure: int fgCurrentFontStyle> = temp$2;
        temp$3 = 4599820785949456124L;
        <CH.ifa.draw.figures.TextFigure: long serialVersionUID> = temp$3;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean temp$0, temp$9;
        CH.ifa.draw.framework.Figure temp$1;
        CH.ifa.draw.standard.OffsetLocator temp$2;
        int temp$3, temp$4, temp$5;
        java.awt.Font temp$6;
        java.awt.Color temp$7;
        java.lang.String temp$8;

        this := @this: CH.ifa.draw.figures.TextFigure;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.figures.TextFigure: boolean fSizeIsDirty> = temp$0;
        temp$1 = null;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure> = temp$1;
        temp$2 = null;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator> = temp$2;
        temp$3 = 1;
        this.<CH.ifa.draw.figures.TextFigure: int textFigureSerializedDataVersion> = temp$3;
        temp$4 = 0;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginX> = temp$4;
        temp$5 = 0;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginY> = temp$5;
        temp$6 = staticinvoke <CH.ifa.draw.figures.TextFigure: java.awt.Font createCurrentFont()>();
        this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont> = temp$6;
        temp$7 = staticinvoke <CH.ifa.draw.util.ColorMap: java.awt.Color color(java.lang.String)>("None");
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void setAttribute(java.lang.String,java.lang.Object)>("FillColor", temp$7);
        temp$8 = new java.lang.String;
        specialinvoke temp$8.<java.lang.String: void <init>(java.lang.String)>("");
        this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText> = temp$8;
        temp$9 = 1;
        this.<CH.ifa.draw.figures.TextFigure: boolean fSizeIsDirty> = temp$9;
        return;
    }

    public void moveBy(int, int)
    {
        CH.ifa.draw.figures.TextFigure this;
        int x, y;
        CH.ifa.draw.standard.OffsetLocator temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void willChange()>();
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void basicMoveBy(int,int)>(x, y);
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator>;
        virtualinvoke temp$1.<CH.ifa.draw.standard.OffsetLocator: void moveBy(int,int)>(x, y);

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void changed()>();
        return;
    }

    protected void basicMoveBy(int, int)
    {
        CH.ifa.draw.figures.TextFigure this;
        int x, y, temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.figures.TextFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: int fOriginX>;
        temp$1 = temp$0 + x;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginX> = temp$1;
        temp$2 = this.<CH.ifa.draw.figures.TextFigure: int fOriginY>;
        temp$3 = temp$2 + y;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginY> = temp$3;
        return;
    }

    public void basicDisplayBox(java.awt.Point, java.awt.Point)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Point newOrigin, newCorner;
        int temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        newOrigin := @parameter0: java.awt.Point;
        newCorner := @parameter1: java.awt.Point;
        temp$0 = newOrigin.<java.awt.Point: int x>;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginX> = temp$0;
        temp$1 = newOrigin.<java.awt.Point: int y>;
        this.<CH.ifa.draw.figures.TextFigure: int fOriginY> = temp$1;
        return;
    }

    public java.awt.Rectangle displayBox()
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Dimension extent, temp$0;
        java.awt.Rectangle temp$1;
        int temp$2, temp$3, temp$4, temp$5;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Dimension textExtent()>();
        extent = temp$0;
        temp$1 = new java.awt.Rectangle;
        temp$2 = this.<CH.ifa.draw.figures.TextFigure: int fOriginX>;
        temp$3 = this.<CH.ifa.draw.figures.TextFigure: int fOriginY>;
        temp$4 = extent.<java.awt.Dimension: int width>;
        temp$5 = extent.<java.awt.Dimension: int height>;
        specialinvoke temp$1.<java.awt.Rectangle: void <init>(int,int,int,int)>(temp$2, temp$3, temp$4, temp$5);
        return temp$1;
    }

    public java.awt.Rectangle textDisplayBox()
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Rectangle temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Rectangle displayBox()>();
        return temp$0;
    }

    public boolean readOnly()
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: boolean fIsReadOnly>;
        return temp$0;
    }

    public void setReadOnly(boolean)
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean isReadOnly;

        this := @this: CH.ifa.draw.figures.TextFigure;
        isReadOnly := @parameter0: boolean;
        this.<CH.ifa.draw.figures.TextFigure: boolean fIsReadOnly> = isReadOnly;
        return;
    }

    public java.awt.Font getFont()
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Font temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        return temp$0;
    }

    public void setFont(java.awt.Font)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Font newFont;

        this := @this: CH.ifa.draw.figures.TextFigure;
        newFont := @parameter0: java.awt.Font;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void willChange()>();
        this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont> = newFont;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void markDirty()>();
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void changed()>();
        return;
    }

    public void changed()
    {
        CH.ifa.draw.figures.TextFigure this;

        this := @this: CH.ifa.draw.figures.TextFigure;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void changed()>();
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void updateLocation()>();
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.lang.String name, temp$8;
        java.awt.Font font, temp$0;
        boolean temp$1, temp$4, temp$7;
        java.lang.Integer temp$2, temp$5;
        int temp$3, temp$6;
        java.lang.Object temp$9;

        this := @this: CH.ifa.draw.figures.TextFigure;
        name := @parameter0: java.lang.String;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Font getFont()>();
        font = temp$0;
        temp$1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontSize");
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = new java.lang.Integer;
        temp$3 = virtualinvoke font.<java.awt.Font: int getSize()>();
        specialinvoke temp$2.<java.lang.Integer: void <init>(int)>(temp$3);
        return temp$2;

     label1:
        nop;
        temp$4 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontStyle");
        if temp$4 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$5 = new java.lang.Integer;
        temp$6 = virtualinvoke font.<java.awt.Font: int getStyle()>();
        specialinvoke temp$5.<java.lang.Integer: void <init>(int)>(temp$6);
        return temp$5;

     label3:
        nop;
        temp$7 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontName");
        if temp$7 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$8 = virtualinvoke font.<java.awt.Font: java.lang.String getName()>();
        return temp$8;

     label5:
        nop;
        temp$9 = specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: java.lang.Object getAttribute(java.lang.String)>(name);
        return temp$9;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.lang.String name, temp$3, temp$14, n;
        java.lang.Object value;
        java.awt.Font font, temp$0, temp$2, temp$9, temp$13, temp$17;
        boolean temp$1, temp$6, temp$16;
        java.lang.Integer s, s;
        int temp$4, temp$5, style, temp$7, temp$8, temp$10, temp$11, temp$12, temp$15, temp$18, temp$19;

        this := @this: CH.ifa.draw.figures.TextFigure;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.Object;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Font getFont()>();
        font = temp$0;
        temp$1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontSize");
        if temp$1 == 0 goto label1;

        goto label0;

     label0:
        nop;
        s = (java.lang.Integer) value;
        temp$2 = new java.awt.Font;
        temp$3 = virtualinvoke font.<java.awt.Font: java.lang.String getName()>();
        temp$4 = virtualinvoke font.<java.awt.Font: int getStyle()>();
        temp$5 = virtualinvoke s.<java.lang.Integer: int intValue()>();
        specialinvoke temp$2.<java.awt.Font: void <init>(java.lang.String,int,int)>(temp$3, temp$4, temp$5);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void setFont(java.awt.Font)>(temp$2);
        goto label11;

     label1:
        nop;
        temp$6 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontStyle");
        if temp$6 == 0 goto label6;

        goto label2;

     label2:
        nop;
        s = (java.lang.Integer) value;
        temp$7 = virtualinvoke font.<java.awt.Font: int getStyle()>();
        style = temp$7;
        temp$8 = virtualinvoke s.<java.lang.Integer: int intValue()>();
        if temp$8 == 0 goto label3;

        goto label4;

     label3:
        nop;
        temp$9 = font;
        temp$10 = <java.awt.Font: int PLAIN>;
        style = temp$10;
        goto label5;

     label4:
        nop;
        temp$11 = virtualinvoke s.<java.lang.Integer: int intValue()>();
        temp$12 = style ^ temp$11;
        style = temp$12;

     label5:
        nop;
        temp$13 = new java.awt.Font;
        temp$14 = virtualinvoke font.<java.awt.Font: java.lang.String getName()>();
        temp$15 = virtualinvoke font.<java.awt.Font: int getSize()>();
        specialinvoke temp$13.<java.awt.Font: void <init>(java.lang.String,int,int)>(temp$14, style, temp$15);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void setFont(java.awt.Font)>(temp$13);
        goto label10;

     label6:
        nop;
        temp$16 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FontName");
        if temp$16 == 0 goto label8;

        goto label7;

     label7:
        nop;
        n = (java.lang.String) value;
        temp$17 = new java.awt.Font;
        temp$18 = virtualinvoke font.<java.awt.Font: int getStyle()>();
        temp$19 = virtualinvoke font.<java.awt.Font: int getSize()>();
        specialinvoke temp$17.<java.awt.Font: void <init>(java.lang.String,int,int)>(n, temp$18, temp$19);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void setFont(java.awt.Font)>(temp$17);
        goto label9;

     label8:
        nop;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void setAttribute(java.lang.String,java.lang.Object)>(name, value);

     label9:
        nop;

     label10:
        nop;

     label11:
        nop;
        return;
    }

    public java.lang.String getText()
    {
        CH.ifa.draw.figures.TextFigure this;
        java.lang.String temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        return temp$0;
    }

    public void setText(java.lang.String)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.lang.String newText, temp$0, temp$2;
        boolean temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        newText := @parameter0: java.lang.String;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        temp$1 = virtualinvoke newText.<java.lang.String: boolean equals(java.lang.Object)>(temp$0);
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void willChange()>();
        temp$2 = new java.lang.String;
        specialinvoke temp$2.<java.lang.String: void <init>(java.lang.String)>(newText);
        this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText> = temp$2;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void markDirty()>();
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void changed()>();

     label1:
        nop;
        return;
    }

    public boolean acceptsTyping()
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: boolean fIsReadOnly>;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = 0;
        goto label2;

     label1:
        nop;
        temp$1 = 1;

     label2:
        nop;
        return temp$1;
    }

    public void drawBackground(java.awt.Graphics)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Graphics g;
        java.awt.Rectangle r, temp$0;
        int temp$1, temp$2, temp$3, temp$4;

        this := @this: CH.ifa.draw.figures.TextFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Rectangle displayBox()>();
        r = temp$0;
        temp$1 = r.<java.awt.Rectangle: int x>;
        temp$2 = r.<java.awt.Rectangle: int y>;
        temp$3 = r.<java.awt.Rectangle: int width>;
        temp$4 = r.<java.awt.Rectangle: int height>;
        virtualinvoke g.<java.awt.Graphics: void fillRect(int,int,int,int)>(temp$1, temp$2, temp$3, temp$4);
        return;
    }

    public void drawFrame(java.awt.Graphics)
    {
        CH.ifa.draw.figures.TextFigure this;
        java.awt.Graphics g;
        java.awt.Font temp$0, temp$3;
        java.lang.Object temp$1;
        java.awt.Color temp$2;
        java.awt.FontMetrics metrics, temp$4;
        java.lang.String temp$5;
        int temp$6, temp$7, temp$8, temp$9;

        this := @this: CH.ifa.draw.figures.TextFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        virtualinvoke g.<java.awt.Graphics: void setFont(java.awt.Font)>(temp$0);
        temp$1 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.lang.Object getAttribute(java.lang.String)>("TextColor");
        temp$2 = (java.awt.Color) temp$1;
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$2);
        temp$3 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        temp$4 = virtualinvoke g.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(temp$3);
        metrics = temp$4;
        temp$5 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        temp$6 = this.<CH.ifa.draw.figures.TextFigure: int fOriginX>;
        temp$7 = this.<CH.ifa.draw.figures.TextFigure: int fOriginY>;
        temp$8 = virtualinvoke metrics.<java.awt.FontMetrics: int getAscent()>();
        temp$9 = temp$7 + temp$8;
        virtualinvoke g.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(temp$5, temp$6, temp$9);
        return;
    }

    private final java.awt.Dimension textExtent()
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean temp$0, temp$10;
        java.awt.Dimension temp$1, temp$11;
        int temp$2, temp$3, temp$8, temp$9, temp$13, temp$14;
        java.awt.FontMetrics metrics, temp$6;
        java.awt.Toolkit temp$4;
        java.awt.Font temp$5;
        java.lang.String temp$7, temp$12;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: boolean fSizeIsDirty>;
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.awt.Dimension;
        temp$2 = this.<CH.ifa.draw.figures.TextFigure: int fWidth>;
        temp$3 = this.<CH.ifa.draw.figures.TextFigure: int fHeight>;
        specialinvoke temp$1.<java.awt.Dimension: void <init>(int,int)>(temp$2, temp$3);
        return temp$1;

     label1:
        nop;
        temp$4 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();
        temp$5 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        temp$6 = virtualinvoke temp$4.<java.awt.Toolkit: java.awt.FontMetrics getFontMetrics(java.awt.Font)>(temp$5);
        metrics = temp$6;
        temp$7 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        temp$8 = virtualinvoke metrics.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(temp$7);
        this.<CH.ifa.draw.figures.TextFigure: int fWidth> = temp$8;
        temp$9 = virtualinvoke metrics.<java.awt.FontMetrics: int getHeight()>();
        this.<CH.ifa.draw.figures.TextFigure: int fHeight> = temp$9;
        temp$10 = 0;
        this.<CH.ifa.draw.figures.TextFigure: boolean fSizeIsDirty> = temp$10;
        temp$11 = new java.awt.Dimension;
        temp$12 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        temp$13 = virtualinvoke metrics.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(temp$12);
        temp$14 = virtualinvoke metrics.<java.awt.FontMetrics: int getHeight()>();
        specialinvoke temp$11.<java.awt.Dimension: void <init>(int,int)>(temp$13, temp$14);
        return temp$11;
    }

    private final void markDirty()
    {
        CH.ifa.draw.figures.TextFigure this;
        boolean temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = 1;
        this.<CH.ifa.draw.figures.TextFigure: boolean fSizeIsDirty> = temp$0;
        return;
    }

    public int overlayColumns()
    {
        CH.ifa.draw.figures.TextFigure this;
        int length, temp$1, columns, temp$3, temp$4, temp$5;
        java.lang.String temp$0, temp$2;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.lang.String getText()>();
        temp$1 = virtualinvoke temp$0.<java.lang.String: int length()>();
        length = temp$1;
        columns = 20;
        if length != 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.lang.String getText()>();
        temp$3 = virtualinvoke temp$2.<java.lang.String: int length()>();
        temp$4 = temp$3;
        temp$5 = temp$4 + 3;
        columns = temp$5;

     label1:
        nop;
        return columns;
    }

    public java.util.Vector handles()
    {
        CH.ifa.draw.figures.TextFigure this;
        java.util.Vector handles, temp$0;
        CH.ifa.draw.standard.NullHandle temp$1, temp$3, temp$5;
        CH.ifa.draw.framework.Locator temp$2, temp$4, temp$6, temp$8;
        CH.ifa.draw.figures.FontSizeHandle temp$7;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>()>();
        handles = temp$0;
        temp$1 = new CH.ifa.draw.standard.NullHandle;
        temp$2 = staticinvoke <CH.ifa.draw.standard.RelativeLocator: CH.ifa.draw.framework.Locator northWest()>();
        specialinvoke temp$1.<CH.ifa.draw.standard.NullHandle: void <init>(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.Locator)>(this, temp$2);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$1);
        temp$3 = new CH.ifa.draw.standard.NullHandle;
        temp$4 = staticinvoke <CH.ifa.draw.standard.RelativeLocator: CH.ifa.draw.framework.Locator northEast()>();
        specialinvoke temp$3.<CH.ifa.draw.standard.NullHandle: void <init>(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.Locator)>(this, temp$4);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$3);
        temp$5 = new CH.ifa.draw.standard.NullHandle;
        temp$6 = staticinvoke <CH.ifa.draw.standard.RelativeLocator: CH.ifa.draw.framework.Locator southEast()>();
        specialinvoke temp$5.<CH.ifa.draw.standard.NullHandle: void <init>(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.Locator)>(this, temp$6);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$5);
        temp$7 = new CH.ifa.draw.figures.FontSizeHandle;
        temp$8 = staticinvoke <CH.ifa.draw.standard.RelativeLocator: CH.ifa.draw.framework.Locator southWest()>();
        specialinvoke temp$7.<CH.ifa.draw.figures.FontSizeHandle: void <init>(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.Locator)>(this, temp$8);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$7);
        return handles;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.util.StorableOutput dw;
        int temp$0, temp$1, temp$6, temp$8;
        java.lang.String temp$2, temp$4;
        java.awt.Font temp$3, temp$5, temp$7;
        boolean temp$9;
        CH.ifa.draw.framework.Figure temp$10;
        CH.ifa.draw.standard.OffsetLocator temp$11;

        this := @this: CH.ifa.draw.figures.TextFigure;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void write(CH.ifa.draw.util.StorableOutput)>(dw);
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: int fOriginX>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$0);
        temp$1 = this.<CH.ifa.draw.figures.TextFigure: int fOriginY>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$1);
        temp$2 = this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>(temp$2);
        temp$3 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        temp$4 = virtualinvoke temp$3.<java.awt.Font: java.lang.String getName()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeString(java.lang.String)>(temp$4);
        temp$5 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        temp$6 = virtualinvoke temp$5.<java.awt.Font: int getStyle()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$6);
        temp$7 = this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont>;
        temp$8 = virtualinvoke temp$7.<java.awt.Font: int getSize()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$8);
        temp$9 = this.<CH.ifa.draw.figures.TextFigure: boolean fIsReadOnly>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeBoolean(boolean)>(temp$9);
        temp$10 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$10);
        temp$11 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$11);
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.util.StorableInput dr;
        int temp$0, temp$1, temp$5, temp$6;
        java.lang.String temp$2, temp$4;
        java.awt.Font temp$3;
        boolean temp$7;
        CH.ifa.draw.util.Storable temp$8, temp$12;
        CH.ifa.draw.framework.Figure temp$9, temp$10, temp$11;
        CH.ifa.draw.standard.OffsetLocator temp$13;

        this := @this: CH.ifa.draw.figures.TextFigure;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void read(CH.ifa.draw.util.StorableInput)>(dr);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void markDirty()>();
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        this.<CH.ifa.draw.figures.TextFigure: int fOriginX> = temp$0;
        temp$1 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        this.<CH.ifa.draw.figures.TextFigure: int fOriginY> = temp$1;
        temp$2 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        this.<CH.ifa.draw.figures.TextFigure: java.lang.String fText> = temp$2;
        temp$3 = new java.awt.Font;
        temp$4 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.lang.String readString()>();
        temp$5 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$6 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        specialinvoke temp$3.<java.awt.Font: void <init>(java.lang.String,int,int)>(temp$4, temp$5, temp$6);
        this.<CH.ifa.draw.figures.TextFigure: java.awt.Font fFont> = temp$3;
        temp$7 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: boolean readBoolean()>();
        this.<CH.ifa.draw.figures.TextFigure: boolean fIsReadOnly> = temp$7;
        temp$8 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$9 = (CH.ifa.draw.framework.Figure) temp$8;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure> = temp$9;
        temp$10 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        if temp$10 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$11 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        interfaceinvoke temp$11.<CH.ifa.draw.framework.Figure: void addFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(this);

     label1:
        nop;
        temp$12 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$13 = (CH.ifa.draw.standard.OffsetLocator) temp$12;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator> = temp$13;
        return;
    }

    private final void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        CH.ifa.draw.figures.TextFigure this;
        java.io.ObjectInputStream s;
        CH.ifa.draw.framework.Figure temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        s := @parameter0: java.io.ObjectInputStream;
        virtualinvoke s.<java.io.ObjectInputStream: void defaultReadObject()>();
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        interfaceinvoke temp$1.<CH.ifa.draw.framework.Figure: void addFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(this);

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void markDirty()>();
        return;
    }

    public void connect(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.Figure figure, temp$0, temp$1, temp$4;
        CH.ifa.draw.standard.OffsetLocator temp$2;
        CH.ifa.draw.framework.Locator temp$3;

        this := @this: CH.ifa.draw.figures.TextFigure;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        interfaceinvoke temp$1.<CH.ifa.draw.framework.Figure: void removeFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(this);

     label1:
        nop;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure> = figure;
        temp$2 = new CH.ifa.draw.standard.OffsetLocator;
        temp$3 = interfaceinvoke figure.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Locator connectedTextLocator(CH.ifa.draw.framework.Figure)>(this);
        specialinvoke temp$2.<CH.ifa.draw.standard.OffsetLocator: void <init>(CH.ifa.draw.framework.Locator)>(temp$3);
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator> = temp$2;
        temp$4 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        interfaceinvoke temp$4.<CH.ifa.draw.framework.Figure: void addFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(this);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void updateLocation()>();
        return;
    }

    public void figureChanged(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.figures.TextFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void updateLocation()>();
        return;
    }

    public void figureRemoved(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e, temp$2;
        CH.ifa.draw.framework.FigureChangeListener temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.FigureChangeListener listener()>();
        temp$2 = new CH.ifa.draw.framework.FigureChangeEvent;
        specialinvoke temp$2.<CH.ifa.draw.framework.FigureChangeEvent: void <init>(CH.ifa.draw.framework.Figure)>(this);
        interfaceinvoke temp$1.<CH.ifa.draw.framework.FigureChangeListener: void figureRequestRemove(CH.ifa.draw.framework.FigureChangeEvent)>(temp$2);

     label1:
        nop;
        return;
    }

    public void figureRequestRemove(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.figures.TextFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        return;
    }

    public void figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.figures.TextFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        return;
    }

    public void figureRequestUpdate(CH.ifa.draw.framework.FigureChangeEvent)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.FigureChangeEvent e;

        this := @this: CH.ifa.draw.figures.TextFigure;
        e := @parameter0: CH.ifa.draw.framework.FigureChangeEvent;
        return;
    }

    protected void updateLocation()
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.standard.OffsetLocator temp$0, temp$1;
        java.awt.Point p, temp$3;
        CH.ifa.draw.framework.Figure temp$2;
        int temp$4, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$14, temp$15, temp$16, temp$17, temp$18, temp$19, temp$20, temp$21, temp$22, temp$23;
        java.awt.Dimension temp$5, temp$13;

        this := @this: CH.ifa.draw.figures.TextFigure;
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator>;
        if temp$0 != null goto label0;

        goto label4;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator>;
        temp$2 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        temp$3 = virtualinvoke temp$1.<CH.ifa.draw.standard.OffsetLocator: java.awt.Point locate(CH.ifa.draw.framework.Figure)>(temp$2);
        p = temp$3;
        temp$4 = p.<java.awt.Point: int x>;
        temp$5 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Dimension size()>();
        temp$6 = temp$5.<java.awt.Dimension: int width>;
        temp$7 = temp$6 / 2;
        temp$8 = temp$7;
        temp$9 = this.<CH.ifa.draw.figures.TextFigure: int fOriginX>;
        temp$10 = temp$8 + temp$9;
        temp$11 = temp$4 - temp$10;
        p.<java.awt.Point: int x> = temp$11;
        temp$12 = p.<java.awt.Point: int y>;
        temp$13 = virtualinvoke this.<CH.ifa.draw.figures.TextFigure: java.awt.Dimension size()>();
        temp$14 = temp$13.<java.awt.Dimension: int height>;
        temp$15 = temp$14 / 2;
        temp$16 = temp$15;
        temp$17 = this.<CH.ifa.draw.figures.TextFigure: int fOriginY>;
        temp$18 = temp$16 + temp$17;
        temp$19 = temp$12 - temp$18;
        p.<java.awt.Point: int y> = temp$19;
        temp$20 = p.<java.awt.Point: int x>;
        if temp$20 != 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$21 = p.<java.awt.Point: int y>;
        if temp$21 != 0 goto label2;

        goto label3;

        goto label3;

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void willChange()>();
        temp$22 = p.<java.awt.Point: int x>;
        temp$23 = p.<java.awt.Point: int y>;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void basicMoveBy(int,int)>(temp$22, temp$23);
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void changed()>();

     label3:
        nop;

     label4:
        nop;
        return;
    }

    public void release()
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.Figure temp$0, temp$1;

        this := @this: CH.ifa.draw.figures.TextFigure;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void release()>();
        temp$0 = this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure>;
        virtualinvoke this.<CH.ifa.draw.figures.TextFigure: void disconnect(CH.ifa.draw.framework.Figure)>(temp$0);
        temp$1 = null;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.framework.Figure fObservedFigure> = temp$1;
        return;
    }

    public void disconnect(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.figures.TextFigure this;
        CH.ifa.draw.framework.Figure disconnectFigure;
        CH.ifa.draw.standard.OffsetLocator temp$0;

        this := @this: CH.ifa.draw.figures.TextFigure;
        disconnectFigure := @parameter0: CH.ifa.draw.framework.Figure;
        if disconnectFigure != null goto label0;

        goto label1;

     label0:
        nop;
        interfaceinvoke disconnectFigure.<CH.ifa.draw.framework.Figure: void removeFigureChangeListener(CH.ifa.draw.framework.FigureChangeListener)>(this);

     label1:
        nop;
        temp$0 = null;
        this.<CH.ifa.draw.figures.TextFigure: CH.ifa.draw.standard.OffsetLocator fLocator> = temp$0;
        return;
    }

    public static java.awt.Font createCurrentFont()
    {
        java.awt.Font temp$0;
        java.lang.String temp$1;
        int temp$2, temp$3;

        temp$0 = new java.awt.Font;
        temp$1 = <CH.ifa.draw.figures.TextFigure: java.lang.String fgCurrentFontName>;
        temp$2 = <CH.ifa.draw.figures.TextFigure: int fgCurrentFontStyle>;
        temp$3 = <CH.ifa.draw.figures.TextFigure: int fgCurrentFontSize>;
        specialinvoke temp$0.<java.awt.Font: void <init>(java.lang.String,int,int)>(temp$1, temp$2, temp$3);
        return temp$0;
    }

    public static void setCurrentFontName(java.lang.String)
    {
        java.lang.String name;

        name := @parameter0: java.lang.String;
        <CH.ifa.draw.figures.TextFigure: java.lang.String fgCurrentFontName> = name;
        return;
    }

    public static void setCurrentFontSize(int)
    {
        int size;

        size := @parameter0: int;
        <CH.ifa.draw.figures.TextFigure: int fgCurrentFontSize> = size;
        return;
    }

    public static void setCurrentFontStyle(int)
    {
        int style;

        style := @parameter0: int;
        <CH.ifa.draw.figures.TextFigure: int fgCurrentFontStyle> = style;
        return;
    }
}
