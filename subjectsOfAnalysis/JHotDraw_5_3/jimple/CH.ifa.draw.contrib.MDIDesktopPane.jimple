public class CH.ifa.draw.contrib.MDIDesktopPane extends javax.swing.JDesktopPane
{
    private static int FRAME_OFFSET;
    private CH.ifa.draw.contrib.MDIDesktopManager manager;

    static void <clinit>()
    {
        int temp$0;

        temp$0 = 20;
        <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET> = temp$0;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        CH.ifa.draw.contrib.MDIDesktopManager temp$0, temp$1;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        specialinvoke this.<javax.swing.JDesktopPane: void <init>()>();
        temp$0 = new CH.ifa.draw.contrib.MDIDesktopManager;
        specialinvoke temp$0.<CH.ifa.draw.contrib.MDIDesktopManager: void <init>(CH.ifa.draw.contrib.MDIDesktopPane)>(this);
        this.<CH.ifa.draw.contrib.MDIDesktopPane: CH.ifa.draw.contrib.MDIDesktopManager manager> = temp$0;
        temp$1 = this.<CH.ifa.draw.contrib.MDIDesktopPane: CH.ifa.draw.contrib.MDIDesktopManager manager>;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setDesktopManager(javax.swing.DesktopManager)>(temp$1);
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setDragMode(int)>(1);
        return;
    }

    public java.awt.Component add(javax.swing.JInternalFrame)
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        javax.swing.JInternalFrame frame, temp$5;
        javax.swing.JInternalFrame[] array, temp$0, temp$3;
        java.awt.Point p, temp$6, temp$13;
        int w, h, temp$2, temp$4, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$14, temp$15, temp$17, temp$18, temp$19, temp$20, temp$21, temp$22, temp$23, temp$24, temp$28, temp$31, temp$35, temp$38;
        java.awt.Component retval, temp$1;
        boolean temp$16;
        java.awt.Dimension temp$25, temp$29, temp$32, temp$36;
        double temp$26, temp$27, temp$30, temp$33, temp$34, temp$37;
        java.beans.PropertyVetoException e;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        frame := @parameter0: javax.swing.JInternalFrame;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: javax.swing.JInternalFrame[] getAllFrames()>();
        array = temp$0;
        temp$1 = specialinvoke this.<javax.swing.JDesktopPane: java.awt.Component add(java.awt.Component)>(frame);
        retval = temp$1;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void checkDesktopSize()>();
        temp$2 = lengthof array;
        if temp$2 > 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$3 = array;
        temp$4 = 0;
        temp$5 = temp$3[temp$4];
        temp$6 = virtualinvoke temp$5.<javax.swing.JInternalFrame: java.awt.Point getLocation()>();
        p = temp$6;
        temp$7 = p.<java.awt.Point: int x>;
        temp$8 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$9 = temp$7 + temp$8;
        p.<java.awt.Point: int x> = temp$9;
        temp$10 = p.<java.awt.Point: int y>;
        temp$11 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$12 = temp$10 + temp$11;
        p.<java.awt.Point: int y> = temp$12;
        goto label2;

     label1:
        nop;
        temp$13 = new java.awt.Point;
        specialinvoke temp$13.<java.awt.Point: void <init>(int,int)>(0, 0);
        p = temp$13;

     label2:
        nop;
        temp$14 = p.<java.awt.Point: int x>;
        temp$15 = p.<java.awt.Point: int y>;
        virtualinvoke frame.<javax.swing.JInternalFrame: void setLocation(int,int)>(temp$14, temp$15);
        temp$16 = virtualinvoke frame.<javax.swing.JInternalFrame: boolean isResizable()>();
        if temp$16 == 0 goto label8;

        goto label3;

     label3:
        nop;
        temp$17 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: int getWidth()>();
        temp$18 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: int getWidth()>();
        temp$19 = temp$18 / 3;
        temp$20 = temp$17 - temp$19;
        w = temp$20;
        temp$21 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: int getHeight()>();
        temp$22 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: int getHeight()>();
        temp$23 = temp$22 / 3;
        temp$24 = temp$21 - temp$23;
        h = temp$24;
        temp$25 = virtualinvoke frame.<javax.swing.JInternalFrame: java.awt.Dimension getMinimumSize()>();
        temp$26 = virtualinvoke temp$25.<java.awt.Dimension: double getWidth()>();
        temp$27 = (double) w;
        temp$28 = temp$27 cmpg temp$26;
        if temp$28 >= 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$29 = virtualinvoke frame.<javax.swing.JInternalFrame: java.awt.Dimension getMinimumSize()>();
        temp$30 = virtualinvoke temp$29.<java.awt.Dimension: double getWidth()>();
        temp$31 = (int) temp$30;
        w = temp$31;

     label5:
        nop;
        temp$32 = virtualinvoke frame.<javax.swing.JInternalFrame: java.awt.Dimension getMinimumSize()>();
        temp$33 = virtualinvoke temp$32.<java.awt.Dimension: double getHeight()>();
        temp$34 = (double) h;
        temp$35 = temp$34 cmpg temp$33;
        if temp$35 >= 0 goto label7;

        goto label6;

     label6:
        nop;
        temp$36 = virtualinvoke frame.<javax.swing.JInternalFrame: java.awt.Dimension getMinimumSize()>();
        temp$37 = virtualinvoke temp$36.<java.awt.Dimension: double getHeight()>();
        temp$38 = (int) temp$37;
        h = temp$38;

     label7:
        nop;
        virtualinvoke frame.<javax.swing.JInternalFrame: void setSize(int,int)>(w, h);

     label8:
        nop;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void moveToFront(java.awt.Component)>(frame);
        virtualinvoke frame.<javax.swing.JInternalFrame: void setVisible(boolean)>(1);

     label9:
        nop;
        virtualinvoke frame.<javax.swing.JInternalFrame: void setSelected(boolean)>(1);
        goto label11;

     label10:
        nop;
        e := @caughtexception;
        virtualinvoke frame.<javax.swing.JInternalFrame: void toBack()>();
        nop;
        goto label11;

     label11:
        nop;
        return retval;

        catch java.beans.PropertyVetoException from label9 to label10 with label10;
    }

    public void remove(java.awt.Component)
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        java.awt.Component c;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        c := @parameter0: java.awt.Component;
        specialinvoke this.<javax.swing.JDesktopPane: void remove(java.awt.Component)>(c);
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void checkDesktopSize()>();
        return;
    }

    public void cascadeFrames()
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        int x, y, frameHeight, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, frameWidth, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15, i, temp$16, temp$17, temp$19, temp$22, temp$24, temp$25, temp$26, temp$27, temp$28, temp$29, temp$30, temp$31;
        javax.swing.JInternalFrame[] allFrames, temp$0, temp$18, temp$21;
        CH.ifa.draw.contrib.MDIDesktopManager temp$1;
        java.awt.Rectangle temp$2, temp$9;
        javax.swing.JInternalFrame temp$20, temp$23;
        java.beans.PropertyVetoException e;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        x = 0;
        y = 0;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: javax.swing.JInternalFrame[] getAllFrames()>();
        allFrames = temp$0;
        temp$1 = this.<CH.ifa.draw.contrib.MDIDesktopPane: CH.ifa.draw.contrib.MDIDesktopManager manager>;
        virtualinvoke temp$1.<CH.ifa.draw.contrib.MDIDesktopManager: void setNormalSize()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: java.awt.Rectangle getBounds()>();
        temp$3 = temp$2.<java.awt.Rectangle: int height>;
        temp$4 = temp$3 - 5;
        temp$5 = lengthof allFrames;
        temp$6 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$7 = temp$5 * temp$6;
        temp$8 = temp$4 - temp$7;
        frameHeight = temp$8;
        temp$9 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: java.awt.Rectangle getBounds()>();
        temp$10 = temp$9.<java.awt.Rectangle: int width>;
        temp$11 = temp$10 - 5;
        temp$12 = lengthof allFrames;
        temp$13 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$14 = temp$12 * temp$13;
        temp$15 = temp$11 - temp$14;
        frameWidth = temp$15;
        temp$16 = lengthof allFrames;
        temp$17 = temp$16 - 1;
        i = temp$17;

     label0:
        nop;
        if i >= 0 goto label1;

        goto label5;

     label1:
        nop;

     label2:
        nop;
        temp$18 = allFrames;
        temp$19 = i;
        temp$20 = temp$18[temp$19];
        virtualinvoke temp$20.<javax.swing.JInternalFrame: void setMaximum(boolean)>(0);
        goto label4;

     label3:
        nop;
        e := @caughtexception;
        virtualinvoke e.<java.beans.PropertyVetoException: void printStackTrace()>();
        nop;
        goto label4;

     label4:
        nop;
        temp$21 = allFrames;
        temp$22 = i;
        temp$23 = temp$21[temp$22];
        virtualinvoke temp$23.<javax.swing.JInternalFrame: void setBounds(int,int,int,int)>(x, y, frameWidth, frameHeight);
        temp$24 = x;
        temp$25 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$26 = temp$24 + temp$25;
        x = temp$26;
        temp$27 = y;
        temp$28 = <CH.ifa.draw.contrib.MDIDesktopPane: int FRAME_OFFSET>;
        temp$29 = temp$27 + temp$28;
        y = temp$29;
        nop;
        temp$30 = i;
        temp$31 = temp$30 + -1;
        i = temp$31;
        goto label0;

     label5:
        nop;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void checkDesktopSize()>();
        return;

        catch java.beans.PropertyVetoException from label2 to label3 with label3;
    }

    public void tileFrames()
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        java.awt.Component[] allFrames, temp$7, temp$11;
        javax.swing.JInternalFrame[] temp$0;
        CH.ifa.draw.contrib.MDIDesktopManager temp$1;
        int frameHeight, temp$3, temp$4, temp$5, y, i, temp$6, temp$8, temp$12, temp$15, temp$16, temp$17, temp$18, temp$19;
        java.awt.Rectangle temp$2, temp$14;
        java.awt.Component temp$9, temp$13;
        javax.swing.JInternalFrame temp$10;
        java.beans.PropertyVetoException e;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: javax.swing.JInternalFrame[] getAllFrames()>();
        allFrames = temp$0;
        temp$1 = this.<CH.ifa.draw.contrib.MDIDesktopPane: CH.ifa.draw.contrib.MDIDesktopManager manager>;
        virtualinvoke temp$1.<CH.ifa.draw.contrib.MDIDesktopManager: void setNormalSize()>();
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: java.awt.Rectangle getBounds()>();
        temp$3 = temp$2.<java.awt.Rectangle: int height>;
        temp$4 = lengthof allFrames;
        temp$5 = temp$3 / temp$4;
        frameHeight = temp$5;
        y = 0;
        i = 0;

     label0:
        nop;
        temp$6 = lengthof allFrames;
        if i < temp$6 goto label1;

        goto label5;

     label1:
        nop;

     label2:
        nop;
        temp$7 = allFrames;
        temp$8 = i;
        temp$9 = temp$7[temp$8];
        temp$10 = (javax.swing.JInternalFrame) temp$9;
        virtualinvoke temp$10.<javax.swing.JInternalFrame: void setMaximum(boolean)>(0);
        goto label4;

     label3:
        nop;
        e := @caughtexception;
        virtualinvoke e.<java.beans.PropertyVetoException: void printStackTrace()>();
        nop;
        goto label4;

     label4:
        nop;
        temp$11 = allFrames;
        temp$12 = i;
        temp$13 = temp$11[temp$12];
        temp$14 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: java.awt.Rectangle getBounds()>();
        temp$15 = temp$14.<java.awt.Rectangle: int width>;
        virtualinvoke temp$13.<java.awt.Component: void setBounds(int,int,int,int)>(0, y, temp$15, frameHeight);
        temp$16 = y;
        temp$17 = temp$16 + frameHeight;
        y = temp$17;
        nop;
        temp$18 = i;
        temp$19 = temp$18 + 1;
        i = temp$19;
        goto label0;

     label5:
        nop;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void checkDesktopSize()>();
        return;

        catch java.beans.PropertyVetoException from label2 to label3 with label3;
    }

    public void setAllSize(java.awt.Dimension)
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        java.awt.Dimension d;
        int temp$0, temp$1;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        d := @parameter0: java.awt.Dimension;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setMinimumSize(java.awt.Dimension)>(d);
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setMaximumSize(java.awt.Dimension)>(d);
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setPreferredSize(java.awt.Dimension)>(d);
        temp$0 = d.<java.awt.Dimension: int width>;
        temp$1 = d.<java.awt.Dimension: int height>;
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setBounds(int,int,int,int)>(0, 0, temp$0, temp$1);
        return;
    }

    public void setAllSize(int, int)
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        int width, height;
        java.awt.Dimension temp$0;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        width := @parameter0: int;
        height := @parameter1: int;
        temp$0 = new java.awt.Dimension;
        specialinvoke temp$0.<java.awt.Dimension: void <init>(int,int)>(width, height);
        virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: void setAllSize(java.awt.Dimension)>(temp$0);
        return;
    }

    private final void checkDesktopSize()
    {
        CH.ifa.draw.contrib.MDIDesktopPane this;
        java.awt.Container temp$0;
        boolean temp$1;
        CH.ifa.draw.contrib.MDIDesktopManager temp$2;

        this := @this: CH.ifa.draw.contrib.MDIDesktopPane;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: java.awt.Container getParent()>();
        if temp$0 != null goto label0;

        goto label2;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.MDIDesktopPane: boolean isVisible()>();
        if temp$1 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.contrib.MDIDesktopPane: CH.ifa.draw.contrib.MDIDesktopManager manager>;
        virtualinvoke temp$2.<CH.ifa.draw.contrib.MDIDesktopManager: void resizeDesktop()>();

     label2:
        nop;
        return;
    }
}
