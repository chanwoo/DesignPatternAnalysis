public class CH.ifa.draw.contrib.PolygonFigure extends CH.ifa.draw.figures.AttributeFigure
{
    static final int TOO_CLOSE;
    private static final long serialVersionUID;
    private int polygonFigureSerializedDataVersion;
    private java.awt.Polygon fPoly;

    static void <clinit>()
    {
        int temp$0;
        long temp$1;

        temp$0 = 2;
        <CH.ifa.draw.contrib.PolygonFigure: int TOO_CLOSE> = temp$0;
        temp$1 = 6254089689239215026L;
        <CH.ifa.draw.contrib.PolygonFigure: long serialVersionUID> = temp$1;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int temp$0;
        java.awt.Polygon temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.contrib.PolygonFigure: int polygonFigureSerializedDataVersion> = temp$0;
        temp$1 = new java.awt.Polygon;
        specialinvoke temp$1.<java.awt.Polygon: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$1);
        return;
    }

    public void <init>(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        specialinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void <init>()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke temp$0.<java.awt.Polygon: void addPoint(int,int)>(x, y);
        return;
    }

    public void <init>(java.awt.Polygon)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon p, temp$1;
        int temp$0, temp$4;
        int[] temp$2, temp$3;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        p := @parameter0: java.awt.Polygon;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void <init>()>();
        temp$0 = 1;
        this.<CH.ifa.draw.contrib.PolygonFigure: int polygonFigureSerializedDataVersion> = temp$0;
        temp$1 = new java.awt.Polygon;
        temp$2 = p.<java.awt.Polygon: int[] xpoints>;
        temp$3 = p.<java.awt.Polygon: int[] ypoints>;
        temp$4 = p.<java.awt.Polygon: int npoints>;
        specialinvoke temp$1.<java.awt.Polygon: void <init>(int[],int[],int)>(temp$2, temp$3, temp$4);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$1);
        return;
    }

    public java.awt.Rectangle displayBox()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon temp$0;
        java.awt.Rectangle temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: java.awt.Rectangle bounds(java.awt.Polygon)>(temp$0);
        return temp$1;
    }

    public boolean isEmpty()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int temp$0, temp$2, temp$4;
        java.awt.Dimension temp$1, temp$3;
        boolean temp$5;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if temp$0 < 3 goto label3;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Dimension size()>();
        temp$2 = temp$1.<java.awt.Dimension: int width>;
        if temp$2 < 2 goto label1;

        goto label2;

     label1:
        nop;
        temp$3 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Dimension size()>();
        temp$4 = temp$3.<java.awt.Dimension: int height>;
        if temp$4 < 2 goto label3;

        goto label2;

        goto label3;

        goto label2;

     label2:
        nop;
        temp$5 = 0;
        goto label4;

     label3:
        nop;
        temp$5 = 1;

     label4:
        nop;
        return temp$5;
    }

    public java.util.Vector handles()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.util.Vector handles, temp$0;
        int temp$1, i, temp$2, temp$5, temp$6;
        CH.ifa.draw.contrib.PolygonHandle temp$3;
        CH.ifa.draw.framework.Locator temp$4;
        CH.ifa.draw.contrib.PolygonScaleHandle temp$7;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = new java.util.Vector;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(temp$1);
        handles = temp$0;
        i = 0;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if i < temp$2 goto label1;

        goto label2;

     label1:
        nop;
        temp$3 = new CH.ifa.draw.contrib.PolygonHandle;
        temp$4 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: CH.ifa.draw.framework.Locator locator(int)>(i);
        specialinvoke temp$3.<CH.ifa.draw.contrib.PolygonHandle: void <init>(CH.ifa.draw.contrib.PolygonFigure,CH.ifa.draw.framework.Locator,int)>(this, temp$4, i);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$3);
        nop;
        temp$5 = i;
        temp$6 = temp$5 + 1;
        i = temp$6;
        goto label0;

     label2:
        nop;
        temp$7 = new CH.ifa.draw.contrib.PolygonScaleHandle;
        specialinvoke temp$7.<CH.ifa.draw.contrib.PolygonScaleHandle: void <init>(CH.ifa.draw.contrib.PolygonFigure)>(this);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$7);
        return handles;
    }

    public void basicDisplayBox(java.awt.Point, java.awt.Point)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point origin, corner, oldCorner, temp$9;
        java.awt.Rectangle r, temp$0, temp$8;
        int dx, temp$1, temp$2, temp$3, dy, temp$4, temp$5, temp$6, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15;
        java.awt.Polygon temp$7, temp$16;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        origin := @parameter0: java.awt.Point;
        corner := @parameter1: java.awt.Point;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Rectangle displayBox()>();
        r = temp$0;
        temp$1 = origin.<java.awt.Point: int x>;
        temp$2 = r.<java.awt.Rectangle: int x>;
        temp$3 = temp$1 - temp$2;
        dx = temp$3;
        temp$4 = origin.<java.awt.Point: int y>;
        temp$5 = r.<java.awt.Rectangle: int y>;
        temp$6 = temp$4 - temp$5;
        dy = temp$6;
        temp$7 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke temp$7.<java.awt.Polygon: void translate(int,int)>(dx, dy);
        temp$8 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Rectangle displayBox()>();
        r = temp$8;
        temp$9 = new java.awt.Point;
        temp$10 = r.<java.awt.Rectangle: int x>;
        temp$11 = r.<java.awt.Rectangle: int width>;
        temp$12 = temp$10 + temp$11;
        temp$13 = r.<java.awt.Rectangle: int y>;
        temp$14 = r.<java.awt.Rectangle: int height>;
        temp$15 = temp$13 + temp$14;
        specialinvoke temp$9.<java.awt.Point: void <init>(int,int)>(temp$12, temp$15);
        oldCorner = temp$9;
        temp$16 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void scaleRotate(java.awt.Point,java.awt.Polygon,java.awt.Point)>(oldCorner, temp$16, corner);
        return;
    }

    public java.awt.Polygon getPolygon()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon temp$0, temp$1, temp$3, temp$5;
        int[] temp$2, temp$4;
        int temp$6;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = new java.awt.Polygon;
        temp$1 = this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon fPoly>;
        temp$2 = temp$1.<java.awt.Polygon: int[] xpoints>;
        temp$3 = this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon fPoly>;
        temp$4 = temp$3.<java.awt.Polygon: int[] ypoints>;
        temp$5 = this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon fPoly>;
        temp$6 = temp$5.<java.awt.Polygon: int npoints>;
        specialinvoke temp$0.<java.awt.Polygon: void <init>(int[],int[],int)>(temp$2, temp$4, temp$6);
        return temp$0;
    }

    protected void setInternalPolygon(java.awt.Polygon)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon newPolygon;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        newPolygon := @parameter0: java.awt.Polygon;
        this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon fPoly> = newPolygon;
        return;
    }

    public java.awt.Polygon getInternalPolygon()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon fPoly>;
        return temp$0;
    }

    public java.awt.Point center()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon temp$0;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: java.awt.Point center(java.awt.Polygon)>(temp$0);
        return temp$1;
    }

    public java.util.Enumeration points()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.util.Vector pts, temp$0;
        int temp$1, i, temp$2, temp$6, temp$7, temp$10, temp$11, temp$12;
        java.awt.Point temp$3;
        java.awt.Polygon temp$4, temp$8;
        int[] temp$5, temp$9;
        java.util.Enumeration temp$13;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = new java.util.Vector;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(temp$1);
        pts = temp$0;
        i = 0;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if i < temp$2 goto label1;

        goto label2;

     label1:
        nop;
        temp$3 = new java.awt.Point;
        temp$4 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$5 = temp$4.<java.awt.Polygon: int[] xpoints>;
        temp$6 = i;
        temp$7 = temp$5[temp$6];
        temp$8 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$9 = temp$8.<java.awt.Polygon: int[] ypoints>;
        temp$10 = i;
        temp$11 = temp$9[temp$10];
        specialinvoke temp$3.<java.awt.Point: void <init>(int,int)>(temp$7, temp$11);
        virtualinvoke pts.<java.util.Vector: void addElement(java.lang.Object)>(temp$3);
        nop;
        temp$12 = i + 1;
        i = temp$12;
        goto label0;

     label2:
        nop;
        temp$13 = virtualinvoke pts.<java.util.Vector: java.util.Enumeration elements()>();
        return temp$13;
    }

    public int pointCount()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Polygon temp$0;
        int temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = temp$0.<java.awt.Polygon: int npoints>;
        return temp$1;
    }

    public void basicMoveBy(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int dx, dy;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        dx := @parameter0: int;
        dy := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke temp$0.<java.awt.Polygon: void translate(int,int)>(dx, dy);
        return;
    }

    public void drawBackground(java.awt.Graphics)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Graphics g;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke g.<java.awt.Graphics: void fillPolygon(java.awt.Polygon)>(temp$0);
        return;
    }

    public void drawFrame(java.awt.Graphics)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Graphics g;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke g.<java.awt.Graphics: void drawPolygon(java.awt.Polygon)>(temp$0);
        return;
    }

    public boolean containsPoint(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y;
        java.awt.Polygon temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = virtualinvoke temp$0.<java.awt.Polygon: boolean contains(int,int)>(x, y);
        return temp$1;
    }

    public CH.ifa.draw.framework.Connector connectorAt(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y;
        CH.ifa.draw.contrib.ChopPolygonConnector temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = new CH.ifa.draw.contrib.ChopPolygonConnector;
        specialinvoke temp$0.<CH.ifa.draw.contrib.ChopPolygonConnector: void <init>(CH.ifa.draw.framework.Figure)>(this);
        return temp$0;
    }

    public void addPoint(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        virtualinvoke temp$0.<java.awt.Polygon: void addPoint(int,int)>(x, y);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public void setPointAt(java.awt.Point, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point p;
        int i, temp$2, temp$3, temp$6, temp$7;
        java.awt.Polygon temp$0, temp$4;
        int[] temp$1, temp$5;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        p := @parameter0: java.awt.Point;
        i := @parameter1: int;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void willChange()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = temp$0.<java.awt.Polygon: int[] xpoints>;
        temp$2 = i;
        temp$3 = p.<java.awt.Point: int x>;
        temp$1[temp$2] = temp$3;
        temp$4 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$5 = temp$4.<java.awt.Polygon: int[] ypoints>;
        temp$6 = i;
        temp$7 = p.<java.awt.Point: int y>;
        temp$5[temp$6] = temp$7;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public void insertPointAt(java.awt.Point, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point p;
        int i, n, temp$0, temp$1, j, temp$3, temp$6, temp$7, temp$9, temp$12, temp$13, temp$14, temp$16, temp$17, temp$19, temp$20, j, temp$21, temp$23, temp$24, temp$27, temp$28, temp$30, temp$31, temp$34, temp$35, temp$36;
        int[] xs, ys, temp$2, temp$5, temp$8, temp$11, temp$15, temp$18, temp$22, temp$26, temp$29, temp$33;
        java.awt.Polygon temp$4, temp$10, temp$25, temp$32, temp$37;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        p := @parameter0: java.awt.Point;
        i := @parameter1: int;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void willChange()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        temp$1 = temp$0;
        n = temp$1 + 1;
        xs = newarray (int)[n];
        ys = newarray (int)[n];
        j = 0;

     label0:
        nop;
        if j < i goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = xs;
        temp$3 = j;
        temp$4 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$5 = temp$4.<java.awt.Polygon: int[] xpoints>;
        temp$6 = j;
        temp$7 = temp$5[temp$6];
        temp$2[temp$3] = temp$7;
        temp$8 = ys;
        temp$9 = j;
        temp$10 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$11 = temp$10.<java.awt.Polygon: int[] ypoints>;
        temp$12 = j;
        temp$13 = temp$11[temp$12];
        temp$8[temp$9] = temp$13;
        nop;
        temp$14 = j + 1;
        j = temp$14;
        goto label0;

     label2:
        nop;
        temp$15 = xs;
        temp$16 = i;
        temp$17 = p.<java.awt.Point: int x>;
        temp$15[temp$16] = temp$17;
        temp$18 = ys;
        temp$19 = i;
        temp$20 = p.<java.awt.Point: int y>;
        temp$18[temp$19] = temp$20;
        j = i;

     label3:
        nop;
        temp$21 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if j < temp$21 goto label4;

        goto label5;

     label4:
        nop;
        temp$22 = xs;
        temp$23 = j;
        temp$24 = temp$23 + 1;
        temp$25 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$26 = temp$25.<java.awt.Polygon: int[] xpoints>;
        temp$27 = j;
        temp$28 = temp$26[temp$27];
        temp$22[temp$24] = temp$28;
        temp$29 = ys;
        temp$30 = j;
        temp$31 = temp$30 + 1;
        temp$32 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$33 = temp$32.<java.awt.Polygon: int[] ypoints>;
        temp$34 = j;
        temp$35 = temp$33[temp$34];
        temp$29[temp$31] = temp$35;
        nop;
        temp$36 = j + 1;
        j = temp$36;
        goto label3;

     label5:
        nop;
        temp$37 = new java.awt.Polygon;
        specialinvoke temp$37.<java.awt.Polygon: void <init>(int[],int[],int)>(xs, ys, n);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$37);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public void removePointAt(int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int i, n, temp$0, temp$1, j, temp$3, temp$6, temp$7, temp$9, temp$12, temp$13, temp$14, j, temp$16, temp$19, temp$20, temp$21, temp$23, temp$26, temp$27, temp$28, temp$29;
        int[] xs, ys, temp$2, temp$5, temp$8, temp$11, temp$15, temp$18, temp$22, temp$25;
        java.awt.Polygon temp$4, temp$10, temp$17, temp$24, temp$30;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        i := @parameter0: int;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void willChange()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        temp$1 = temp$0 - 1;
        n = temp$1;
        xs = newarray (int)[n];
        ys = newarray (int)[n];
        j = 0;

     label0:
        nop;
        if j < i goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = xs;
        temp$3 = j;
        temp$4 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$5 = temp$4.<java.awt.Polygon: int[] xpoints>;
        temp$6 = j;
        temp$7 = temp$5[temp$6];
        temp$2[temp$3] = temp$7;
        temp$8 = ys;
        temp$9 = j;
        temp$10 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$11 = temp$10.<java.awt.Polygon: int[] ypoints>;
        temp$12 = j;
        temp$13 = temp$11[temp$12];
        temp$8[temp$9] = temp$13;
        nop;
        temp$14 = j + 1;
        j = temp$14;
        goto label0;

     label2:
        nop;
        j = i;

     label3:
        nop;
        if j < n goto label4;

        goto label5;

     label4:
        nop;
        temp$15 = xs;
        temp$16 = j;
        temp$17 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$18 = temp$17.<java.awt.Polygon: int[] xpoints>;
        temp$19 = j;
        temp$20 = temp$19 + 1;
        temp$21 = temp$18[temp$20];
        temp$15[temp$16] = temp$21;
        temp$22 = ys;
        temp$23 = j;
        temp$24 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$25 = temp$24.<java.awt.Polygon: int[] ypoints>;
        temp$26 = j;
        temp$27 = temp$26 + 1;
        temp$28 = temp$25[temp$27];
        temp$22[temp$23] = temp$28;
        nop;
        temp$29 = j + 1;
        j = temp$29;
        goto label3;

     label5:
        nop;
        temp$30 = new java.awt.Polygon;
        specialinvoke temp$30.<java.awt.Polygon: void <init>(int[],int[],int)>(xs, ys, n);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$30);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public void scaleRotate(java.awt.Point, java.awt.Polygon, java.awt.Point)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point anchor, p, ctr, temp$0;
        java.awt.Polygon originalPolygon, temp$68;
        double anchorLen, newLen, ratio, temp$12, anchorAngle, temp$16, temp$20, temp$21, newAngle, temp$25, temp$29, temp$30, rotation, temp$31, l, temp$39, temp$40, a, temp$43, temp$46, temp$47, temp$48, temp$52, temp$53, temp$54, temp$55, temp$56, temp$61, temp$62, temp$63, temp$64, temp$65;
        int temp$1, temp$2, temp$3, temp$4, temp$6, temp$7, temp$8, temp$9, temp$10, temp$13, temp$14, temp$15, temp$17, temp$18, temp$19, temp$22, temp$23, temp$24, temp$26, temp$27, temp$28, n, i, x, temp$33, y, temp$35, temp$36, temp$37, temp$41, temp$42, temp$44, temp$45, temp$50, temp$51, temp$57, temp$59, temp$60, temp$66, temp$67;
        long temp$5, temp$11, temp$38;
        int[] xs, ys, temp$32, temp$34, temp$49, temp$58;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        anchor := @parameter0: java.awt.Point;
        originalPolygon := @parameter1: java.awt.Polygon;
        p := @parameter2: java.awt.Point;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void willChange()>();
        temp$0 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: java.awt.Point center(java.awt.Polygon)>(originalPolygon);
        ctr = temp$0;
        temp$1 = ctr.<java.awt.Point: int x>;
        temp$2 = ctr.<java.awt.Point: int y>;
        temp$3 = anchor.<java.awt.Point: int x>;
        temp$4 = anchor.<java.awt.Point: int y>;
        temp$5 = staticinvoke <CH.ifa.draw.util.Geom: long length(int,int,int,int)>(temp$1, temp$2, temp$3, temp$4);
        anchorLen = (double) temp$5;
        temp$6 = anchorLen cmpl 0.0;
        if temp$6 <= 0 goto label4;

        goto label0;

     label0:
        nop;
        temp$7 = ctr.<java.awt.Point: int x>;
        temp$8 = ctr.<java.awt.Point: int y>;
        temp$9 = p.<java.awt.Point: int x>;
        temp$10 = p.<java.awt.Point: int y>;
        temp$11 = staticinvoke <CH.ifa.draw.util.Geom: long length(int,int,int,int)>(temp$7, temp$8, temp$9, temp$10);
        newLen = (double) temp$11;
        temp$12 = newLen / anchorLen;
        ratio = temp$12;
        temp$13 = anchor.<java.awt.Point: int y>;
        temp$14 = ctr.<java.awt.Point: int y>;
        temp$15 = temp$13 - temp$14;
        temp$16 = (double) temp$15;
        temp$17 = anchor.<java.awt.Point: int x>;
        temp$18 = ctr.<java.awt.Point: int x>;
        temp$19 = temp$17 - temp$18;
        temp$20 = (double) temp$19;
        temp$21 = staticinvoke <java.lang.Math: double atan2(double,double)>(temp$16, temp$20);
        anchorAngle = temp$21;
        temp$22 = p.<java.awt.Point: int y>;
        temp$23 = ctr.<java.awt.Point: int y>;
        temp$24 = temp$22 - temp$23;
        temp$25 = (double) temp$24;
        temp$26 = p.<java.awt.Point: int x>;
        temp$27 = ctr.<java.awt.Point: int x>;
        temp$28 = temp$26 - temp$27;
        temp$29 = (double) temp$28;
        temp$30 = staticinvoke <java.lang.Math: double atan2(double,double)>(temp$25, temp$29);
        newAngle = temp$30;
        temp$31 = newAngle - anchorAngle;
        rotation = temp$31;
        n = originalPolygon.<java.awt.Polygon: int npoints>;
        xs = newarray (int)[n];
        ys = newarray (int)[n];
        i = 0;

     label1:
        nop;
        if i < n goto label2;

        goto label3;

     label2:
        nop;
        temp$32 = originalPolygon.<java.awt.Polygon: int[] xpoints>;
        temp$33 = i;
        x = temp$32[temp$33];
        temp$34 = originalPolygon.<java.awt.Polygon: int[] ypoints>;
        temp$35 = i;
        y = temp$34[temp$35];
        temp$36 = ctr.<java.awt.Point: int x>;
        temp$37 = ctr.<java.awt.Point: int y>;
        temp$38 = staticinvoke <CH.ifa.draw.util.Geom: long length(int,int,int,int)>(temp$36, temp$37, x, y);
        temp$39 = (double) temp$38;
        temp$40 = temp$39 * ratio;
        l = temp$40;
        temp$41 = ctr.<java.awt.Point: int y>;
        temp$42 = y - temp$41;
        temp$43 = (double) temp$42;
        temp$44 = ctr.<java.awt.Point: int x>;
        temp$45 = x - temp$44;
        temp$46 = (double) temp$45;
        temp$47 = staticinvoke <java.lang.Math: double atan2(double,double)>(temp$43, temp$46);
        temp$48 = temp$47;
        a = temp$48 + rotation;
        temp$49 = xs;
        temp$50 = i;
        temp$51 = ctr.<java.awt.Point: int x>;
        temp$52 = (double) temp$51;
        temp$53 = staticinvoke <java.lang.Math: double cos(double)>(a);
        temp$54 = l * temp$53;
        temp$55 = temp$52 + temp$54;
        temp$56 = temp$55 + 0.5;
        temp$57 = (int) temp$56;
        temp$49[temp$50] = temp$57;
        temp$58 = ys;
        temp$59 = i;
        temp$60 = ctr.<java.awt.Point: int y>;
        temp$61 = (double) temp$60;
        temp$62 = staticinvoke <java.lang.Math: double sin(double)>(a);
        temp$63 = l * temp$62;
        temp$64 = temp$61 + temp$63;
        temp$65 = temp$64 + 0.5;
        temp$66 = (int) temp$65;
        temp$58[temp$59] = temp$66;
        nop;
        temp$67 = i + 1;
        i = temp$67;
        goto label1;

     label3:
        nop;
        temp$68 = new java.awt.Polygon;
        specialinvoke temp$68.<java.awt.Polygon: void <init>(int[],int[],int)>(xs, ys, n);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$68);

     label4:
        nop;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public void smoothPoints()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        boolean removed, temp$1, temp$35;
        int n, temp$0, i, nxt, temp$2, temp$3, temp$4, prv, temp$5, temp$6, temp$7, temp$8, temp$11, temp$12, temp$15, temp$16, temp$19, temp$20, temp$23, temp$24, temp$27, temp$28, temp$31, temp$32, temp$34, temp$36, j, temp$39, temp$42, temp$43, temp$44, temp$47, temp$50, temp$51, temp$52, temp$53, temp$54, temp$55;
        java.awt.Polygon temp$9, temp$13, temp$17, temp$21, temp$25, temp$29, temp$37, temp$40, temp$45, temp$48, temp$56, temp$57, temp$59;
        int[] temp$10, temp$14, temp$18, temp$22, temp$26, temp$30, temp$38, temp$41, temp$46, temp$49, temp$58, temp$60;
        double temp$33;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void willChange()>();
        removed = 0;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        n = temp$0;

     label0:
        nop;
        temp$1 = 0;
        removed = temp$1;
        i = 0;

     label1:
        nop;
        if i < n goto label2;

        goto label10;

     label2:
        nop;
        if n >= 3 goto label3;

        goto label10;

        goto label3;

     label3:
        nop;
        temp$2 = i;
        temp$3 = temp$2 + 1;
        temp$4 = temp$3 % n;
        nxt = temp$4;
        temp$5 = i - 1;
        temp$6 = temp$5;
        temp$7 = temp$6 + n;
        temp$8 = temp$7 % n;
        prv = temp$8;
        temp$9 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$10 = temp$9.<java.awt.Polygon: int[] xpoints>;
        temp$11 = prv;
        temp$12 = temp$10[temp$11];
        temp$13 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$14 = temp$13.<java.awt.Polygon: int[] ypoints>;
        temp$15 = prv;
        temp$16 = temp$14[temp$15];
        temp$17 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$18 = temp$17.<java.awt.Polygon: int[] xpoints>;
        temp$19 = nxt;
        temp$20 = temp$18[temp$19];
        temp$21 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$22 = temp$21.<java.awt.Polygon: int[] ypoints>;
        temp$23 = nxt;
        temp$24 = temp$22[temp$23];
        temp$25 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$26 = temp$25.<java.awt.Polygon: int[] xpoints>;
        temp$27 = i;
        temp$28 = temp$26[temp$27];
        temp$29 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$30 = temp$29.<java.awt.Polygon: int[] ypoints>;
        temp$31 = i;
        temp$32 = temp$30[temp$31];
        temp$33 = staticinvoke <CH.ifa.draw.util.Geom: double distanceFromLine(int,int,int,int,int,int)>(temp$12, temp$16, temp$20, temp$24, temp$28, temp$32);
        temp$34 = temp$33 cmpg 2.0;
        if temp$34 >= 0 goto label8;

        goto label4;

     label4:
        nop;
        temp$35 = 1;
        removed = temp$35;
        temp$36 = n + -1;
        n = temp$36;
        j = i;

     label5:
        nop;
        if j < n goto label6;

        goto label7;

     label6:
        nop;
        temp$37 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$38 = temp$37.<java.awt.Polygon: int[] xpoints>;
        temp$39 = j;
        temp$40 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$41 = temp$40.<java.awt.Polygon: int[] xpoints>;
        temp$42 = j;
        temp$43 = temp$42 + 1;
        temp$44 = temp$41[temp$43];
        temp$38[temp$39] = temp$44;
        temp$45 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$46 = temp$45.<java.awt.Polygon: int[] ypoints>;
        temp$47 = j;
        temp$48 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$49 = temp$48.<java.awt.Polygon: int[] ypoints>;
        temp$50 = j;
        temp$51 = temp$50 + 1;
        temp$52 = temp$49[temp$51];
        temp$46[temp$47] = temp$52;
        nop;
        temp$53 = j + 1;
        j = temp$53;
        goto label5;

     label7:
        nop;
        goto label9;

     label8:
        nop;
        temp$54 = i + 1;
        i = temp$54;

     label9:
        nop;
        goto label1;

     label10:
        nop;
        nop;
        if removed == 0 goto label11;

        goto label0;

     label11:
        nop;
        temp$55 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if n != temp$55 goto label12;

        goto label13;

     label12:
        nop;
        temp$56 = new java.awt.Polygon;
        temp$57 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$58 = temp$57.<java.awt.Polygon: int[] xpoints>;
        temp$59 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$60 = temp$59.<java.awt.Polygon: int[] ypoints>;
        specialinvoke temp$56.<java.awt.Polygon: void <init>(int[],int[],int)>(temp$58, temp$60, n);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$56);

     label13:
        nop;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void changed()>();
        return;
    }

    public int splitSegment(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y, i, temp$0, temp$2, temp$3, temp$4, temp$5, temp$6;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int findSegment(int,int)>(x, y);
        i = temp$0;
        if i != -1 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.awt.Point;
        specialinvoke temp$1.<java.awt.Point: void <init>(int,int)>(x, y);
        temp$2 = i;
        temp$3 = temp$2 + 1;
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void insertPointAt(java.awt.Point,int)>(temp$1, temp$3);
        temp$4 = i;
        temp$5 = temp$4 + 1;
        return temp$5;

     label1:
        nop;
        temp$6 = -1;
        return temp$6;
    }

    public java.awt.Point pointAt(int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int i, temp$3, temp$4, temp$7, temp$8;
        java.awt.Point temp$0;
        java.awt.Polygon temp$1, temp$5;
        int[] temp$2, temp$6;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        i := @parameter0: int;
        temp$0 = new java.awt.Point;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$2 = temp$1.<java.awt.Polygon: int[] xpoints>;
        temp$3 = i;
        temp$4 = temp$2[temp$3];
        temp$5 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$6 = temp$5.<java.awt.Polygon: int[] ypoints>;
        temp$7 = i;
        temp$8 = temp$6[temp$7];
        specialinvoke temp$0.<java.awt.Point: void <init>(int,int)>(temp$4, temp$8);
        return temp$0;
    }

    public java.awt.Point outermostPoint()
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point ctr, temp$0, temp$15;
        int outer, i, temp$1, temp$2, temp$3, temp$6, temp$7, temp$10, temp$11, temp$13, temp$14, temp$18, temp$19, temp$22, temp$23;
        long dist, d, temp$12;
        java.awt.Polygon temp$4, temp$8, temp$16, temp$20;
        int[] temp$5, temp$9, temp$17, temp$21;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Point center()>();
        ctr = temp$0;
        outer = 0;
        dist = 0L;
        i = 0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if i < temp$1 goto label1;

        goto label4;

     label1:
        nop;
        temp$2 = ctr.<java.awt.Point: int x>;
        temp$3 = ctr.<java.awt.Point: int y>;
        temp$4 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$5 = temp$4.<java.awt.Polygon: int[] xpoints>;
        temp$6 = i;
        temp$7 = temp$5[temp$6];
        temp$8 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$9 = temp$8.<java.awt.Polygon: int[] ypoints>;
        temp$10 = i;
        temp$11 = temp$9[temp$10];
        temp$12 = staticinvoke <CH.ifa.draw.util.Geom: long length2(int,int,int,int)>(temp$2, temp$3, temp$7, temp$11);
        d = temp$12;
        temp$13 = d cmp dist;
        if temp$13 <= 0 goto label3;

        goto label2;

     label2:
        nop;
        dist = d;
        outer = i;

     label3:
        nop;
        nop;
        temp$14 = i + 1;
        i = temp$14;
        goto label0;

     label4:
        nop;
        temp$15 = new java.awt.Point;
        temp$16 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$17 = temp$16.<java.awt.Polygon: int[] xpoints>;
        temp$18 = outer;
        temp$19 = temp$17[temp$18];
        temp$20 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$21 = temp$20.<java.awt.Polygon: int[] ypoints>;
        temp$22 = outer;
        temp$23 = temp$21[temp$22];
        specialinvoke temp$15.<java.awt.Point: void <init>(int,int)>(temp$19, temp$23);
        return temp$15;
    }

    public int findSegment(int, int)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        int x, y, best, i, temp$0, n, temp$1, temp$2, temp$3, temp$4, temp$7, temp$8, temp$11, temp$12, temp$15, temp$16, temp$19, temp$20, temp$22, temp$23, temp$24;
        double dist, d, temp$21;
        java.awt.Polygon temp$5, temp$9, temp$13, temp$17;
        int[] temp$6, temp$10, temp$14, temp$18;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        dist = 2.0;
        best = -1;
        i = 0;

     label0:
        nop;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if i < temp$0 goto label1;

        goto label4;

     label1:
        nop;
        temp$1 = i;
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        temp$3 = temp$1 + 1;
        temp$4 = temp$3 % temp$2;
        n = temp$4;
        temp$5 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$6 = temp$5.<java.awt.Polygon: int[] xpoints>;
        temp$7 = i;
        temp$8 = temp$6[temp$7];
        temp$9 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$10 = temp$9.<java.awt.Polygon: int[] ypoints>;
        temp$11 = i;
        temp$12 = temp$10[temp$11];
        temp$13 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$14 = temp$13.<java.awt.Polygon: int[] xpoints>;
        temp$15 = n;
        temp$16 = temp$14[temp$15];
        temp$17 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$18 = temp$17.<java.awt.Polygon: int[] ypoints>;
        temp$19 = n;
        temp$20 = temp$18[temp$19];
        temp$21 = staticinvoke <CH.ifa.draw.util.Geom: double distanceFromLine(int,int,int,int,int,int)>(temp$8, temp$12, temp$16, temp$20, x, y);
        d = temp$21;
        temp$22 = d cmpg dist;
        if temp$22 >= 0 goto label3;

        goto label2;

     label2:
        nop;
        dist = d;
        best = i;

     label3:
        nop;
        nop;
        temp$23 = i;
        temp$24 = temp$23 + 1;
        i = temp$24;
        goto label0;

     label4:
        nop;
        return best;
    }

    public java.awt.Point chop(java.awt.Point)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        java.awt.Point p, temp$1;
        java.awt.Polygon temp$0;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        p := @parameter0: java.awt.Point;
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$1 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: java.awt.Point chop(java.awt.Polygon,java.awt.Point)>(temp$0, p);
        return temp$1;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        CH.ifa.draw.util.StorableOutput dw;
        int temp$0, i, temp$1, temp$4, temp$5, temp$8, temp$9, temp$10;
        java.awt.Polygon temp$2, temp$6;
        int[] temp$3, temp$7;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void write(CH.ifa.draw.util.StorableOutput)>(dw);
        temp$0 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$0);
        i = 0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: int pointCount()>();
        if i < temp$1 goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$3 = temp$2.<java.awt.Polygon: int[] xpoints>;
        temp$4 = i;
        temp$5 = temp$3[temp$4];
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$5);
        temp$6 = virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: java.awt.Polygon getInternalPolygon()>();
        temp$7 = temp$6.<java.awt.Polygon: int[] ypoints>;
        temp$8 = i;
        temp$9 = temp$7[temp$8];
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$9);
        nop;
        temp$10 = i + 1;
        i = temp$10;
        goto label0;

     label2:
        nop;
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.contrib.PolygonFigure this;
        CH.ifa.draw.util.StorableInput dr;
        int size, temp$0, i, temp$2, temp$3, temp$5, temp$6, temp$7, temp$8;
        int[] xs, ys, temp$1, temp$4;
        java.awt.Polygon temp$9;

        this := @this: CH.ifa.draw.contrib.PolygonFigure;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        specialinvoke this.<CH.ifa.draw.figures.AttributeFigure: void read(CH.ifa.draw.util.StorableInput)>(dr);
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        size = temp$0;
        xs = newarray (int)[size];
        ys = newarray (int)[size];
        i = 0;

     label0:
        nop;
        if i < size goto label1;

        goto label2;

     label1:
        nop;
        temp$1 = xs;
        temp$2 = i;
        temp$3 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$1[temp$2] = temp$3;
        temp$4 = ys;
        temp$5 = i;
        temp$6 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        temp$4[temp$5] = temp$6;
        nop;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        i = temp$8;
        goto label0;

     label2:
        nop;
        temp$9 = new java.awt.Polygon;
        specialinvoke temp$9.<java.awt.Polygon: void <init>(int[],int[],int)>(xs, ys, size);
        virtualinvoke this.<CH.ifa.draw.contrib.PolygonFigure: void setInternalPolygon(java.awt.Polygon)>(temp$9);
        return;
    }

    public static CH.ifa.draw.framework.Locator locator(int)
    {
        int pointIndex;
        CH.ifa.draw.contrib.PolygonFigure$1Anonymous0 temp$0;

        pointIndex := @parameter0: int;
        temp$0 = new CH.ifa.draw.contrib.PolygonFigure$1Anonymous0;
        specialinvoke temp$0.<CH.ifa.draw.contrib.PolygonFigure$1Anonymous0: void <init>(int)>(pointIndex);
        return temp$0;
    }

    public static java.awt.Rectangle bounds(java.awt.Polygon)
    {
        java.awt.Polygon p;
        int minx, miny, maxx, maxy, n, i, x, temp$1, y, temp$3, temp$4, temp$5, temp$7, temp$8;
        int[] temp$0, temp$2;
        java.awt.Rectangle temp$6;

        p := @parameter0: java.awt.Polygon;
        minx = 2147483647;
        miny = 2147483647;
        maxx = -2147483648;
        maxy = -2147483648;
        n = p.<java.awt.Polygon: int npoints>;
        i = 0;

     label0:
        nop;
        if i < n goto label1;

        goto label10;

     label1:
        nop;
        temp$0 = p.<java.awt.Polygon: int[] xpoints>;
        temp$1 = i;
        x = temp$0[temp$1];
        temp$2 = p.<java.awt.Polygon: int[] ypoints>;
        temp$3 = i;
        y = temp$2[temp$3];
        if x > maxx goto label2;

        goto label3;

     label2:
        nop;
        maxx = x;

     label3:
        nop;
        if x < minx goto label4;

        goto label5;

     label4:
        nop;
        minx = x;

     label5:
        nop;
        if y > maxy goto label6;

        goto label7;

     label6:
        nop;
        maxy = y;

     label7:
        nop;
        if y < miny goto label8;

        goto label9;

     label8:
        nop;
        miny = y;

     label9:
        nop;
        nop;
        temp$4 = i;
        temp$5 = temp$4 + 1;
        i = temp$5;
        goto label0;

     label10:
        nop;
        temp$6 = new java.awt.Rectangle;
        temp$7 = maxx - minx;
        temp$8 = maxy - miny;
        specialinvoke temp$6.<java.awt.Rectangle: void <init>(int,int,int,int)>(minx, miny, temp$7, temp$8);
        return temp$6;
    }

    public static java.awt.Point center(java.awt.Polygon)
    {
        java.awt.Polygon p;
        long sx, sy, temp$0, temp$4, temp$5, temp$6, temp$10, temp$11, temp$15, temp$16, temp$18, temp$19;
        int n, i, temp$2, temp$3, temp$8, temp$9, temp$12, temp$13, temp$17, temp$20;
        int[] temp$1, temp$7;
        java.awt.Point temp$14;

        p := @parameter0: java.awt.Polygon;
        sx = 0L;
        sy = 0L;
        n = p.<java.awt.Polygon: int npoints>;
        i = 0;

     label0:
        nop;
        if i < n goto label1;

        goto label2;

     label1:
        nop;
        temp$0 = sx;
        temp$1 = p.<java.awt.Polygon: int[] xpoints>;
        temp$2 = i;
        temp$3 = temp$1[temp$2];
        temp$4 = (long) temp$3;
        temp$5 = temp$0 + temp$4;
        sx = temp$5;
        temp$6 = sy;
        temp$7 = p.<java.awt.Polygon: int[] ypoints>;
        temp$8 = i;
        temp$9 = temp$7[temp$8];
        temp$10 = (long) temp$9;
        temp$11 = temp$6 + temp$10;
        sy = temp$11;
        nop;
        temp$12 = i;
        temp$13 = temp$12 + 1;
        i = temp$13;
        goto label0;

     label2:
        nop;
        temp$14 = new java.awt.Point;
        temp$15 = (long) n;
        temp$16 = sx / temp$15;
        temp$17 = (int) temp$16;
        temp$18 = (long) n;
        temp$19 = sy / temp$18;
        temp$20 = (int) temp$19;
        specialinvoke temp$14.<java.awt.Point: void <init>(int,int)>(temp$17, temp$20);
        return temp$14;
    }

    public static java.awt.Point chop(java.awt.Polygon, java.awt.Point)
    {
        java.awt.Polygon poly;
        java.awt.Point p, ctr, temp$0, chop, temp$22, temp$50;
        int cx, cy, i, temp$1, nxt, temp$2, temp$3, temp$4, temp$5, temp$7, temp$8, temp$10, temp$11, temp$13, temp$14, temp$16, temp$17, temp$18, temp$19, temp$20, temp$21, temp$23, temp$24, temp$25, temp$26, temp$28, temp$29, temp$30, temp$31, i, temp$32, temp$34, temp$35, temp$37, temp$38, temp$39, temp$40, temp$42, temp$44, temp$45, temp$47, temp$48, temp$49;
        long len, cl, temp$27, l, temp$41;
        int[] temp$6, temp$9, temp$12, temp$15, temp$33, temp$36, temp$43, temp$46;

        poly := @parameter0: java.awt.Polygon;
        p := @parameter1: java.awt.Point;
        temp$0 = staticinvoke <CH.ifa.draw.contrib.PolygonFigure: java.awt.Point center(java.awt.Polygon)>(poly);
        ctr = temp$0;
        cx = -1;
        cy = -1;
        len = 9223372036854775807L;
        i = 0;

     label0:
        nop;
        temp$1 = poly.<java.awt.Polygon: int npoints>;
        if i < temp$1 goto label1;

        goto label6;

     label1:
        nop;
        temp$2 = i;
        temp$3 = temp$2 + 1;
        temp$4 = poly.<java.awt.Polygon: int npoints>;
        temp$5 = temp$3 % temp$4;
        nxt = temp$5;
        temp$6 = poly.<java.awt.Polygon: int[] xpoints>;
        temp$7 = i;
        temp$8 = temp$6[temp$7];
        temp$9 = poly.<java.awt.Polygon: int[] ypoints>;
        temp$10 = i;
        temp$11 = temp$9[temp$10];
        temp$12 = poly.<java.awt.Polygon: int[] xpoints>;
        temp$13 = nxt;
        temp$14 = temp$12[temp$13];
        temp$15 = poly.<java.awt.Polygon: int[] ypoints>;
        temp$16 = nxt;
        temp$17 = temp$15[temp$16];
        temp$18 = p.<java.awt.Point: int x>;
        temp$19 = p.<java.awt.Point: int y>;
        temp$20 = ctr.<java.awt.Point: int x>;
        temp$21 = ctr.<java.awt.Point: int y>;
        temp$22 = staticinvoke <CH.ifa.draw.util.Geom: java.awt.Point intersect(int,int,int,int,int,int,int,int)>(temp$8, temp$11, temp$14, temp$17, temp$18, temp$19, temp$20, temp$21);
        chop = temp$22;
        if chop != null goto label2;

        goto label5;

     label2:
        nop;
        temp$23 = chop.<java.awt.Point: int x>;
        temp$24 = chop.<java.awt.Point: int y>;
        temp$25 = p.<java.awt.Point: int x>;
        temp$26 = p.<java.awt.Point: int y>;
        temp$27 = staticinvoke <CH.ifa.draw.util.Geom: long length2(int,int,int,int)>(temp$23, temp$24, temp$25, temp$26);
        cl = temp$27;
        temp$28 = cl cmp len;
        if temp$28 >= 0 goto label4;

        goto label3;

     label3:
        nop;
        len = cl;
        temp$29 = chop.<java.awt.Point: int x>;
        cx = temp$29;
        temp$30 = chop.<java.awt.Point: int y>;
        cy = temp$30;

     label4:
        nop;

     label5:
        nop;
        nop;
        temp$31 = i + 1;
        i = temp$31;
        goto label0;

     label6:
        nop;
        i = 0;

     label7:
        nop;
        temp$32 = poly.<java.awt.Polygon: int npoints>;
        if i < temp$32 goto label8;

        goto label11;

     label8:
        nop;
        temp$33 = poly.<java.awt.Polygon: int[] xpoints>;
        temp$34 = i;
        temp$35 = temp$33[temp$34];
        temp$36 = poly.<java.awt.Polygon: int[] ypoints>;
        temp$37 = i;
        temp$38 = temp$36[temp$37];
        temp$39 = p.<java.awt.Point: int x>;
        temp$40 = p.<java.awt.Point: int y>;
        temp$41 = staticinvoke <CH.ifa.draw.util.Geom: long length2(int,int,int,int)>(temp$35, temp$38, temp$39, temp$40);
        l = temp$41;
        temp$42 = l cmp len;
        if temp$42 >= 0 goto label10;

        goto label9;

     label9:
        nop;
        len = l;
        temp$43 = poly.<java.awt.Polygon: int[] xpoints>;
        temp$44 = i;
        temp$45 = temp$43[temp$44];
        cx = temp$45;
        temp$46 = poly.<java.awt.Polygon: int[] ypoints>;
        temp$47 = i;
        temp$48 = temp$46[temp$47];
        cy = temp$48;

     label10:
        nop;
        nop;
        temp$49 = i + 1;
        i = temp$49;
        goto label7;

     label11:
        nop;
        temp$50 = new java.awt.Point;
        specialinvoke temp$50.<java.awt.Point: void <init>(int,int)>(cx, cy);
        return temp$50;
    }
}
