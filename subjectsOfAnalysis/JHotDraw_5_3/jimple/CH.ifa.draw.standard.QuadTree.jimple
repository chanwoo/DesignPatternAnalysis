class CH.ifa.draw.standard.QuadTree extends java.lang.Object
{
    private java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D;
    private int _nMaxTreeDepth;
    private java.util.Hashtable _theHashtable;
    private java.util.Hashtable _outsideHashtable;
    private CH.ifa.draw.standard.QuadTree _nwQuadTree;
    private CH.ifa.draw.standard.QuadTree _neQuadTree;
    private CH.ifa.draw.standard.QuadTree _swQuadTree;
    private CH.ifa.draw.standard.QuadTree _seQuadTree;

    public void <init>(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D absoluteBoundingRectangle2D;

        this := @this: CH.ifa.draw.standard.QuadTree;
        absoluteBoundingRectangle2D := @parameter0: java.awt.geom.Rectangle2D;
        specialinvoke this.<CH.ifa.draw.standard.QuadTree: void <init>(int,java.awt.geom.Rectangle2D)>(6, absoluteBoundingRectangle2D);
        return;
    }

    public void <init>(int, java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        int nMaxTreeDepth;
        java.awt.geom.Rectangle2D absoluteBoundingRectangle2D;
        java.awt.geom.Rectangle2D$Double temp$0;
        java.util.Hashtable temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.QuadTree;
        nMaxTreeDepth := @parameter0: int;
        absoluteBoundingRectangle2D := @parameter1: java.awt.geom.Rectangle2D;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D> = temp$0;
        temp$1 = new java.util.Hashtable;
        specialinvoke temp$1.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable> = temp$1;
        temp$2 = new java.util.Hashtable;
        specialinvoke temp$2.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable> = temp$2;
        virtualinvoke this.<CH.ifa.draw.standard.QuadTree: void _init(int,java.awt.geom.Rectangle2D)>(nMaxTreeDepth, absoluteBoundingRectangle2D);
        return;
    }

    private void <init>()
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D$Double temp$0;
        java.util.Hashtable temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.QuadTree;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D> = temp$0;
        temp$1 = new java.util.Hashtable;
        specialinvoke temp$1.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable> = temp$1;
        temp$2 = new java.util.Hashtable;
        specialinvoke temp$2.<java.util.Hashtable: void <init>()>();
        this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable> = temp$2;
        return;
    }

    public void add(java.lang.Object, java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this, temp$7, temp$10, temp$13, temp$16, temp$31, temp$32, temp$33, temp$34;
        java.lang.Object anObject, temp$4, temp$6, temp$28, temp$30;
        java.awt.geom.Rectangle2D absoluteBoundingRectangle2D, temp$1, temp$8, temp$11, temp$14, temp$17;
        int temp$0, nCount, temp$19, temp$20, temp$21, temp$22, temp$23, temp$24, temp$25, temp$26;
        boolean temp$2, bNW, temp$9, bNE, temp$12, bSW, temp$15, bSE, temp$18;
        java.util.Hashtable temp$3, temp$5, temp$27, temp$29;

        this := @this: CH.ifa.draw.standard.QuadTree;
        anObject := @parameter0: java.lang.Object;
        absoluteBoundingRectangle2D := @parameter1: java.awt.geom.Rectangle2D;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$0 == 1 goto label0;

        goto label4;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D>;
        temp$2 = virtualinvoke absoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(temp$1);
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$4 = virtualinvoke temp$3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(anObject, absoluteBoundingRectangle2D);
        goto label3;

     label2:
        nop;
        temp$5 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$6 = virtualinvoke temp$5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(anObject, absoluteBoundingRectangle2D);

     label3:
        nop;
        return;

     label4:
        nop;
        temp$7 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        temp$8 = virtualinvoke temp$7.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D getAbsoluteBoundingRectangle2D()>();
        temp$9 = virtualinvoke absoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(temp$8);
        bNW = temp$9;
        temp$10 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        temp$11 = virtualinvoke temp$10.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D getAbsoluteBoundingRectangle2D()>();
        temp$12 = virtualinvoke absoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(temp$11);
        bNE = temp$12;
        temp$13 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        temp$14 = virtualinvoke temp$13.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D getAbsoluteBoundingRectangle2D()>();
        temp$15 = virtualinvoke absoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(temp$14);
        bSW = temp$15;
        temp$16 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        temp$17 = virtualinvoke temp$16.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D getAbsoluteBoundingRectangle2D()>();
        temp$18 = virtualinvoke absoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(temp$17);
        bSE = temp$18;
        nCount = 0;
        if bNW == 1 goto label5;

        goto label6;

     label5:
        nop;
        temp$19 = nCount;
        temp$20 = temp$19 + 1;
        nCount = temp$20;

     label6:
        nop;
        if bNE == 1 goto label7;

        goto label8;

     label7:
        nop;
        temp$21 = nCount;
        temp$22 = temp$21 + 1;
        nCount = temp$22;

     label8:
        nop;
        if bSW == 1 goto label9;

        goto label10;

     label9:
        nop;
        temp$23 = nCount;
        temp$24 = temp$23 + 1;
        nCount = temp$24;

     label10:
        nop;
        if bSE == 1 goto label11;

        goto label12;

     label11:
        nop;
        temp$25 = nCount;
        temp$26 = temp$25 + 1;
        nCount = temp$26;

     label12:
        nop;
        if nCount > 1 goto label13;

        goto label14;

     label13:
        nop;
        temp$27 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$28 = virtualinvoke temp$27.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(anObject, absoluteBoundingRectangle2D);
        return;

     label14:
        nop;
        if nCount == 0 goto label15;

        goto label16;

     label15:
        nop;
        temp$29 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$30 = virtualinvoke temp$29.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(anObject, absoluteBoundingRectangle2D);
        return;

     label16:
        nop;
        if bNW == 1 goto label17;

        goto label18;

     label17:
        nop;
        temp$31 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        virtualinvoke temp$31.<CH.ifa.draw.standard.QuadTree: void add(java.lang.Object,java.awt.geom.Rectangle2D)>(anObject, absoluteBoundingRectangle2D);

     label18:
        nop;
        if bNE == 1 goto label19;

        goto label20;

     label19:
        nop;
        temp$32 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        virtualinvoke temp$32.<CH.ifa.draw.standard.QuadTree: void add(java.lang.Object,java.awt.geom.Rectangle2D)>(anObject, absoluteBoundingRectangle2D);

     label20:
        nop;
        if bSW == 1 goto label21;

        goto label22;

     label21:
        nop;
        temp$33 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        virtualinvoke temp$33.<CH.ifa.draw.standard.QuadTree: void add(java.lang.Object,java.awt.geom.Rectangle2D)>(anObject, absoluteBoundingRectangle2D);

     label22:
        nop;
        if bSE == 1 goto label23;

        goto label24;

     label23:
        nop;
        temp$34 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        virtualinvoke temp$34.<CH.ifa.draw.standard.QuadTree: void add(java.lang.Object,java.awt.geom.Rectangle2D)>(anObject, absoluteBoundingRectangle2D);

     label24:
        nop;
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        CH.ifa.draw.standard.QuadTree this, temp$3, temp$5, temp$7, temp$9;
        java.lang.Object anObject, returnObject, temp$1, temp$4, temp$6, temp$8, temp$10, temp$12, temp$13;
        java.util.Hashtable temp$0, temp$11;
        int temp$2;

        this := @this: CH.ifa.draw.standard.QuadTree;
        anObject := @parameter0: java.lang.Object;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$1 = virtualinvoke temp$0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$1;
        if returnObject != null goto label0;

        goto label1;

     label0:
        nop;
        return returnObject;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$2 > 1 goto label2;

        goto label11;

     label2:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        temp$4 = virtualinvoke temp$3.<CH.ifa.draw.standard.QuadTree: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$4;
        if returnObject != null goto label3;

        goto label4;

     label3:
        nop;
        return returnObject;

     label4:
        nop;
        temp$5 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        temp$6 = virtualinvoke temp$5.<CH.ifa.draw.standard.QuadTree: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$6;
        if returnObject != null goto label5;

        goto label6;

     label5:
        nop;
        return returnObject;

     label6:
        nop;
        temp$7 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        temp$8 = virtualinvoke temp$7.<CH.ifa.draw.standard.QuadTree: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$8;
        if returnObject != null goto label7;

        goto label8;

     label7:
        nop;
        return returnObject;

     label8:
        nop;
        temp$9 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        temp$10 = virtualinvoke temp$9.<CH.ifa.draw.standard.QuadTree: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$10;
        if returnObject != null goto label9;

        goto label10;

     label9:
        nop;
        return returnObject;

     label10:
        nop;

     label11:
        nop;
        temp$11 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$12 = virtualinvoke temp$11.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(anObject);
        returnObject = temp$12;
        if returnObject != null goto label12;

        goto label13;

     label12:
        nop;
        return returnObject;

     label13:
        nop;
        temp$13 = null;
        return temp$13;
    }

    public void clear()
    {
        CH.ifa.draw.standard.QuadTree this, temp$3, temp$4, temp$5, temp$6;
        java.util.Hashtable temp$0, temp$1;
        int temp$2;

        this := @this: CH.ifa.draw.standard.QuadTree;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        virtualinvoke temp$0.<java.util.Hashtable: void clear()>();
        temp$1 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        virtualinvoke temp$1.<java.util.Hashtable: void clear()>();
        temp$2 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$2 > 1 goto label0;

        goto label1;

     label0:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        virtualinvoke temp$3.<CH.ifa.draw.standard.QuadTree: void clear()>();
        temp$4 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        virtualinvoke temp$4.<CH.ifa.draw.standard.QuadTree: void clear()>();
        temp$5 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        virtualinvoke temp$5.<CH.ifa.draw.standard.QuadTree: void clear()>();
        temp$6 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        virtualinvoke temp$6.<CH.ifa.draw.standard.QuadTree: void clear()>();

     label1:
        nop;
        return;
    }

    public int getMaxTreeDepth()
    {
        CH.ifa.draw.standard.QuadTree this;
        int temp$0;

        this := @this: CH.ifa.draw.standard.QuadTree;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        return temp$0;
    }

    public java.util.Vector getAll()
    {
        CH.ifa.draw.standard.QuadTree this, temp$8, temp$11, temp$14, temp$17;
        java.util.Vector v, temp$0, temp$9, temp$12, temp$15, temp$18;
        java.util.Hashtable temp$1, temp$4;
        java.util.Set temp$2, temp$5;
        boolean temp$3, temp$6, temp$10, temp$13, temp$16, temp$19;
        int temp$7;

        this := @this: CH.ifa.draw.standard.QuadTree;
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>()>();
        v = temp$0;
        temp$1 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$2 = virtualinvoke temp$1.<java.util.Hashtable: java.util.Set keySet()>();
        temp$3 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$2);
        temp$4 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$5 = virtualinvoke temp$4.<java.util.Hashtable: java.util.Set keySet()>();
        temp$6 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$5);
        temp$7 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$7 > 1 goto label0;

        goto label1;

     label0:
        nop;
        temp$8 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        temp$9 = virtualinvoke temp$8.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAll()>();
        temp$10 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$9);
        temp$11 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        temp$12 = virtualinvoke temp$11.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAll()>();
        temp$13 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$12);
        temp$14 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        temp$15 = virtualinvoke temp$14.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAll()>();
        temp$16 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$15);
        temp$17 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        temp$18 = virtualinvoke temp$17.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAll()>();
        temp$19 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$18);

     label1:
        nop;
        return v;
    }

    public java.util.Vector getAllWithin(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this, temp$20, temp$23, temp$26, temp$29;
        java.awt.geom.Rectangle2D r, itsAbsoluteBoundingRectangle2D, temp$9, itsAbsoluteBoundingRectangle2D;
        java.util.Vector v, temp$0, temp$21, temp$24, temp$27, temp$30;
        java.util.Iterator ii, temp$3, i, temp$13;
        java.util.Hashtable temp$1, temp$6, temp$11, temp$16;
        java.util.Set temp$2, temp$12;
        boolean temp$4, temp$8, temp$10, temp$14, temp$18, temp$22, temp$25, temp$28, temp$31;
        java.lang.Object anObject, temp$5, temp$7, anObject, temp$15, temp$17;
        int temp$19;

        this := @this: CH.ifa.draw.standard.QuadTree;
        r := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>()>();
        v = temp$0;
        temp$1 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$2 = virtualinvoke temp$1.<java.util.Hashtable: java.util.Set keySet()>();
        temp$3 = interfaceinvoke temp$2.<java.util.Set: java.util.Iterator iterator()>();
        ii = temp$3;

     label0:
        nop;
        temp$4 = interfaceinvoke ii.<java.util.Iterator: boolean hasNext()>();
        if temp$4 == 0 goto label4;

        goto label1;

     label1:
        nop;
        temp$5 = interfaceinvoke ii.<java.util.Iterator: java.lang.Object next()>();
        anObject = temp$5;
        temp$6 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _outsideHashtable>;
        temp$7 = virtualinvoke temp$6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(anObject);
        itsAbsoluteBoundingRectangle2D = (java.awt.geom.Rectangle2D) temp$7;
        temp$8 = virtualinvoke itsAbsoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(r);
        if temp$8 == 0 goto label3;

        goto label2;

     label2:
        nop;
        virtualinvoke v.<java.util.Vector: void addElement(java.lang.Object)>(anObject);

     label3:
        nop;
        nop;
        goto label0;

     label4:
        nop;
        temp$9 = this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D>;
        temp$10 = virtualinvoke temp$9.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(r);
        if temp$10 == 0 goto label13;

        goto label5;

     label5:
        nop;
        temp$11 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$12 = virtualinvoke temp$11.<java.util.Hashtable: java.util.Set keySet()>();
        temp$13 = interfaceinvoke temp$12.<java.util.Set: java.util.Iterator iterator()>();
        i = temp$13;

     label6:
        nop;
        temp$14 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if temp$14 == 0 goto label10;

        goto label7;

     label7:
        nop;
        temp$15 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        anObject = temp$15;
        temp$16 = this.<CH.ifa.draw.standard.QuadTree: java.util.Hashtable _theHashtable>;
        temp$17 = virtualinvoke temp$16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(anObject);
        itsAbsoluteBoundingRectangle2D = (java.awt.geom.Rectangle2D) temp$17;
        temp$18 = virtualinvoke itsAbsoluteBoundingRectangle2D.<java.awt.geom.Rectangle2D: boolean intersects(java.awt.geom.Rectangle2D)>(r);
        if temp$18 == 0 goto label9;

        goto label8;

     label8:
        nop;
        virtualinvoke v.<java.util.Vector: void addElement(java.lang.Object)>(anObject);

     label9:
        nop;
        nop;
        goto label6;

     label10:
        nop;
        temp$19 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$19 > 1 goto label11;

        goto label12;

     label11:
        nop;
        temp$20 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree>;
        temp$21 = virtualinvoke temp$20.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAllWithin(java.awt.geom.Rectangle2D)>(r);
        temp$22 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$21);
        temp$23 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree>;
        temp$24 = virtualinvoke temp$23.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAllWithin(java.awt.geom.Rectangle2D)>(r);
        temp$25 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$24);
        temp$26 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree>;
        temp$27 = virtualinvoke temp$26.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAllWithin(java.awt.geom.Rectangle2D)>(r);
        temp$28 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$27);
        temp$29 = this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree>;
        temp$30 = virtualinvoke temp$29.<CH.ifa.draw.standard.QuadTree: java.util.Vector getAllWithin(java.awt.geom.Rectangle2D)>(r);
        temp$31 = virtualinvoke v.<java.util.Vector: boolean addAll(java.util.Collection)>(temp$30);

     label12:
        nop;

     label13:
        nop;
        return v;
    }

    public java.awt.geom.Rectangle2D getAbsoluteBoundingRectangle2D()
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D temp$0;

        this := @this: CH.ifa.draw.standard.QuadTree;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D>;
        return temp$0;
    }

    private final void _init(int, java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this, temp$2, temp$6, temp$10, temp$14;
        int nMaxTreeDepth, temp$1, temp$3, temp$4, temp$7, temp$8, temp$11, temp$12, temp$15, temp$16;
        java.awt.geom.Rectangle2D absoluteBoundingRectangle2D, temp$0, temp$5, temp$9, temp$13, temp$17;

        this := @this: CH.ifa.draw.standard.QuadTree;
        nMaxTreeDepth := @parameter0: int;
        absoluteBoundingRectangle2D := @parameter1: java.awt.geom.Rectangle2D;
        temp$0 = this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _absoluteBoundingRectangle2D>;
        virtualinvoke temp$0.<java.awt.geom.Rectangle2D: void setRect(java.awt.geom.Rectangle2D)>(absoluteBoundingRectangle2D);
        this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth> = nMaxTreeDepth;
        temp$1 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        if temp$1 > 1 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = new CH.ifa.draw.standard.QuadTree;
        temp$3 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        temp$4 = temp$3 - 1;
        temp$5 = virtualinvoke this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _makeNorthwest(java.awt.geom.Rectangle2D)>(absoluteBoundingRectangle2D);
        specialinvoke temp$2.<CH.ifa.draw.standard.QuadTree: void <init>(int,java.awt.geom.Rectangle2D)>(temp$4, temp$5);
        this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _nwQuadTree> = temp$2;
        temp$6 = new CH.ifa.draw.standard.QuadTree;
        temp$7 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        temp$8 = temp$7 - 1;
        temp$9 = virtualinvoke this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _makeNortheast(java.awt.geom.Rectangle2D)>(absoluteBoundingRectangle2D);
        specialinvoke temp$6.<CH.ifa.draw.standard.QuadTree: void <init>(int,java.awt.geom.Rectangle2D)>(temp$8, temp$9);
        this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _neQuadTree> = temp$6;
        temp$10 = new CH.ifa.draw.standard.QuadTree;
        temp$11 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        temp$12 = temp$11 - 1;
        temp$13 = virtualinvoke this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _makeSouthwest(java.awt.geom.Rectangle2D)>(absoluteBoundingRectangle2D);
        specialinvoke temp$10.<CH.ifa.draw.standard.QuadTree: void <init>(int,java.awt.geom.Rectangle2D)>(temp$12, temp$13);
        this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _swQuadTree> = temp$10;
        temp$14 = new CH.ifa.draw.standard.QuadTree;
        temp$15 = this.<CH.ifa.draw.standard.QuadTree: int _nMaxTreeDepth>;
        temp$16 = temp$15 - 1;
        temp$17 = virtualinvoke this.<CH.ifa.draw.standard.QuadTree: java.awt.geom.Rectangle2D _makeSoutheast(java.awt.geom.Rectangle2D)>(absoluteBoundingRectangle2D);
        specialinvoke temp$14.<CH.ifa.draw.standard.QuadTree: void <init>(int,java.awt.geom.Rectangle2D)>(temp$16, temp$17);
        this.<CH.ifa.draw.standard.QuadTree: CH.ifa.draw.standard.QuadTree _seQuadTree> = temp$14;

     label1:
        nop;
        return;
    }

    private final java.awt.geom.Rectangle2D _makeNorthwest(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D r;
        java.awt.geom.Rectangle2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4, temp$5, temp$6;

        this := @this: CH.ifa.draw.standard.QuadTree;
        r := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        temp$1 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getX()>();
        temp$2 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getY()>();
        temp$3 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$4 = temp$3 / 2.0;
        temp$5 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$6 = temp$5 / 2.0;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(temp$1, temp$2, temp$4, temp$6);
        return temp$0;
    }

    private final java.awt.geom.Rectangle2D _makeNortheast(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D r;
        java.awt.geom.Rectangle2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10;

        this := @this: CH.ifa.draw.standard.QuadTree;
        r := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        temp$1 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getX()>();
        temp$2 = temp$1;
        temp$3 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$4 = temp$3 / 2.0;
        temp$5 = temp$2 + temp$4;
        temp$6 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getY()>();
        temp$7 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$8 = temp$7 / 2.0;
        temp$9 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$10 = temp$9 / 2.0;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(temp$5, temp$6, temp$8, temp$10);
        return temp$0;
    }

    private final java.awt.geom.Rectangle2D _makeSouthwest(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D r;
        java.awt.geom.Rectangle2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10;

        this := @this: CH.ifa.draw.standard.QuadTree;
        r := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        temp$1 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getX()>();
        temp$2 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getY()>();
        temp$3 = temp$2;
        temp$4 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$5 = temp$4 / 2.0;
        temp$6 = temp$3 + temp$5;
        temp$7 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$8 = temp$7 / 2.0;
        temp$9 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$10 = temp$9 / 2.0;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(temp$1, temp$6, temp$8, temp$10);
        return temp$0;
    }

    private final java.awt.geom.Rectangle2D _makeSoutheast(java.awt.geom.Rectangle2D)
    {
        CH.ifa.draw.standard.QuadTree this;
        java.awt.geom.Rectangle2D r;
        java.awt.geom.Rectangle2D$Double temp$0;
        double temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13, temp$14;

        this := @this: CH.ifa.draw.standard.QuadTree;
        r := @parameter0: java.awt.geom.Rectangle2D;
        temp$0 = new java.awt.geom.Rectangle2D$Double;
        temp$1 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getX()>();
        temp$2 = temp$1;
        temp$3 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$4 = temp$3 / 2.0;
        temp$5 = temp$2 + temp$4;
        temp$6 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getY()>();
        temp$7 = temp$6;
        temp$8 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$9 = temp$8 / 2.0;
        temp$10 = temp$7 + temp$9;
        temp$11 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getWidth()>();
        temp$12 = temp$11 / 2.0;
        temp$13 = virtualinvoke r.<java.awt.geom.Rectangle2D: double getHeight()>();
        temp$14 = temp$13 / 2.0;
        specialinvoke temp$0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(temp$5, temp$10, temp$12, temp$14);
        return temp$0;
    }
}
