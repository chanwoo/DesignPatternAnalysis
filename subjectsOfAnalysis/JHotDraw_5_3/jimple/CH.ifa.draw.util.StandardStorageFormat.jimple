public class CH.ifa.draw.util.StandardStorageFormat extends java.lang.Object implements CH.ifa.draw.util.StorageFormat
{
    private javax.swing.filechooser.FileFilter myFileFilter;
    private java.lang.String myFileExtension;
    private java.lang.String myFileDescription;

    public void <init>()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String temp$0, temp$1;
        javax.swing.filechooser.FileFilter temp$2;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        specialinvoke this.<java.lang.Object: void <init>()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String createFileExtension()>();
        virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: void setFileExtension(java.lang.String)>(temp$0);
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String createFileDescription()>();
        virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: void setFileDescription(java.lang.String)>(temp$1);
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: javax.swing.filechooser.FileFilter createFileFilter()>();
        virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: void setFileFilter(javax.swing.filechooser.FileFilter)>(temp$2);
        return;
    }

    protected java.lang.String createFileExtension()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String temp$0, temp$1;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = "draw";
        this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileExtension> = temp$0;
        temp$1 = "draw";
        return temp$1;
    }

    public void setFileExtension(java.lang.String)
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String newFileExtension;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        newFileExtension := @parameter0: java.lang.String;
        this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileExtension> = newFileExtension;
        return;
    }

    public java.lang.String getFileExtension()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String temp$0;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileExtension>;
        return temp$0;
    }

    public java.lang.String createFileDescription()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.StringBuffer temp$0;
        java.lang.String temp$1, temp$2;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = new java.lang.StringBuffer;
        specialinvoke temp$0.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Internal Format (");
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String getFileExtension()>();
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$1);
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(")");
        temp$2 = virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$2;
    }

    public void setFileDescription(java.lang.String)
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String newFileDescription;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        newFileDescription := @parameter0: java.lang.String;
        this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileDescription> = newFileDescription;
        return;
    }

    public java.lang.String getFileDescription()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String temp$0;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileDescription>;
        return temp$0;
    }

    protected javax.swing.filechooser.FileFilter createFileFilter()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        CH.ifa.draw.util.StandardStorageFormat$1Anonymous0 temp$0;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = new CH.ifa.draw.util.StandardStorageFormat$1Anonymous0;
        specialinvoke temp$0.<CH.ifa.draw.util.StandardStorageFormat$1Anonymous0: void <init>(CH.ifa.draw.util.StandardStorageFormat)>(this);
        return temp$0;
    }

    public void setFileFilter(javax.swing.filechooser.FileFilter)
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        javax.swing.filechooser.FileFilter newFileFilter;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        newFileFilter := @parameter0: javax.swing.filechooser.FileFilter;
        this.<CH.ifa.draw.util.StandardStorageFormat: javax.swing.filechooser.FileFilter myFileFilter> = newFileFilter;
        return;
    }

    public javax.swing.filechooser.FileFilter getFileFilter()
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        javax.swing.filechooser.FileFilter temp$0;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = this.<CH.ifa.draw.util.StandardStorageFormat: javax.swing.filechooser.FileFilter myFileFilter>;
        return temp$0;
    }

    public java.lang.String store(java.lang.String, CH.ifa.draw.framework.Drawing) throws java.io.IOException
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String fileName, temp$1, temp$3;
        CH.ifa.draw.framework.Drawing saveDrawing;
        java.io.FileOutputStream stream, temp$0;
        CH.ifa.draw.util.StorableOutput output, temp$2;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        fileName := @parameter0: java.lang.String;
        saveDrawing := @parameter1: CH.ifa.draw.framework.Drawing;
        temp$0 = new java.io.FileOutputStream;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String adjustFileName(java.lang.String)>(fileName);
        specialinvoke temp$0.<java.io.FileOutputStream: void <init>(java.lang.String)>(temp$1);
        stream = temp$0;
        temp$2 = new CH.ifa.draw.util.StorableOutput;
        specialinvoke temp$2.<CH.ifa.draw.util.StorableOutput: void <init>(java.io.OutputStream)>(stream);
        output = temp$2;
        virtualinvoke output.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(saveDrawing);
        virtualinvoke output.<CH.ifa.draw.util.StorableOutput: void close()>();
        temp$3 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String adjustFileName(java.lang.String)>(fileName);
        return temp$3;
    }

    public CH.ifa.draw.framework.Drawing restore(java.lang.String) throws java.io.IOException
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String fileName;
        boolean temp$0;
        CH.ifa.draw.framework.Drawing temp$1, temp$5;
        java.io.FileInputStream stream, temp$2;
        CH.ifa.draw.util.StorableInput input, temp$3;
        CH.ifa.draw.util.Storable temp$4;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        fileName := @parameter0: java.lang.String;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: boolean hasCorrectFileExtension(java.lang.String)>(fileName);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = null;
        return temp$1;

     label1:
        nop;
        temp$2 = new java.io.FileInputStream;
        specialinvoke temp$2.<java.io.FileInputStream: void <init>(java.lang.String)>(fileName);
        stream = temp$2;
        temp$3 = new CH.ifa.draw.util.StorableInput;
        specialinvoke temp$3.<CH.ifa.draw.util.StorableInput: void <init>(java.io.InputStream)>(stream);
        input = temp$3;
        temp$4 = virtualinvoke input.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$5 = (CH.ifa.draw.framework.Drawing) temp$4;
        return temp$5;
    }

    public boolean equals(java.lang.Object)
    {
        CH.ifa.draw.util.StandardStorageFormat this, temp$2;
        java.lang.Object compareObject;
        boolean temp$0, temp$4, temp$5;
        java.lang.String temp$1, temp$3;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        compareObject := @parameter0: java.lang.Object;
        temp$0 = compareObject instanceof CH.ifa.draw.util.StandardStorageFormat;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String getFileExtension()>();
        temp$2 = (CH.ifa.draw.util.StandardStorageFormat) compareObject;
        temp$3 = virtualinvoke temp$2.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String getFileExtension()>();
        temp$4 = virtualinvoke temp$1.<java.lang.String: boolean equals(java.lang.Object)>(temp$3);
        return temp$4;

     label1:
        nop;
        temp$5 = 0;
        return temp$5;
    }

    protected java.lang.String adjustFileName(java.lang.String)
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String testFileName, temp$2, temp$3;
        boolean temp$0;
        java.lang.StringBuffer temp$1;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        testFileName := @parameter0: java.lang.String;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: boolean hasCorrectFileExtension(java.lang.String)>(testFileName);
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.lang.StringBuffer;
        specialinvoke temp$1.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(testFileName);
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(".");
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String getFileExtension()>();
        virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$2);
        temp$3 = virtualinvoke temp$1.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$3;

     label1:
        nop;
        return testFileName;
    }

    protected boolean hasCorrectFileExtension(java.lang.String)
    {
        CH.ifa.draw.util.StandardStorageFormat this;
        java.lang.String testFileName, temp$1, temp$2;
        java.lang.StringBuffer temp$0;
        boolean temp$3;

        this := @this: CH.ifa.draw.util.StandardStorageFormat;
        testFileName := @parameter0: java.lang.String;
        temp$0 = new java.lang.StringBuffer;
        specialinvoke temp$0.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(".");
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String getFileExtension()>();
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$1);
        temp$2 = virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$3 = virtualinvoke testFileName.<java.lang.String: boolean endsWith(java.lang.String)>(temp$2);
        return temp$3;
    }

    public static java.lang.String get$myFileExtension$access$0(CH.ifa.draw.util.StandardStorageFormat)
    {
        CH.ifa.draw.util.StandardStorageFormat that;
        java.lang.String temp$0;

        that := @parameter0: CH.ifa.draw.util.StandardStorageFormat;
        temp$0 = that.<CH.ifa.draw.util.StandardStorageFormat: java.lang.String myFileExtension>;
        return temp$0;
    }
}
