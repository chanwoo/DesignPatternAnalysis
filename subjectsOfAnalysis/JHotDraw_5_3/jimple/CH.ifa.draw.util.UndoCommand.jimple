public class CH.ifa.draw.util.UndoCommand extends CH.ifa.draw.standard.AbstractCommand
{

    public void <init>(java.lang.String, CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.util.UndoCommand this;
        java.lang.String name;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor;

        this := @this: CH.ifa.draw.util.UndoCommand;
        name := @parameter0: java.lang.String;
        newDrawingEditor := @parameter1: CH.ifa.draw.framework.DrawingEditor;
        specialinvoke this.<CH.ifa.draw.standard.AbstractCommand: void <init>(java.lang.String,CH.ifa.draw.framework.DrawingEditor)>(name, newDrawingEditor);
        return;
    }

    public void execute()
    {
        CH.ifa.draw.util.UndoCommand this;
        CH.ifa.draw.util.UndoManager um, temp$1;
        CH.ifa.draw.framework.DrawingEditor temp$0, temp$7;
        boolean temp$2, hasBeenUndone, temp$4, temp$5;
        CH.ifa.draw.util.Undoable lastUndoable, temp$3;
        CH.ifa.draw.framework.DrawingView temp$6, temp$8;

        this := @this: CH.ifa.draw.util.UndoCommand;
        specialinvoke this.<CH.ifa.draw.standard.AbstractCommand: void execute()>();
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        um = temp$1;
        if um == null goto label1;

        goto label0;

     label0:
        nop;
        temp$2 = virtualinvoke um.<CH.ifa.draw.util.UndoManager: boolean isUndoable()>();
        if temp$2 == 0 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        return;

     label2:
        nop;
        temp$3 = virtualinvoke um.<CH.ifa.draw.util.UndoManager: CH.ifa.draw.util.Undoable popUndo()>();
        lastUndoable = temp$3;
        temp$4 = interfaceinvoke lastUndoable.<CH.ifa.draw.util.Undoable: boolean undo()>();
        hasBeenUndone = temp$4;
        if hasBeenUndone == 0 goto label5;

        goto label3;

     label3:
        nop;
        temp$5 = interfaceinvoke lastUndoable.<CH.ifa.draw.util.Undoable: boolean isRedoable()>();
        if temp$5 == 0 goto label5;

        goto label4;

        goto label4;

     label4:
        nop;
        virtualinvoke um.<CH.ifa.draw.util.UndoManager: void pushRedo(CH.ifa.draw.util.Undoable)>(lastUndoable);

     label5:
        nop;
        temp$6 = interfaceinvoke lastUndoable.<CH.ifa.draw.util.Undoable: CH.ifa.draw.framework.DrawingView getDrawingView()>();
        interfaceinvoke temp$6.<CH.ifa.draw.framework.DrawingView: void checkDamage()>();
        temp$7 = virtualinvoke this.<CH.ifa.draw.util.UndoCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$8 = interfaceinvoke lastUndoable.<CH.ifa.draw.util.Undoable: CH.ifa.draw.framework.DrawingView getDrawingView()>();
        interfaceinvoke temp$7.<CH.ifa.draw.framework.DrawingEditor: void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)>(temp$8);
        return;
    }

    public boolean isExecutableWithView()
    {
        CH.ifa.draw.util.UndoCommand this;
        CH.ifa.draw.util.UndoManager um, temp$1;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        int temp$2;
        boolean temp$3, temp$4;

        this := @this: CH.ifa.draw.util.UndoCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        um = temp$1;
        if um != null goto label0;

        goto label2;

     label0:
        nop;
        temp$2 = virtualinvoke um.<CH.ifa.draw.util.UndoManager: int getUndoSize()>();
        if temp$2 > 0 goto label1;

        goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = 1;
        return temp$3;

     label2:
        nop;
        temp$4 = 0;
        return temp$4;
    }
}
