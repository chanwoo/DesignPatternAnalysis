public class CH.ifa.draw.util.UndoableCommand extends java.lang.Object implements CH.ifa.draw.util.Command, CH.ifa.draw.framework.FigureSelectionListener, CH.ifa.draw.util.CommandListener
{
    private CH.ifa.draw.util.Command myWrappedCommand;
    private boolean hasSelectionChanged;
    private CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher;

    public void <init>(CH.ifa.draw.util.Command)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command newWrappedCommand, temp$0;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        newWrappedCommand := @parameter0: CH.ifa.draw.util.Command;
        specialinvoke this.<java.lang.Object: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: void setWrappedCommand(CH.ifa.draw.util.Command)>(newWrappedCommand);
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        interfaceinvoke temp$0.<CH.ifa.draw.util.Command: void addCommandListener(CH.ifa.draw.util.CommandListener)>(this);
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher createEventDispatcher()>();
        virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: void setEventDispatcher(CH.ifa.draw.standard.AbstractCommand$EventDispatcher)>(temp$1);
        return;
    }

    public void execute()
    {
        CH.ifa.draw.util.UndoableCommand this;
        boolean temp$0, temp$5, temp$10;
        CH.ifa.draw.framework.DrawingView temp$1, temp$15, temp$16;
        CH.ifa.draw.util.Command temp$2, temp$3;
        CH.ifa.draw.util.Undoable undoableCommand, temp$4;
        CH.ifa.draw.framework.DrawingEditor temp$6, temp$8, temp$11, temp$14;
        CH.ifa.draw.util.UndoManager temp$7, temp$9, temp$12;
        int temp$13;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = 0;
        this.<CH.ifa.draw.util.UndoableCommand: boolean hasSelectionChanged> = temp$0;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.DrawingView: void addFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(this);
        temp$2 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        interfaceinvoke temp$2.<CH.ifa.draw.util.Command: void execute()>();
        temp$3 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        temp$4 = interfaceinvoke temp$3.<CH.ifa.draw.util.Command: CH.ifa.draw.util.Undoable getUndoActivity()>();
        undoableCommand = temp$4;
        if undoableCommand != null goto label0;

        goto label2;

     label0:
        nop;
        temp$5 = interfaceinvoke undoableCommand.<CH.ifa.draw.util.Undoable: boolean isUndoable()>();
        if temp$5 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$6 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$7 = interfaceinvoke temp$6.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$7.<CH.ifa.draw.util.UndoManager: void pushUndo(CH.ifa.draw.util.Undoable)>(undoableCommand);
        temp$8 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$9 = interfaceinvoke temp$8.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        virtualinvoke temp$9.<CH.ifa.draw.util.UndoManager: void clearRedos()>();

     label2:
        nop;
        temp$10 = this.<CH.ifa.draw.util.UndoableCommand: boolean hasSelectionChanged>;
        if temp$10 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$11 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$12 = interfaceinvoke temp$11.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.util.UndoManager getUndoManager()>();
        temp$13 = virtualinvoke temp$12.<CH.ifa.draw.util.UndoManager: int getUndoSize()>();
        if temp$13 == 1 goto label4;

        goto label5;

        goto label5;

     label4:
        nop;
        temp$14 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$15 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$14.<CH.ifa.draw.framework.DrawingEditor: void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)>(temp$15);

     label5:
        nop;
        temp$16 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$16.<CH.ifa.draw.framework.DrawingView: void addFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(this);
        return;
    }

    public boolean isExecutable()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.util.Command: boolean isExecutable()>();
        return temp$1;
    }

    protected void setWrappedCommand(CH.ifa.draw.util.Command)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command newWrappedCommand;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        newWrappedCommand := @parameter0: CH.ifa.draw.util.Command;
        this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command myWrappedCommand> = newWrappedCommand;
        return;
    }

    protected CH.ifa.draw.util.Command getWrappedCommand()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command myWrappedCommand>;
        return temp$0;
    }

    public java.lang.String name()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command temp$0;
        java.lang.String temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.util.Command: java.lang.String name()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.DrawingEditor getDrawingEditor()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Command temp$0;
        CH.ifa.draw.framework.DrawingEditor temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.util.Command getWrappedCommand()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.util.Command: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.DrawingView view()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.DrawingView view()>();
        return temp$1;
    }

    public void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.framework.DrawingView view;
        boolean temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        temp$0 = 1;
        this.<CH.ifa.draw.util.UndoableCommand: boolean hasSelectionChanged> = temp$0;
        return;
    }

    public CH.ifa.draw.util.Undoable getUndoActivity()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.UndoableAdapter temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = new CH.ifa.draw.util.UndoableAdapter;
        temp$1 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.framework.DrawingView view()>();
        specialinvoke temp$0.<CH.ifa.draw.util.UndoableAdapter: void <init>(CH.ifa.draw.framework.DrawingView)>(temp$1);
        return temp$0;
    }

    public void setUndoActivity(CH.ifa.draw.util.Undoable)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.Undoable newUndoableActivity;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        newUndoableActivity := @parameter0: CH.ifa.draw.util.Undoable;
        return;
    }

    public void addCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.CommandListener newCommandListener;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        newCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void addCommandListener(CH.ifa.draw.util.CommandListener)>(newCommandListener);
        return;
    }

    public void removeCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.util.CommandListener oldCommandListener;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        oldCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void removeCommandListener(CH.ifa.draw.util.CommandListener)>(oldCommandListener);
        return;
    }

    private final void setEventDispatcher(CH.ifa.draw.standard.AbstractCommand$EventDispatcher)
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher newEventDispatcher;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        newEventDispatcher := @parameter0: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher> = newEventDispatcher;
        return;
    }

    protected CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher>;
        return temp$0;
    }

    public CH.ifa.draw.standard.AbstractCommand$EventDispatcher createEventDispatcher()
    {
        CH.ifa.draw.util.UndoableCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        temp$0 = new CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        specialinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void <init>(CH.ifa.draw.util.Command)>(this);
        return temp$0;
    }

    public void commandExecuted(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableCommand this;
        java.util.EventObject commandEvent;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        commandEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void fireCommandExecutedEvent()>();
        return;
    }

    public void commandExecutable(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableCommand this;
        java.util.EventObject commandEvent;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        commandEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void fireCommandExecutableEvent()>();
        return;
    }

    public void commandNotExecutable(java.util.EventObject)
    {
        CH.ifa.draw.util.UndoableCommand this;
        java.util.EventObject commandEvent;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.util.UndoableCommand;
        commandEvent := @parameter0: java.util.EventObject;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.UndoableCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void fireCommandNotExecutableEvent()>();
        return;
    }
}
