public class CH.ifa.draw.util.StandardVersionControlStrategy extends java.lang.Object implements CH.ifa.draw.util.VersionControlStrategy
{
    private CH.ifa.draw.util.VersionRequester myVersionRequester;

    public void <init>(CH.ifa.draw.util.VersionRequester)
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        CH.ifa.draw.util.VersionRequester newVersionRequester;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        newVersionRequester := @parameter0: CH.ifa.draw.util.VersionRequester;
        specialinvoke this.<java.lang.Object: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.util.StandardVersionControlStrategy: void setVersionRequester(CH.ifa.draw.util.VersionRequester)>(newVersionRequester);
        return;
    }

    public void assertCompatibleVersion()
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        java.lang.String[] requiredVersions, temp$1, temp$4;
        CH.ifa.draw.util.VersionRequester temp$0;
        int temp$2, i, temp$3, temp$5, temp$8, temp$9;
        java.lang.String temp$6;
        boolean temp$7;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StandardVersionControlStrategy: CH.ifa.draw.util.VersionRequester getVersionRequester()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.util.VersionRequester: java.lang.String[] getRequiredVersions()>();
        requiredVersions = temp$1;
        temp$2 = lengthof requiredVersions;
        if temp$2 == 0 goto label0;

        goto label1;

     label0:
        nop;
        return;

     label1:
        nop;
        i = 0;

     label2:
        nop;
        temp$3 = lengthof requiredVersions;
        if i < temp$3 goto label3;

        goto label6;

     label3:
        nop;
        temp$4 = requiredVersions;
        temp$5 = i;
        temp$6 = temp$4[temp$5];
        temp$7 = virtualinvoke this.<CH.ifa.draw.util.StandardVersionControlStrategy: boolean isCompatibleVersion(java.lang.String)>(temp$6);
        if temp$7 == 0 goto label5;

        goto label4;

     label4:
        nop;
        return;

     label5:
        nop;
        nop;
        temp$8 = i;
        temp$9 = temp$8 + 1;
        i = temp$9;
        goto label2;

     label6:
        nop;
        virtualinvoke this.<CH.ifa.draw.util.StandardVersionControlStrategy: void handleIncompatibleVersions()>();
        return;
    }

    protected void handleIncompatibleVersions()
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        java.lang.String[] requiredVersions, temp$1, temp$6, temp$14;
        CH.ifa.draw.util.VersionRequester temp$0;
        java.lang.StringBuffer expectedVersions, temp$2, temp$5, temp$10, temp$19, temp$20, temp$22;
        int i, temp$3, temp$4, temp$7, temp$11, temp$12, temp$13, temp$15, temp$16, temp$17;
        java.lang.String temp$8, temp$9, temp$18, temp$23, temp$24;
        CH.ifa.draw.framework.JHotDrawRuntimeException temp$21;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        temp$0 = virtualinvoke this.<CH.ifa.draw.util.StandardVersionControlStrategy: CH.ifa.draw.util.VersionRequester getVersionRequester()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.util.VersionRequester: java.lang.String[] getRequiredVersions()>();
        requiredVersions = temp$1;
        temp$2 = new java.lang.StringBuffer;
        specialinvoke temp$2.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");
        expectedVersions = temp$2;
        i = 0;

     label0:
        nop;
        temp$3 = lengthof requiredVersions;
        temp$4 = temp$3 - 1;
        if i < temp$4 goto label1;

        goto label2;

     label1:
        nop;
        temp$5 = new java.lang.StringBuffer;
        specialinvoke temp$5.<java.lang.StringBuffer: void <init>()>();
        temp$6 = requiredVersions;
        temp$7 = i;
        temp$8 = temp$6[temp$7];
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$8);
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(", ");
        temp$9 = virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$10 = virtualinvoke expectedVersions.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(temp$9);
        nop;
        temp$11 = i;
        temp$12 = temp$11 + 1;
        i = temp$12;
        goto label0;

     label2:
        nop;
        temp$13 = lengthof requiredVersions;
        if temp$13 > 0 goto label3;

        goto label4;

     label3:
        nop;
        temp$14 = requiredVersions;
        temp$15 = lengthof requiredVersions;
        temp$16 = temp$15 - 1;
        temp$17 = temp$16;
        temp$18 = temp$14[temp$17];
        temp$19 = virtualinvoke expectedVersions.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(temp$18);

     label4:
        nop;
        temp$20 = virtualinvoke expectedVersions.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");
        temp$21 = new CH.ifa.draw.framework.JHotDrawRuntimeException;
        temp$22 = new java.lang.StringBuffer;
        specialinvoke temp$22.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Incompatible version of JHotDraw found: ");
        temp$23 = staticinvoke <CH.ifa.draw.util.VersionManagement: java.lang.String getJHotDrawVersion()>();
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$23);
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" (expected: ");
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(expectedVersions);
        virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(")");
        temp$24 = virtualinvoke temp$22.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke temp$21.<CH.ifa.draw.framework.JHotDrawRuntimeException: void <init>(java.lang.String)>(temp$24);
        throw temp$21;

        return;
    }

    protected boolean isCompatibleVersion(java.lang.String)
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        java.lang.String compareVersionString;
        boolean temp$0;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        compareVersionString := @parameter0: java.lang.String;
        temp$0 = staticinvoke <CH.ifa.draw.util.VersionManagement: boolean isCompatibleVersion(java.lang.String)>(compareVersionString);
        return temp$0;
    }

    private final void setVersionRequester(CH.ifa.draw.util.VersionRequester)
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        CH.ifa.draw.util.VersionRequester newVersionRequester;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        newVersionRequester := @parameter0: CH.ifa.draw.util.VersionRequester;
        this.<CH.ifa.draw.util.StandardVersionControlStrategy: CH.ifa.draw.util.VersionRequester myVersionRequester> = newVersionRequester;
        return;
    }

    protected CH.ifa.draw.util.VersionRequester getVersionRequester()
    {
        CH.ifa.draw.util.StandardVersionControlStrategy this;
        CH.ifa.draw.util.VersionRequester temp$0;

        this := @this: CH.ifa.draw.util.StandardVersionControlStrategy;
        temp$0 = this.<CH.ifa.draw.util.StandardVersionControlStrategy: CH.ifa.draw.util.VersionRequester myVersionRequester>;
        return temp$0;
    }
}
