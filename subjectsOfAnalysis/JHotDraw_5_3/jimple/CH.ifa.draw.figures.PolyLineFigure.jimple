public class CH.ifa.draw.figures.PolyLineFigure extends CH.ifa.draw.standard.AbstractFigure
{
    public static final int ARROW_TIP_NONE;
    public static final int ARROW_TIP_START;
    public static final int ARROW_TIP_END;
    public static final int ARROW_TIP_BOTH;
    protected java.util.Vector fPoints;
    protected CH.ifa.draw.figures.LineDecoration fStartDecoration;
    protected CH.ifa.draw.figures.LineDecoration fEndDecoration;
    protected java.awt.Color fFrameColor;
    private static final long serialVersionUID;
    private int polyLineFigureSerializedDataVersion;

    static void <clinit>()
    {
        int temp$0, temp$1, temp$2, temp$3;
        long temp$4;

        temp$0 = 0;
        <CH.ifa.draw.figures.PolyLineFigure: int ARROW_TIP_NONE> = temp$0;
        temp$1 = 1;
        <CH.ifa.draw.figures.PolyLineFigure: int ARROW_TIP_START> = temp$1;
        temp$2 = 2;
        <CH.ifa.draw.figures.PolyLineFigure: int ARROW_TIP_END> = temp$2;
        temp$3 = 3;
        <CH.ifa.draw.figures.PolyLineFigure: int ARROW_TIP_BOTH> = temp$3;
        temp$4 = -7951352179906577773L;
        <CH.ifa.draw.figures.PolyLineFigure: long serialVersionUID> = temp$4;
        return;
    }

    public void <init>()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.figures.LineDecoration temp$0, temp$1;
        java.awt.Color temp$2;
        int temp$3;
        java.util.Vector temp$4;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void <init>()>();
        temp$0 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration> = temp$0;
        temp$1 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration> = temp$1;
        temp$2 = <java.awt.Color: java.awt.Color black>;
        this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor> = temp$2;
        temp$3 = 1;
        this.<CH.ifa.draw.figures.PolyLineFigure: int polyLineFigureSerializedDataVersion> = temp$3;
        temp$4 = new java.util.Vector;
        specialinvoke temp$4.<java.util.Vector: void <init>(int)>(4);
        this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints> = temp$4;
        return;
    }

    public void <init>(int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int size, temp$3;
        CH.ifa.draw.figures.LineDecoration temp$0, temp$1;
        java.awt.Color temp$2;
        java.util.Vector temp$4;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        size := @parameter0: int;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void <init>()>();
        temp$0 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration> = temp$0;
        temp$1 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration> = temp$1;
        temp$2 = <java.awt.Color: java.awt.Color black>;
        this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor> = temp$2;
        temp$3 = 1;
        this.<CH.ifa.draw.figures.PolyLineFigure: int polyLineFigureSerializedDataVersion> = temp$3;
        temp$4 = new java.util.Vector;
        specialinvoke temp$4.<java.util.Vector: void <init>(int)>(size);
        this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints> = temp$4;
        return;
    }

    public void <init>(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y, temp$3;
        CH.ifa.draw.figures.LineDecoration temp$0, temp$1;
        java.awt.Color temp$2;
        java.util.Vector temp$4, temp$5;
        java.awt.Point temp$6;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void <init>()>();
        temp$0 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration> = temp$0;
        temp$1 = null;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration> = temp$1;
        temp$2 = <java.awt.Color: java.awt.Color black>;
        this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor> = temp$2;
        temp$3 = 1;
        this.<CH.ifa.draw.figures.PolyLineFigure: int polyLineFigureSerializedDataVersion> = temp$3;
        temp$4 = new java.util.Vector;
        specialinvoke temp$4.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints> = temp$4;
        temp$5 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$6 = new java.awt.Point;
        specialinvoke temp$6.<java.awt.Point: void <init>(int,int)>(x, y);
        virtualinvoke temp$5.<java.util.Vector: void addElement(java.lang.Object)>(temp$6);
        return;
    }

    public java.awt.Rectangle displayBox()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.util.Enumeration k, temp$0;
        java.awt.Rectangle r, temp$1;
        java.lang.Object temp$2, temp$5;
        java.awt.Point temp$3, temp$6;
        boolean temp$4;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Enumeration points()>();
        k = temp$0;
        temp$1 = new java.awt.Rectangle;
        temp$2 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$3 = (java.awt.Point) temp$2;
        specialinvoke temp$1.<java.awt.Rectangle: void <init>(java.awt.Point)>(temp$3);
        r = temp$1;

     label0:
        nop;
        temp$4 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$4 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$5 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$6 = (java.awt.Point) temp$5;
        virtualinvoke r.<java.awt.Rectangle: void add(java.awt.Point)>(temp$6);
        goto label0;

     label2:
        nop;
        return r;
    }

    public boolean isEmpty()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Dimension temp$0, temp$2;
        int temp$1, temp$3;
        boolean temp$4;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Dimension size()>();
        temp$1 = temp$0.<java.awt.Dimension: int width>;
        if temp$1 < 3 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Dimension size()>();
        temp$3 = temp$2.<java.awt.Dimension: int height>;
        if temp$3 < 3 goto label2;

        goto label1;

        goto label2;

     label1:
        nop;
        temp$4 = 0;
        goto label3;

     label2:
        nop;
        temp$4 = 1;

     label3:
        nop;
        return temp$4;
    }

    public java.util.Vector handles()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.util.Vector handles, temp$0, temp$1, temp$3;
        int temp$2, i, temp$4, temp$7, temp$8;
        CH.ifa.draw.figures.PolyLineHandle temp$5;
        CH.ifa.draw.framework.Locator temp$6;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = new java.util.Vector;
        temp$1 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: int size()>();
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(temp$2);
        handles = temp$0;
        i = 0;

     label0:
        nop;
        temp$3 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$4 = virtualinvoke temp$3.<java.util.Vector: int size()>();
        if i < temp$4 goto label1;

        goto label2;

     label1:
        nop;
        temp$5 = new CH.ifa.draw.figures.PolyLineHandle;
        temp$6 = staticinvoke <CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.framework.Locator locator(int)>(i);
        specialinvoke temp$5.<CH.ifa.draw.figures.PolyLineHandle: void <init>(CH.ifa.draw.figures.PolyLineFigure,CH.ifa.draw.framework.Locator,int)>(this, temp$6, i);
        virtualinvoke handles.<java.util.Vector: void addElement(java.lang.Object)>(temp$5);
        nop;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        i = temp$8;
        goto label0;

     label2:
        nop;
        return handles;
    }

    public void basicDisplayBox(java.awt.Point, java.awt.Point)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Point origin, corner;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        origin := @parameter0: java.awt.Point;
        corner := @parameter1: java.awt.Point;
        return;
    }

    public void addPoint(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y;
        java.util.Vector temp$0;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = new java.awt.Point;
        specialinvoke temp$1.<java.awt.Point: void <init>(int,int)>(x, y);
        virtualinvoke temp$0.<java.util.Vector: void addElement(java.lang.Object)>(temp$1);
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        return;
    }

    public java.util.Enumeration points()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.util.Vector temp$0;
        java.util.Enumeration temp$1;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.util.Enumeration elements()>();
        return temp$1;
    }

    public int pointCount()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.util.Vector temp$0;
        int temp$1;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: int size()>();
        return temp$1;
    }

    protected void basicMoveBy(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int dx, dy;
        java.util.Enumeration k, temp$1;
        java.util.Vector temp$0;
        boolean temp$2;
        java.lang.Object temp$3;
        java.awt.Point temp$4;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        dx := @parameter0: int;
        dy := @parameter1: int;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.util.Enumeration elements()>();
        k = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$4 = (java.awt.Point) temp$3;
        virtualinvoke temp$4.<java.awt.Point: void translate(int,int)>(dx, dy);
        goto label0;

     label2:
        nop;
        return;
    }

    public void setPointAt(java.awt.Point, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Point p;
        int i;
        java.util.Vector temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        p := @parameter0: java.awt.Point;
        i := @parameter1: int;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void willChange()>();
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        virtualinvoke temp$0.<java.util.Vector: void setElementAt(java.lang.Object,int)>(p, i);
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        return;
    }

    public void insertPointAt(java.awt.Point, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Point p;
        int i;
        java.util.Vector temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        p := @parameter0: java.awt.Point;
        i := @parameter1: int;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        virtualinvoke temp$0.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(p, i);
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        return;
    }

    public void removePointAt(int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int i;
        java.util.Vector temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        i := @parameter0: int;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void willChange()>();
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        virtualinvoke temp$0.<java.util.Vector: void removeElementAt(int)>(i);
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        return;
    }

    public int splitSegment(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y, i, temp$0, temp$2, temp$3, temp$4, temp$5;
        java.awt.Point temp$1;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: int findSegment(int,int)>(x, y);
        i = temp$0;
        if i != -1 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.awt.Point;
        specialinvoke temp$1.<java.awt.Point: void <init>(int,int)>(x, y);
        temp$2 = i;
        temp$3 = temp$2 + 1;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void insertPointAt(java.awt.Point,int)>(temp$1, temp$3);

     label1:
        nop;
        temp$4 = i;
        temp$5 = temp$4 + 1;
        return temp$5;
    }

    public java.awt.Point pointAt(int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int i;
        java.util.Vector temp$0;
        java.lang.Object temp$1;
        java.awt.Point temp$2;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        i := @parameter0: int;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        temp$2 = (java.awt.Point) temp$1;
        return temp$2;
    }

    public boolean joinSegments(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y, i, temp$1, temp$2, temp$4, temp$5, temp$7, temp$9, temp$10;
        java.util.Vector temp$0;
        java.awt.Point p, temp$3;
        long temp$6;
        boolean temp$8, temp$11;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        i = 1;

     label0:
        nop;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: int size()>();
        temp$2 = temp$1 - 1;
        if i < temp$2 goto label1;

        goto label4;

     label1:
        nop;
        temp$3 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Point pointAt(int)>(i);
        p = temp$3;
        temp$4 = p.<java.awt.Point: int x>;
        temp$5 = p.<java.awt.Point: int y>;
        temp$6 = staticinvoke <CH.ifa.draw.util.Geom: long length(int,int,int,int)>(x, y, temp$4, temp$5);
        temp$7 = temp$6 cmp 3L;
        if temp$7 >= 0 goto label3;

        goto label2;

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void removePointAt(int)>(i);
        temp$8 = 1;
        return temp$8;

     label3:
        nop;
        nop;
        temp$9 = i;
        temp$10 = temp$9 + 1;
        i = temp$10;
        goto label0;

     label4:
        nop;
        temp$11 = 0;
        return temp$11;
    }

    public CH.ifa.draw.framework.Connector connectorAt(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y;
        CH.ifa.draw.figures.PolyLineConnector temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = new CH.ifa.draw.figures.PolyLineConnector;
        specialinvoke temp$0.<CH.ifa.draw.figures.PolyLineConnector: void <init>(CH.ifa.draw.framework.Figure)>(this);
        return temp$0;
    }

    public void setStartDecoration(CH.ifa.draw.figures.LineDecoration)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.figures.LineDecoration l;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        l := @parameter0: CH.ifa.draw.figures.LineDecoration;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration> = l;
        return;
    }

    public CH.ifa.draw.figures.LineDecoration getStartDecoration()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.figures.LineDecoration temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration>;
        return temp$0;
    }

    public void setEndDecoration(CH.ifa.draw.figures.LineDecoration)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.figures.LineDecoration l;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        l := @parameter0: CH.ifa.draw.figures.LineDecoration;
        this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration> = l;
        return;
    }

    public CH.ifa.draw.figures.LineDecoration getEndDecoration()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.figures.LineDecoration temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration>;
        return temp$0;
    }

    public void draw(java.awt.Graphics)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Graphics g;
        java.awt.Color temp$0;
        java.awt.Point p1, p2, temp$6, temp$11;
        int i, temp$2, temp$3, temp$8, temp$9, temp$12, temp$13, temp$14, temp$15, temp$16, temp$17;
        java.util.Vector temp$1, temp$4, temp$7;
        java.lang.Object temp$5, temp$10;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color getFrameColor()>();
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$0);
        i = 0;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: int size()>();
        temp$3 = temp$2 - 1;
        if i < temp$3 goto label1;

        goto label2;

     label1:
        nop;
        temp$4 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$5 = virtualinvoke temp$4.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        temp$6 = (java.awt.Point) temp$5;
        p1 = temp$6;
        temp$7 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$8 = i;
        temp$9 = temp$8 + 1;
        temp$10 = virtualinvoke temp$7.<java.util.Vector: java.lang.Object elementAt(int)>(temp$9);
        temp$11 = (java.awt.Point) temp$10;
        p2 = temp$11;
        temp$12 = p1.<java.awt.Point: int x>;
        temp$13 = p1.<java.awt.Point: int y>;
        temp$14 = p2.<java.awt.Point: int x>;
        temp$15 = p2.<java.awt.Point: int y>;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void drawLine(java.awt.Graphics,int,int,int,int)>(g, temp$12, temp$13, temp$14, temp$15);
        nop;
        temp$16 = i;
        temp$17 = temp$16 + 1;
        i = temp$17;
        goto label0;

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void decorate(java.awt.Graphics)>(g);
        return;
    }

    protected void drawLine(java.awt.Graphics, int, int, int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Graphics g;
        int x1, y1, x2, y2;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        g := @parameter0: java.awt.Graphics;
        x1 := @parameter1: int;
        y1 := @parameter2: int;
        x2 := @parameter3: int;
        y2 := @parameter4: int;
        virtualinvoke g.<java.awt.Graphics: void drawLine(int,int,int,int)>(x1, y1, x2, y2);
        return;
    }

    public boolean containsPoint(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y, i, temp$4, temp$5, temp$10, temp$11, temp$14, temp$15, temp$16, temp$17, temp$20, temp$21;
        java.awt.Rectangle bounds, temp$0;
        boolean temp$1, temp$2, temp$18, temp$19, temp$22;
        java.awt.Point p1, p2, temp$8, temp$13;
        java.util.Vector temp$3, temp$6, temp$9;
        java.lang.Object temp$7, temp$12;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Rectangle displayBox()>();
        bounds = temp$0;
        virtualinvoke bounds.<java.awt.Rectangle: void grow(int,int)>(4, 4);
        temp$1 = virtualinvoke bounds.<java.awt.Rectangle: boolean contains(int,int)>(x, y);
        if temp$1 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = 0;
        return temp$2;

     label1:
        nop;
        i = 0;

     label2:
        nop;
        temp$3 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$4 = virtualinvoke temp$3.<java.util.Vector: int size()>();
        temp$5 = temp$4 - 1;
        if i < temp$5 goto label3;

        goto label6;

     label3:
        nop;
        temp$6 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$7 = virtualinvoke temp$6.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        temp$8 = (java.awt.Point) temp$7;
        p1 = temp$8;
        temp$9 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$10 = i;
        temp$11 = temp$10 + 1;
        temp$12 = virtualinvoke temp$9.<java.util.Vector: java.lang.Object elementAt(int)>(temp$11);
        temp$13 = (java.awt.Point) temp$12;
        p2 = temp$13;
        temp$14 = p1.<java.awt.Point: int x>;
        temp$15 = p1.<java.awt.Point: int y>;
        temp$16 = p2.<java.awt.Point: int x>;
        temp$17 = p2.<java.awt.Point: int y>;
        temp$18 = staticinvoke <CH.ifa.draw.util.Geom: boolean lineContainsPoint(int,int,int,int,int,int)>(temp$14, temp$15, temp$16, temp$17, x, y);
        if temp$18 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$19 = 1;
        return temp$19;

     label5:
        nop;
        nop;
        temp$20 = i;
        temp$21 = temp$20 + 1;
        i = temp$21;
        goto label2;

     label6:
        nop;
        temp$22 = 0;
        return temp$22;
    }

    public int findSegment(int, int)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        int x, y, i, temp$1, temp$2, temp$7, temp$8, temp$11, temp$12, temp$13, temp$14, temp$16, temp$17, temp$18;
        java.awt.Point p1, p2, temp$5, temp$10;
        java.util.Vector temp$0, temp$3, temp$6;
        java.lang.Object temp$4, temp$9;
        boolean temp$15;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        x := @parameter0: int;
        y := @parameter1: int;
        i = 0;

     label0:
        nop;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: int size()>();
        temp$2 = temp$1 - 1;
        if i < temp$2 goto label1;

        goto label4;

     label1:
        nop;
        temp$3 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$4 = virtualinvoke temp$3.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        temp$5 = (java.awt.Point) temp$4;
        p1 = temp$5;
        temp$6 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        temp$9 = virtualinvoke temp$6.<java.util.Vector: java.lang.Object elementAt(int)>(temp$8);
        temp$10 = (java.awt.Point) temp$9;
        p2 = temp$10;
        temp$11 = p1.<java.awt.Point: int x>;
        temp$12 = p1.<java.awt.Point: int y>;
        temp$13 = p2.<java.awt.Point: int x>;
        temp$14 = p2.<java.awt.Point: int y>;
        temp$15 = staticinvoke <CH.ifa.draw.util.Geom: boolean lineContainsPoint(int,int,int,int,int,int)>(temp$11, temp$12, temp$13, temp$14, x, y);
        if temp$15 == 0 goto label3;

        goto label2;

     label2:
        nop;
        return i;

     label3:
        nop;
        nop;
        temp$16 = i;
        temp$17 = temp$16 + 1;
        i = temp$17;
        goto label0;

     label4:
        nop;
        temp$18 = -1;
        return temp$18;
    }

    private final void decorate(java.awt.Graphics)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Graphics g;
        CH.ifa.draw.figures.LineDecoration temp$0, temp$5, temp$10, temp$21;
        java.awt.Point p1, p2, p3, p4;
        java.util.Vector temp$1, temp$3, temp$11, temp$12, temp$16, temp$17;
        java.lang.Object temp$2, temp$4, temp$15, temp$20;
        int temp$6, temp$7, temp$8, temp$9, temp$13, temp$14, temp$18, temp$19, temp$22, temp$23, temp$24, temp$25;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getStartDecoration()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: java.lang.Object elementAt(int)>(0);
        p1 = (java.awt.Point) temp$2;
        temp$3 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$4 = virtualinvoke temp$3.<java.util.Vector: java.lang.Object elementAt(int)>(1);
        p2 = (java.awt.Point) temp$4;
        temp$5 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getStartDecoration()>();
        temp$6 = p1.<java.awt.Point: int x>;
        temp$7 = p1.<java.awt.Point: int y>;
        temp$8 = p2.<java.awt.Point: int x>;
        temp$9 = p2.<java.awt.Point: int y>;
        interfaceinvoke temp$5.<CH.ifa.draw.figures.LineDecoration: void draw(java.awt.Graphics,int,int,int,int)>(g, temp$6, temp$7, temp$8, temp$9);

     label1:
        nop;
        temp$10 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getEndDecoration()>();
        if temp$10 != null goto label2;

        goto label3;

     label2:
        nop;
        temp$11 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$12 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$13 = virtualinvoke temp$12.<java.util.Vector: int size()>();
        temp$14 = temp$13 - 2;
        temp$15 = virtualinvoke temp$11.<java.util.Vector: java.lang.Object elementAt(int)>(temp$14);
        p3 = (java.awt.Point) temp$15;
        temp$16 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$17 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$18 = virtualinvoke temp$17.<java.util.Vector: int size()>();
        temp$19 = temp$18 - 1;
        temp$20 = virtualinvoke temp$16.<java.util.Vector: java.lang.Object elementAt(int)>(temp$19);
        p4 = (java.awt.Point) temp$20;
        temp$21 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getEndDecoration()>();
        temp$22 = p4.<java.awt.Point: int x>;
        temp$23 = p4.<java.awt.Point: int y>;
        temp$24 = p3.<java.awt.Point: int x>;
        temp$25 = p3.<java.awt.Point: int y>;
        interfaceinvoke temp$21.<CH.ifa.draw.figures.LineDecoration: void draw(java.awt.Graphics,int,int,int,int)>(g, temp$22, temp$23, temp$24, temp$25);

     label3:
        nop;
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.lang.String name;
        boolean temp$0, temp$2;
        java.awt.Color temp$1;
        int value, temp$4, temp$5, temp$7, temp$8;
        CH.ifa.draw.figures.LineDecoration temp$3, temp$6;
        java.lang.Integer temp$9;
        java.lang.Object temp$10;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        name := @parameter0: java.lang.String;
        temp$0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FrameColor");
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color getFrameColor()>();
        return temp$1;

     label1:
        nop;
        temp$2 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("ArrowMode");
        if temp$2 == 0 goto label7;

        goto label2;

     label2:
        nop;
        value = 0;
        temp$3 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getStartDecoration()>();
        if temp$3 != null goto label3;

        goto label4;

     label3:
        nop;
        temp$4 = value;
        temp$5 = temp$4 | 1;
        value = temp$5;

     label4:
        nop;
        temp$6 = virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration getEndDecoration()>();
        if temp$6 != null goto label5;

        goto label6;

     label5:
        nop;
        temp$7 = value;
        temp$8 = temp$7 | 2;
        value = temp$8;

     label6:
        nop;
        temp$9 = new java.lang.Integer;
        specialinvoke temp$9.<java.lang.Integer: void <init>(int)>(value);
        return temp$9;

     label7:
        nop;
        temp$10 = specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: java.lang.Object getAttribute(java.lang.String)>(name);
        return temp$10;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.lang.String name;
        java.lang.Object value;
        boolean temp$0, temp$2;
        java.awt.Color temp$1;
        java.lang.Integer intObj;
        int decoration, temp$3, temp$4, temp$6;
        CH.ifa.draw.figures.ArrowTip temp$5, temp$7;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        name := @parameter0: java.lang.String;
        value := @parameter1: java.lang.Object;
        temp$0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FrameColor");
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = (java.awt.Color) value;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setFrameColor(java.awt.Color)>(temp$1);
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        goto label13;

     label1:
        nop;
        temp$2 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("ArrowMode");
        if temp$2 == 0 goto label11;

        goto label2;

     label2:
        nop;
        intObj = (java.lang.Integer) value;
        if intObj != null goto label3;

        goto label10;

     label3:
        nop;
        temp$3 = virtualinvoke intObj.<java.lang.Integer: int intValue()>();
        decoration = temp$3;
        temp$4 = decoration & 1;
        if temp$4 != 0 goto label4;

        goto label5;

     label4:
        nop;
        temp$5 = new CH.ifa.draw.figures.ArrowTip;
        specialinvoke temp$5.<CH.ifa.draw.figures.ArrowTip: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setStartDecoration(CH.ifa.draw.figures.LineDecoration)>(temp$5);
        goto label6;

     label5:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setStartDecoration(CH.ifa.draw.figures.LineDecoration)>(null);

     label6:
        nop;
        temp$6 = decoration & 2;
        if temp$6 != 0 goto label7;

        goto label8;

     label7:
        nop;
        temp$7 = new CH.ifa.draw.figures.ArrowTip;
        specialinvoke temp$7.<CH.ifa.draw.figures.ArrowTip: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setEndDecoration(CH.ifa.draw.figures.LineDecoration)>(temp$7);
        goto label9;

     label8:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setEndDecoration(CH.ifa.draw.figures.LineDecoration)>(null);

     label9:
        nop;

     label10:
        nop;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void changed()>();
        goto label12;

     label11:
        nop;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void setAttribute(java.lang.String,java.lang.Object)>(name, value);

     label12:
        nop;

     label13:
        nop;
        return;
    }

    public void write(CH.ifa.draw.util.StorableOutput)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.util.StorableOutput dw;
        java.util.Vector temp$0, temp$2;
        int temp$1, temp$6, temp$7;
        java.util.Enumeration k, temp$3;
        boolean temp$4;
        java.awt.Point p;
        java.lang.Object temp$5;
        CH.ifa.draw.figures.LineDecoration temp$8, temp$9;
        java.awt.Color temp$10;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        dw := @parameter0: CH.ifa.draw.util.StorableOutput;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void write(CH.ifa.draw.util.StorableOutput)>(dw);
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: int size()>();
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$1);
        temp$2 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$3 = virtualinvoke temp$2.<java.util.Vector: java.util.Enumeration elements()>();
        k = temp$3;

     label0:
        nop;
        temp$4 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$4 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$5 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        p = (java.awt.Point) temp$5;
        temp$6 = p.<java.awt.Point: int x>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$6);
        temp$7 = p.<java.awt.Point: int y>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeInt(int)>(temp$7);
        goto label0;

     label2:
        nop;
        temp$8 = this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fStartDecoration>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$8);
        temp$9 = this.<CH.ifa.draw.figures.PolyLineFigure: CH.ifa.draw.figures.LineDecoration fEndDecoration>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeStorable(CH.ifa.draw.util.Storable)>(temp$9);
        temp$10 = this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor>;
        virtualinvoke dw.<CH.ifa.draw.util.StorableOutput: void writeColor(java.awt.Color)>(temp$10);
        return;
    }

    public void read(CH.ifa.draw.util.StorableInput) throws java.io.IOException
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        CH.ifa.draw.util.StorableInput dr;
        int size, temp$0, i, x, temp$2, y, temp$3, temp$6, temp$7;
        java.util.Vector temp$1, temp$4;
        java.awt.Point temp$5;
        CH.ifa.draw.util.Storable temp$8, temp$10;
        CH.ifa.draw.figures.LineDecoration temp$9, temp$11;
        java.awt.Color temp$12;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        dr := @parameter0: CH.ifa.draw.util.StorableInput;
        specialinvoke this.<CH.ifa.draw.standard.AbstractFigure: void read(CH.ifa.draw.util.StorableInput)>(dr);
        temp$0 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        size = temp$0;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>(int)>(size);
        this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints> = temp$1;
        i = 0;

     label0:
        nop;
        if i < size goto label1;

        goto label2;

     label1:
        nop;
        temp$2 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        x = temp$2;
        temp$3 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: int readInt()>();
        y = temp$3;
        temp$4 = this.<CH.ifa.draw.figures.PolyLineFigure: java.util.Vector fPoints>;
        temp$5 = new java.awt.Point;
        specialinvoke temp$5.<java.awt.Point: void <init>(int,int)>(x, y);
        virtualinvoke temp$4.<java.util.Vector: void addElement(java.lang.Object)>(temp$5);
        nop;
        temp$6 = i;
        temp$7 = temp$6 + 1;
        i = temp$7;
        goto label0;

     label2:
        nop;
        temp$8 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$9 = (CH.ifa.draw.figures.LineDecoration) temp$8;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setStartDecoration(CH.ifa.draw.figures.LineDecoration)>(temp$9);
        temp$10 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: CH.ifa.draw.util.Storable readStorable()>();
        temp$11 = (CH.ifa.draw.figures.LineDecoration) temp$10;
        virtualinvoke this.<CH.ifa.draw.figures.PolyLineFigure: void setEndDecoration(CH.ifa.draw.figures.LineDecoration)>(temp$11);
        temp$12 = virtualinvoke dr.<CH.ifa.draw.util.StorableInput: java.awt.Color readColor()>();
        this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor> = temp$12;
        return;
    }

    public static CH.ifa.draw.framework.Locator locator(int)
    {
        int pointIndex;
        CH.ifa.draw.figures.PolyLineLocator temp$0;

        pointIndex := @parameter0: int;
        temp$0 = new CH.ifa.draw.figures.PolyLineLocator;
        specialinvoke temp$0.<CH.ifa.draw.figures.PolyLineLocator: void <init>(int)>(pointIndex);
        return temp$0;
    }

    protected java.awt.Color getFrameColor()
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Color temp$0;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        temp$0 = this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor>;
        return temp$0;
    }

    protected void setFrameColor(java.awt.Color)
    {
        CH.ifa.draw.figures.PolyLineFigure this;
        java.awt.Color c;

        this := @this: CH.ifa.draw.figures.PolyLineFigure;
        c := @parameter0: java.awt.Color;
        this.<CH.ifa.draw.figures.PolyLineFigure: java.awt.Color fFrameColor> = c;
        return;
    }
}
