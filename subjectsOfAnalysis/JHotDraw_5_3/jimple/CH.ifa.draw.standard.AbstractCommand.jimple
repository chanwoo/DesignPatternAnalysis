public abstract class CH.ifa.draw.standard.AbstractCommand extends java.lang.Object implements CH.ifa.draw.util.Command, CH.ifa.draw.framework.FigureSelectionListener, CH.ifa.draw.framework.ViewChangeListener
{
    private java.lang.String myName;
    private CH.ifa.draw.util.Undoable myUndoableActivity;
    private boolean myIsViewRequired;
    private CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher;
    private CH.ifa.draw.framework.DrawingEditor myDrawingEditor;

    public void <init>(java.lang.String, CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        java.lang.String newName;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newName := @parameter0: java.lang.String;
        newDrawingEditor := @parameter1: CH.ifa.draw.framework.DrawingEditor;
        specialinvoke this.<CH.ifa.draw.standard.AbstractCommand: void <init>(java.lang.String,CH.ifa.draw.framework.DrawingEditor,boolean)>(newName, newDrawingEditor, 1);
        return;
    }

    public void <init>(java.lang.String, CH.ifa.draw.framework.DrawingEditor, boolean)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        java.lang.String newName;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor, temp$0;
        boolean newIsViewRequired;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$1;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newName := @parameter0: java.lang.String;
        newDrawingEditor := @parameter1: CH.ifa.draw.framework.DrawingEditor;
        newIsViewRequired := @parameter2: boolean;
        specialinvoke this.<java.lang.Object: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: void setName(java.lang.String)>(newName);
        virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: void setDrawingEditor(CH.ifa.draw.framework.DrawingEditor)>(newDrawingEditor);
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: void addViewChangeListener(CH.ifa.draw.framework.ViewChangeListener)>(this);
        this.<CH.ifa.draw.standard.AbstractCommand: boolean myIsViewRequired> = newIsViewRequired;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher createEventDispatcher()>();
        virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: void setEventDispatcher(CH.ifa.draw.standard.AbstractCommand$EventDispatcher)>(temp$1);
        return;
    }

    public void viewSelectionChanged(CH.ifa.draw.framework.DrawingView, CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView oldView, newView;
        boolean temp$0, isOldViewInteractive, temp$1, temp$2, isNewViewInteractive, temp$3, temp$4;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$5, temp$6;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        oldView := @parameter0: CH.ifa.draw.framework.DrawingView;
        newView := @parameter1: CH.ifa.draw.framework.DrawingView;
        if oldView != null goto label0;

        goto label1;

     label0:
        nop;
        interfaceinvoke oldView.<CH.ifa.draw.framework.DrawingView: void removeFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(this);

     label1:
        nop;
        if newView != null goto label2;

        goto label3;

     label2:
        nop;
        interfaceinvoke newView.<CH.ifa.draw.framework.DrawingView: void addFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(this);

     label3:
        nop;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: boolean isViewRequired()>();
        if temp$0 == 0 goto label20;

        goto label4;

     label4:
        nop;
        if oldView != null goto label5;

        goto label6;

     label5:
        nop;
        temp$1 = interfaceinvoke oldView.<CH.ifa.draw.framework.DrawingView: boolean isInteractive()>();
        if temp$1 == 0 goto label6;

        goto label7;

        goto label7;

     label6:
        nop;
        temp$2 = 0;
        goto label8;

     label7:
        nop;
        temp$2 = 1;

     label8:
        nop;
        isOldViewInteractive = temp$2;
        if newView != null goto label9;

        goto label10;

     label9:
        nop;
        temp$3 = interfaceinvoke newView.<CH.ifa.draw.framework.DrawingView: boolean isInteractive()>();
        if temp$3 == 0 goto label10;

        goto label11;

        goto label11;

     label10:
        nop;
        temp$4 = 0;
        goto label12;

     label11:
        nop;
        temp$4 = 1;

     label12:
        nop;
        isNewViewInteractive = temp$4;
        if isOldViewInteractive == 0 goto label13;

        goto label15;

     label13:
        nop;
        if isNewViewInteractive == 0 goto label15;

        goto label14;

        goto label14;

     label14:
        nop;
        temp$5 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$5.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void fireCommandExecutableEvent()>();
        goto label19;

     label15:
        nop;
        if isOldViewInteractive == 0 goto label18;

        goto label16;

     label16:
        nop;
        if isNewViewInteractive == 0 goto label17;

        goto label18;

        goto label17;

     label17:
        nop;
        temp$6 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$6.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void fireCommandNotExecutableEvent()>();

     label18:
        nop;

     label19:
        nop;

     label20:
        nop;
        return;
    }

    public void viewCreated(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView view;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        return;
    }

    public void viewDestroying(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView view;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        return;
    }

    public void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView view;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        view := @parameter0: CH.ifa.draw.framework.DrawingView;
        return;
    }

    public CH.ifa.draw.framework.DrawingEditor getDrawingEditor()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingEditor temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingEditor myDrawingEditor>;
        return temp$0;
    }

    private final void setDrawingEditor(CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingEditor newDrawingEditor;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newDrawingEditor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingEditor myDrawingEditor> = newDrawingEditor;
        return;
    }

    public CH.ifa.draw.framework.DrawingView view()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.DrawingView temp$1;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingEditor getDrawingEditor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.DrawingView view()>();
        return temp$1;
    }

    public java.lang.String name()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        java.lang.String temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand: java.lang.String myName>;
        return temp$0;
    }

    public void setName(java.lang.String)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        java.lang.String newName;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newName := @parameter0: java.lang.String;
        this.<CH.ifa.draw.standard.AbstractCommand: java.lang.String myName> = newName;
        return;
    }

    public void dispose()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView temp$0, temp$1;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingView view()>();
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingView view()>();
        interfaceinvoke temp$1.<CH.ifa.draw.framework.DrawingView: void removeFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(this);

     label1:
        nop;
        return;
    }

    public void execute()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.framework.DrawingView temp$0;
        CH.ifa.draw.framework.JHotDrawRuntimeException temp$1;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingView view()>();
        if temp$0 == null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new CH.ifa.draw.framework.JHotDrawRuntimeException;
        specialinvoke temp$1.<CH.ifa.draw.framework.JHotDrawRuntimeException: void <init>(java.lang.String)>("execute should NOT be getting called when view() == null");
        throw temp$1;

     label1:
        nop;
        return;
    }

    public boolean isExecutable()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        boolean temp$0, temp$3, temp$4, temp$5;
        CH.ifa.draw.framework.DrawingView temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: boolean isViewRequired()>();
        if temp$0 == 0 goto label4;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingView view()>();
        if temp$1 == null goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.framework.DrawingView view()>();
        temp$3 = interfaceinvoke temp$2.<CH.ifa.draw.framework.DrawingView: boolean isInteractive()>();
        if temp$3 == 0 goto label2;

        goto label3;

        goto label3;

     label2:
        nop;
        temp$4 = 0;
        return temp$4;

     label3:
        nop;

     label4:
        nop;
        temp$5 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: boolean isExecutableWithView()>();
        return temp$5;
    }

    protected boolean isViewRequired()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand: boolean myIsViewRequired>;
        return temp$0;
    }

    protected boolean isExecutableWithView()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = 1;
        return temp$0;
    }

    public CH.ifa.draw.util.Undoable getUndoActivity()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.util.Undoable temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.util.Undoable myUndoableActivity>;
        return temp$0;
    }

    public void setUndoActivity(CH.ifa.draw.util.Undoable)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.util.Undoable newUndoableActivity;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newUndoableActivity := @parameter0: CH.ifa.draw.util.Undoable;
        this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.util.Undoable myUndoableActivity> = newUndoableActivity;
        return;
    }

    public void addCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.util.CommandListener newCommandListener;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void addCommandListener(CH.ifa.draw.util.CommandListener)>(newCommandListener);
        return;
    }

    public void removeCommandListener(CH.ifa.draw.util.CommandListener)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.util.CommandListener oldCommandListener;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        oldCommandListener := @parameter0: CH.ifa.draw.util.CommandListener;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()>();
        virtualinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void removeCommandListener(CH.ifa.draw.util.CommandListener)>(oldCommandListener);
        return;
    }

    private final void setEventDispatcher(CH.ifa.draw.standard.AbstractCommand$EventDispatcher)
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher newEventDispatcher;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        newEventDispatcher := @parameter0: CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher> = newEventDispatcher;
        return;
    }

    protected CH.ifa.draw.standard.AbstractCommand$EventDispatcher getEventDispatcher()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = this.<CH.ifa.draw.standard.AbstractCommand: CH.ifa.draw.standard.AbstractCommand$EventDispatcher myEventDispatcher>;
        return temp$0;
    }

    public CH.ifa.draw.standard.AbstractCommand$EventDispatcher createEventDispatcher()
    {
        CH.ifa.draw.standard.AbstractCommand this;
        CH.ifa.draw.standard.AbstractCommand$EventDispatcher temp$0;

        this := @this: CH.ifa.draw.standard.AbstractCommand;
        temp$0 = new CH.ifa.draw.standard.AbstractCommand$EventDispatcher;
        specialinvoke temp$0.<CH.ifa.draw.standard.AbstractCommand$EventDispatcher: void <init>(CH.ifa.draw.util.Command)>(this);
        return temp$0;
    }
}
