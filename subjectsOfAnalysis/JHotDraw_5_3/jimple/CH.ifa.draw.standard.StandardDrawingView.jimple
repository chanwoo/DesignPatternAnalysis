public class CH.ifa.draw.standard.StandardDrawingView extends javax.swing.JPanel implements CH.ifa.draw.framework.DrawingView, java.awt.event.KeyListener, java.awt.dnd.Autoscroll
{
    private CH.ifa.draw.framework.DrawingEditor fEditor;
    private java.util.Vector fSelectionListeners;
    private CH.ifa.draw.framework.Drawing fDrawing;
    private java.awt.Rectangle fDamage;
    private java.util.Vector fSelection;
    private java.util.Vector fSelectionHandles;
    private java.awt.Dimension fViewSize;
    private java.awt.Point fLastClick;
    private java.util.Vector fBackgrounds;
    private java.util.Vector fForegrounds;
    private CH.ifa.draw.framework.Painter fUpdateStrategy;
    private CH.ifa.draw.framework.PointConstrainer fConstrainer;
    public static final int MINIMUM_WIDTH;
    public static final int MINIMUM_HEIGHT;
    public static final int SCROLL_INCR;
    public static final int SCROLL_OFFSET;
    private static final long serialVersionUID;
    private int drawingViewSerializedDataVersion;
    java.awt.event.MouseListener ml;
    java.awt.event.MouseMotionListener mml;
    private CH.ifa.draw.standard.StandardDrawingView$ASH ash;
    static int counter;
    int myCounter;

    static void <clinit>()
    {
        int temp$0, temp$1, temp$2, temp$3;
        long temp$4;

        temp$0 = 400;
        <CH.ifa.draw.standard.StandardDrawingView: int MINIMUM_WIDTH> = temp$0;
        temp$1 = 300;
        <CH.ifa.draw.standard.StandardDrawingView: int MINIMUM_HEIGHT> = temp$1;
        temp$2 = 100;
        <CH.ifa.draw.standard.StandardDrawingView: int SCROLL_INCR> = temp$2;
        temp$3 = 10;
        <CH.ifa.draw.standard.StandardDrawingView: int SCROLL_OFFSET> = temp$3;
        temp$4 = -3878153366174603336L;
        <CH.ifa.draw.standard.StandardDrawingView: long serialVersionUID> = temp$4;
        return;
    }

    public void <init>(CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingEditor editor;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        editor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        specialinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void <init>(CH.ifa.draw.framework.DrawingEditor,int,int)>(editor, 400, 300);
        return;
    }

    public void <init>(CH.ifa.draw.framework.DrawingEditor, int, int)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingEditor editor, temp$12;
        int width, height, temp$3, temp$7, temp$8, temp$9;
        java.awt.Rectangle temp$0;
        java.util.Vector temp$1, temp$2, temp$11, temp$15;
        CH.ifa.draw.standard.StandardDrawingView$1Anonymous0 temp$4;
        CH.ifa.draw.standard.StandardDrawingView$2Anonymous1 temp$5;
        CH.ifa.draw.standard.StandardDrawingView$ASH temp$6;
        java.awt.Dimension temp$10;
        java.awt.Point temp$13;
        CH.ifa.draw.framework.PointConstrainer temp$14;
        CH.ifa.draw.standard.SimpleUpdateStrategy temp$16;
        java.awt.Color temp$17;
        java.awt.event.MouseListener temp$18;
        java.awt.event.MouseMotionListener temp$19;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        editor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        width := @parameter1: int;
        height := @parameter2: int;
        specialinvoke this.<javax.swing.JPanel: void <init>()>();
        temp$0 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage> = temp$0;
        temp$1 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds> = temp$1;
        temp$2 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds> = temp$2;
        temp$3 = 1;
        this.<CH.ifa.draw.standard.StandardDrawingView: int drawingViewSerializedDataVersion> = temp$3;
        temp$4 = new CH.ifa.draw.standard.StandardDrawingView$1Anonymous0;
        specialinvoke temp$4.<CH.ifa.draw.standard.StandardDrawingView$1Anonymous0: void <init>(CH.ifa.draw.standard.StandardDrawingView)>(this);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.event.MouseListener ml> = temp$4;
        temp$5 = new CH.ifa.draw.standard.StandardDrawingView$2Anonymous1;
        specialinvoke temp$5.<CH.ifa.draw.standard.StandardDrawingView$2Anonymous1: void <init>(CH.ifa.draw.standard.StandardDrawingView)>(this);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.event.MouseMotionListener mml> = temp$5;
        temp$6 = new CH.ifa.draw.standard.StandardDrawingView$ASH;
        specialinvoke temp$6.<CH.ifa.draw.standard.StandardDrawingView$ASH: void <init>(CH.ifa.draw.standard.StandardDrawingView,int)>(this, 10);
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.standard.StandardDrawingView$ASH ash> = temp$6;
        temp$7 = <CH.ifa.draw.standard.StandardDrawingView: int counter>;
        this.<CH.ifa.draw.standard.StandardDrawingView: int myCounter> = temp$7;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void setAutoscrolls(boolean)>(1);
        temp$8 = <CH.ifa.draw.standard.StandardDrawingView: int counter>;
        temp$9 = temp$8 + 1;
        <CH.ifa.draw.standard.StandardDrawingView: int counter> = temp$9;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor fEditor> = editor;
        temp$10 = new java.awt.Dimension;
        specialinvoke temp$10.<java.awt.Dimension: void <init>(int,int)>(width, height);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize> = temp$10;
        temp$11 = new java.util.Vector;
        specialinvoke temp$11.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners> = temp$11;
        temp$12 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor editor()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)>(temp$12);
        temp$13 = new java.awt.Point;
        specialinvoke temp$13.<java.awt.Point: void <init>(int,int)>(0, 0);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Point fLastClick> = temp$13;
        temp$14 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer> = temp$14;
        temp$15 = new java.util.Vector;
        specialinvoke temp$15.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection> = temp$15;
        temp$16 = new CH.ifa.draw.standard.SimpleUpdateStrategy;
        specialinvoke temp$16.<CH.ifa.draw.standard.SimpleUpdateStrategy: void <init>()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void setDisplayUpdate(CH.ifa.draw.framework.Painter)>(temp$16);
        temp$17 = <java.awt.Color: java.awt.Color lightGray>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void setBackground(java.awt.Color)>(temp$17);
        temp$18 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.event.MouseListener ml>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addMouseListener(java.awt.event.MouseListener)>(temp$18);
        temp$19 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.event.MouseMotionListener mml>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(temp$19);
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addKeyListener(java.awt.event.KeyListener)>(this);
        return;
    }

    public void setEditor(CH.ifa.draw.framework.DrawingEditor)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingEditor editor;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        editor := @parameter0: CH.ifa.draw.framework.DrawingEditor;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor fEditor> = editor;
        return;
    }

    public CH.ifa.draw.framework.Tool tool()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingEditor temp$0;
        CH.ifa.draw.framework.Tool temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor editor()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.DrawingEditor: CH.ifa.draw.framework.Tool tool()>();
        return temp$1;
    }

    public CH.ifa.draw.framework.Drawing drawing()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        return temp$0;
    }

    public void setDrawing(CH.ifa.draw.framework.Drawing)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Drawing d, temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        d := @parameter0: CH.ifa.draw.framework.Drawing;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void clearSelection()>();
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        interfaceinvoke temp$1.<CH.ifa.draw.framework.Drawing: void removeDrawingChangeListener(CH.ifa.draw.framework.DrawingChangeListener)>(this);

     label1:
        nop;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing> = d;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        if temp$2 != null goto label2;

        goto label3;

     label2:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        interfaceinvoke temp$3.<CH.ifa.draw.framework.Drawing: void addDrawingChangeListener(CH.ifa.draw.framework.DrawingChangeListener)>(this);

     label3:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void checkMinimumSize()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint()>();
        return;
    }

    public CH.ifa.draw.framework.DrawingEditor editor()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingEditor temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor fEditor>;
        return temp$0;
    }

    public CH.ifa.draw.framework.Figure add(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure figure, temp$1;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.Figure add(CH.ifa.draw.framework.Figure)>(figure);
        return temp$1;
    }

    public CH.ifa.draw.framework.Figure remove(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure figure, temp$1;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.Figure remove(CH.ifa.draw.framework.Figure)>(figure);
        return temp$1;
    }

    public void addAll(java.util.Vector)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector figures;
        CH.ifa.draw.framework.FigureEnumeration k;
        CH.ifa.draw.standard.FigureEnumerator temp$0;
        boolean temp$1;
        CH.ifa.draw.framework.Figure temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figures := @parameter0: java.util.Vector;
        temp$0 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$0.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(figures);
        k = temp$0;

     label0:
        nop;
        temp$1 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$1 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Figure add(CH.ifa.draw.framework.Figure)>(temp$2);
        goto label0;

     label2:
        nop;
        return;
    }

    public boolean figureExists(CH.ifa.draw.framework.Figure, CH.ifa.draw.framework.FigureEnumeration)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure inf, figure, temp$1;
        CH.ifa.draw.framework.FigureEnumeration e;
        boolean temp$0, temp$2, temp$3, temp$4;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        inf := @parameter0: CH.ifa.draw.framework.Figure;
        e := @parameter1: CH.ifa.draw.framework.FigureEnumeration;

     label0:
        nop;
        temp$0 = interfaceinvoke e.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$0 == 0 goto label4;

        goto label1;

     label1:
        nop;
        temp$1 = interfaceinvoke e.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        figure = temp$1;
        temp$2 = interfaceinvoke figure.<CH.ifa.draw.framework.Figure: boolean includes(CH.ifa.draw.framework.Figure)>(inf);
        if temp$2 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$3 = 1;
        return temp$3;

     label3:
        nop;
        goto label0;

     label4:
        nop;
        temp$4 = 0;
        return temp$4;
    }

    public CH.ifa.draw.framework.FigureEnumeration insertFigures(CH.ifa.draw.framework.FigureEnumeration, int, int, boolean)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.FigureEnumeration fe, temp$0, ecf, temp$13, temp$16;
        int dx, dy, temp$22, temp$23, temp$26, temp$27;
        boolean bCheck, temp$3, temp$5, temp$8, temp$14, temp$17, temp$18;
        java.util.Vector addedFigures, temp$1, vCF, temp$2;
        CH.ifa.draw.framework.Figure figure, temp$4, temp$6, temp$9, sf, temp$10, ef, temp$11, temp$21, temp$25, nf, temp$29;
        CH.ifa.draw.standard.FigureEnumerator temp$7, temp$30;
        CH.ifa.draw.framework.ConnectionFigure cf;
        CH.ifa.draw.framework.Drawing temp$12, temp$15;
        java.awt.Point sp, temp$19, ep, temp$20;
        CH.ifa.draw.framework.Connector fStartConnector, temp$24, fEndConnector, temp$28;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        fe := @parameter0: CH.ifa.draw.framework.FigureEnumeration;
        dx := @parameter1: int;
        dy := @parameter2: int;
        bCheck := @parameter3: boolean;
        if fe == null goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = staticinvoke <CH.ifa.draw.standard.FigureEnumerator: CH.ifa.draw.framework.FigureEnumeration getEmptyEnumeration()>();
        return temp$0;

     label1:
        nop;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>()>();
        addedFigures = temp$1;
        temp$2 = new java.util.Vector;
        specialinvoke temp$2.<java.util.Vector: void <init>(int)>(10);
        vCF = temp$2;

     label2:
        nop;
        temp$3 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$3 == 0 goto label9;

        goto label3;

     label3:
        nop;
        temp$4 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        figure = temp$4;
        temp$5 = figure instanceof CH.ifa.draw.framework.ConnectionFigure;
        if temp$5 == 0 goto label5;

        goto label4;

     label4:
        nop;
        virtualinvoke vCF.<java.util.Vector: void addElement(java.lang.Object)>(figure);
        goto label8;

     label5:
        nop;
        if figure != null goto label6;

        goto label7;

     label6:
        nop;
        interfaceinvoke figure.<CH.ifa.draw.framework.Figure: void moveBy(int,int)>(dx, dy);
        temp$6 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Figure add(CH.ifa.draw.framework.Figure)>(figure);
        figure = temp$6;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addToSelection(CH.ifa.draw.framework.Figure)>(figure);
        virtualinvoke addedFigures.<java.util.Vector: void addElement(java.lang.Object)>(figure);

     label7:
        nop;

     label8:
        nop;
        goto label2;

     label9:
        nop;
        temp$7 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$7.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(vCF);
        ecf = temp$7;

     label10:
        nop;
        temp$8 = interfaceinvoke ecf.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$8 == 0 goto label22;

        goto label11;

     label11:
        nop;
        temp$9 = interfaceinvoke ecf.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        cf = (CH.ifa.draw.framework.ConnectionFigure) temp$9;
        temp$10 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure startFigure()>();
        sf = temp$10;
        temp$11 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure endFigure()>();
        ef = temp$11;
        temp$12 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$13 = interfaceinvoke temp$12.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figures()>();
        temp$14 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean figureExists(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.FigureEnumeration)>(sf, temp$13);
        if temp$14 == 0 goto label21;

        goto label12;

     label12:
        nop;
        temp$15 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$16 = interfaceinvoke temp$15.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figures()>();
        temp$17 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean figureExists(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.FigureEnumeration)>(ef, temp$16);
        if temp$17 == 0 goto label21;

        goto label13;

        goto label13;

     label13:
        nop;
        if bCheck == 0 goto label15;

        goto label14;

     label14:
        nop;
        temp$18 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: boolean canConnect(CH.ifa.draw.framework.Figure,CH.ifa.draw.framework.Figure)>(sf, ef);
        if temp$18 == 0 goto label21;

        goto label15;

        goto label21;

        goto label15;

     label15:
        nop;
        if bCheck == 0 goto label20;

        goto label16;

     label16:
        nop;
        temp$19 = interfaceinvoke sf.<CH.ifa.draw.framework.Figure: java.awt.Point center()>();
        sp = temp$19;
        temp$20 = interfaceinvoke ef.<CH.ifa.draw.framework.Figure: java.awt.Point center()>();
        ep = temp$20;
        temp$21 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure startFigure()>();
        temp$22 = ep.<java.awt.Point: int x>;
        temp$23 = ep.<java.awt.Point: int y>;
        temp$24 = interfaceinvoke temp$21.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Connector connectorAt(int,int)>(temp$22, temp$23);
        fStartConnector = temp$24;
        temp$25 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure endFigure()>();
        temp$26 = sp.<java.awt.Point: int x>;
        temp$27 = sp.<java.awt.Point: int y>;
        temp$28 = interfaceinvoke temp$25.<CH.ifa.draw.framework.Figure: CH.ifa.draw.framework.Connector connectorAt(int,int)>(temp$26, temp$27);
        fEndConnector = temp$28;
        if fEndConnector != null goto label17;

        goto label19;

     label17:
        nop;
        if fStartConnector != null goto label18;

        goto label19;

        goto label18;

     label18:
        nop;
        interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: void connectStart(CH.ifa.draw.framework.Connector)>(fStartConnector);
        interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: void connectEnd(CH.ifa.draw.framework.Connector)>(fEndConnector);
        interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: void updateConnection()>();

     label19:
        nop;

     label20:
        nop;
        temp$29 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Figure add(CH.ifa.draw.framework.Figure)>(cf);
        nf = temp$29;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addToSelection(CH.ifa.draw.framework.Figure)>(nf);
        virtualinvoke addedFigures.<java.util.Vector: void addElement(java.lang.Object)>(nf);

     label21:
        nop;
        goto label10;

     label22:
        nop;
        temp$30 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$30.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(addedFigures);
        return temp$30;
    }

    public java.util.Vector getConnectionFigures(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure inFigure, f, temp$6, temp$9, temp$11;
        boolean temp$0, temp$5, temp$7, temp$8, temp$10, temp$12;
        java.util.Vector temp$1, result, temp$2;
        CH.ifa.draw.framework.FigureEnumeration figures, temp$4;
        CH.ifa.draw.framework.Drawing temp$3;
        CH.ifa.draw.framework.ConnectionFigure cf;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        inFigure := @parameter0: CH.ifa.draw.framework.Figure;
        if inFigure == null goto label1;

        goto label0;

     label0:
        nop;
        temp$0 = interfaceinvoke inFigure.<CH.ifa.draw.framework.Figure: boolean canConnect()>();
        if temp$0 == 0 goto label1;

        goto label2;

        goto label2;

     label1:
        nop;
        temp$1 = null;
        return temp$1;

     label2:
        nop;
        temp$2 = new java.util.Vector;
        specialinvoke temp$2.<java.util.Vector: void <init>(int)>(5);
        result = temp$2;
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$4 = interfaceinvoke temp$3.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figures()>();
        figures = temp$4;

     label3:
        nop;
        temp$5 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$5 == 0 goto label11;

        goto label4;

     label4:
        nop;
        temp$6 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        f = temp$6;
        temp$7 = f instanceof CH.ifa.draw.framework.ConnectionFigure;
        if temp$7 == 0 goto label10;

        goto label5;

     label5:
        nop;
        temp$8 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean isFigureSelected(CH.ifa.draw.framework.Figure)>(f);
        if temp$8 == 0 goto label6;

        goto label10;

        goto label6;

     label6:
        nop;
        cf = (CH.ifa.draw.framework.ConnectionFigure) f;
        temp$9 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure startFigure()>();
        temp$10 = interfaceinvoke temp$9.<CH.ifa.draw.framework.Figure: boolean includes(CH.ifa.draw.framework.Figure)>(inFigure);
        if temp$10 == 0 goto label7;

        goto label8;

     label7:
        nop;
        temp$11 = interfaceinvoke cf.<CH.ifa.draw.framework.ConnectionFigure: CH.ifa.draw.framework.Figure endFigure()>();
        temp$12 = interfaceinvoke temp$11.<CH.ifa.draw.framework.Figure: boolean includes(CH.ifa.draw.framework.Figure)>(inFigure);
        if temp$12 == 0 goto label9;

        goto label8;

        goto label9;

     label8:
        nop;
        virtualinvoke result.<java.util.Vector: void addElement(java.lang.Object)>(f);

     label9:
        nop;

     label10:
        nop;
        goto label3;

     label11:
        nop;
        return result;
    }

    public java.awt.Dimension getMinimumSize()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Dimension temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        return temp$0;
    }

    public java.awt.Dimension getPreferredSize()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Dimension temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension getMinimumSize()>();
        return temp$0;
    }

    public void setDisplayUpdate(CH.ifa.draw.framework.Painter)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter updateStrategy;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        updateStrategy := @parameter0: CH.ifa.draw.framework.Painter;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Painter fUpdateStrategy> = updateStrategy;
        return;
    }

    public CH.ifa.draw.framework.Painter getDisplayUpdate()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Painter fUpdateStrategy>;
        return temp$0;
    }

    public java.util.Vector selection()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector temp$0, temp$2;
        java.lang.Object temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: java.lang.Object clone()>();
        temp$2 = (java.util.Vector) temp$1;
        return temp$2;
    }

    public CH.ifa.draw.framework.FigureEnumeration selectionElements()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.standard.FigureEnumerator temp$0;
        java.util.Vector temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = new CH.ifa.draw.standard.FigureEnumerator;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector selectionZOrdered()>();
        specialinvoke temp$0.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(temp$1);
        return temp$0;
    }

    public java.util.Vector selectionZOrdered()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector result, temp$0;
        int temp$1;
        CH.ifa.draw.framework.FigureEnumeration figures, temp$3;
        CH.ifa.draw.framework.Drawing temp$2;
        boolean temp$4, temp$6;
        CH.ifa.draw.framework.Figure f, temp$5;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = new java.util.Vector;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: int selectionCount()>();
        specialinvoke temp$0.<java.util.Vector: void <init>(int)>(temp$1);
        result = temp$0;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$3 = interfaceinvoke temp$2.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figures()>();
        figures = temp$3;

     label0:
        nop;
        temp$4 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$4 == 0 goto label4;

        goto label1;

     label1:
        nop;
        temp$5 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        f = temp$5;
        temp$6 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean isFigureSelected(CH.ifa.draw.framework.Figure)>(f);
        if temp$6 == 0 goto label3;

        goto label2;

     label2:
        nop;
        virtualinvoke result.<java.util.Vector: void addElement(java.lang.Object)>(f);

     label3:
        nop;
        goto label0;

     label4:
        nop;
        return result;
    }

    public int selectionCount()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector temp$0;
        int temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: int size()>();
        return temp$1;
    }

    public boolean isFigureSelected(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure checkFigure;
        java.util.Vector temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        checkFigure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean contains(java.lang.Object)>(checkFigure);
        return temp$1;
    }

    public void addToSelection(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure figure;
        boolean temp$0, temp$2;
        CH.ifa.draw.framework.Drawing temp$1;
        java.util.Vector temp$3, temp$4;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean isFigureSelected(CH.ifa.draw.framework.Figure)>(figure);
        if temp$0 == 0 goto label0;

        goto label2;

     label0:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$2 = interfaceinvoke temp$1.<CH.ifa.draw.framework.Drawing: boolean includes(CH.ifa.draw.framework.Figure)>(figure);
        if temp$2 == 0 goto label2;

        goto label1;

        goto label1;

     label1:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection>;
        virtualinvoke temp$3.<java.util.Vector: void addElement(java.lang.Object)>(figure);
        temp$4 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles> = temp$4;
        interfaceinvoke figure.<CH.ifa.draw.framework.Figure: void invalidate()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void fireSelectionChanged()>();

     label2:
        nop;
        return;
    }

    public void addToSelectionAll(java.util.Vector)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector figures;
        CH.ifa.draw.standard.FigureEnumerator temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figures := @parameter0: java.util.Vector;
        temp$0 = new CH.ifa.draw.standard.FigureEnumerator;
        specialinvoke temp$0.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(figures);
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addToSelectionAll(CH.ifa.draw.framework.FigureEnumeration)>(temp$0);
        return;
    }

    public void addToSelectionAll(CH.ifa.draw.framework.FigureEnumeration)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.FigureEnumeration fe;
        boolean temp$0;
        CH.ifa.draw.framework.Figure temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        fe := @parameter0: CH.ifa.draw.framework.FigureEnumeration;

     label0:
        nop;
        temp$0 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$0 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$1 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addToSelection(CH.ifa.draw.framework.Figure)>(temp$1);
        goto label0;

     label2:
        nop;
        return;
    }

    public void removeFromSelection(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure figure;
        boolean temp$0, temp$2;
        java.util.Vector temp$1, temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean isFigureSelected(CH.ifa.draw.framework.Figure)>(figure);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: boolean removeElement(java.lang.Object)>(figure);
        temp$3 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles> = temp$3;
        interfaceinvoke figure.<CH.ifa.draw.framework.Figure: void invalidate()>();
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void fireSelectionChanged()>();

     label1:
        nop;
        return;
    }

    public void toggleSelection(CH.ifa.draw.framework.Figure)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Figure figure;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        figure := @parameter0: CH.ifa.draw.framework.Figure;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: boolean isFigureSelected(CH.ifa.draw.framework.Figure)>(figure);
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void removeFromSelection(CH.ifa.draw.framework.Figure)>(figure);
        goto label2;

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void addToSelection(CH.ifa.draw.framework.Figure)>(figure);

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void fireSelectionChanged()>();
        return;
    }

    public void clearSelection()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector temp$0, temp$4, temp$5;
        CH.ifa.draw.framework.FigureEnumeration fe, temp$1;
        boolean temp$2;
        CH.ifa.draw.framework.Figure temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles>;
        if temp$0 == null goto label0;

        goto label1;

     label0:
        nop;
        return;

     label1:
        nop;
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.FigureEnumeration selectionElements()>();
        fe = temp$1;

     label2:
        nop;
        temp$2 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$3 = interfaceinvoke fe.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        interfaceinvoke temp$3.<CH.ifa.draw.framework.Figure: void invalidate()>();
        goto label2;

     label4:
        nop;
        temp$4 = new java.util.Vector;
        specialinvoke temp$4.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection> = temp$4;
        temp$5 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles> = temp$5;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void fireSelectionChanged()>();
        return;
    }

    private final java.util.Enumeration selectionHandles()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector temp$0, temp$1, temp$5, temp$8, temp$10;
        CH.ifa.draw.framework.FigureEnumeration k, temp$2;
        boolean temp$3, temp$7;
        CH.ifa.draw.framework.Figure figure, temp$4;
        java.util.Enumeration kk, temp$6, temp$11;
        java.lang.Object temp$9;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles>;
        if temp$0 == null goto label0;

        goto label7;

     label0:
        nop;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles> = temp$1;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.FigureEnumeration selectionElements()>();
        k = temp$2;

     label1:
        nop;
        temp$3 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$3 == 0 goto label6;

        goto label2;

     label2:
        nop;
        temp$4 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        figure = temp$4;
        temp$5 = interfaceinvoke figure.<CH.ifa.draw.framework.Figure: java.util.Vector handles()>();
        temp$6 = virtualinvoke temp$5.<java.util.Vector: java.util.Enumeration elements()>();
        kk = temp$6;

     label3:
        nop;
        temp$7 = interfaceinvoke kk.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$7 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$8 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles>;
        temp$9 = interfaceinvoke kk.<java.util.Enumeration: java.lang.Object nextElement()>();
        virtualinvoke temp$8.<java.util.Vector: void addElement(java.lang.Object)>(temp$9);
        goto label3;

     label5:
        nop;
        goto label1;

     label6:
        nop;

     label7:
        nop;
        temp$10 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionHandles>;
        temp$11 = virtualinvoke temp$10.<java.util.Vector: java.util.Enumeration elements()>();
        return temp$11;
    }

    public CH.ifa.draw.framework.FigureSelection getFigureSelection()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.standard.StandardFigureSelection temp$0;
        CH.ifa.draw.standard.FigureEnumerator temp$1;
        java.util.Vector temp$2;
        int temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = new CH.ifa.draw.standard.StandardFigureSelection;
        temp$1 = new CH.ifa.draw.standard.FigureEnumerator;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector selectionZOrdered()>();
        specialinvoke temp$1.<CH.ifa.draw.standard.FigureEnumerator: void <init>(java.util.Vector)>(temp$2);
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: int selectionCount()>();
        specialinvoke temp$0.<CH.ifa.draw.standard.StandardFigureSelection: void <init>(CH.ifa.draw.framework.FigureEnumeration,int)>(temp$1, temp$3);
        return temp$0;
    }

    public CH.ifa.draw.framework.Handle findHandle(int, int)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        int x, y;
        CH.ifa.draw.framework.Handle handle, temp$3, temp$5;
        java.util.Enumeration k, temp$0;
        boolean temp$1, temp$4;
        java.lang.Object temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        x := @parameter0: int;
        y := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Enumeration selectionHandles()>();
        k = temp$0;

     label0:
        nop;
        temp$1 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$1 == 0 goto label4;

        goto label1;

     label1:
        nop;
        temp$2 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$3 = (CH.ifa.draw.framework.Handle) temp$2;
        handle = temp$3;
        temp$4 = interfaceinvoke handle.<CH.ifa.draw.framework.Handle: boolean containsPoint(int,int)>(x, y);
        if temp$4 == 0 goto label3;

        goto label2;

     label2:
        nop;
        return handle;

     label3:
        nop;
        goto label0;

     label4:
        nop;
        temp$5 = null;
        return temp$5;
    }

    protected void fireSelectionChanged()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Vector temp$0, temp$1, temp$3;
        int i, temp$2, temp$5, temp$6;
        CH.ifa.draw.framework.FigureSelectionListener l;
        java.lang.Object temp$4;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners>;
        if temp$0 != null goto label0;

        goto label4;

     label0:
        nop;
        i = 0;

     label1:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: int size()>();
        if i < temp$2 goto label2;

        goto label3;

     label2:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners>;
        temp$4 = virtualinvoke temp$3.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        l = (CH.ifa.draw.framework.FigureSelectionListener) temp$4;
        interfaceinvoke l.<CH.ifa.draw.framework.FigureSelectionListener: void figureSelectionChanged(CH.ifa.draw.framework.DrawingView)>(this);
        nop;
        temp$5 = i;
        temp$6 = temp$5 + 1;
        i = temp$6;
        goto label1;

     label3:
        nop;

     label4:
        nop;
        return;
    }

    public java.awt.Point lastClick()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Point temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Point fLastClick>;
        return temp$0;
    }

    public void setConstrainer(CH.ifa.draw.framework.PointConstrainer)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.PointConstrainer c;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        c := @parameter0: CH.ifa.draw.framework.PointConstrainer;
        this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer> = c;
        return;
    }

    public CH.ifa.draw.framework.PointConstrainer getConstrainer()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.PointConstrainer temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        return temp$0;
    }

    protected java.awt.Point constrainPoint(java.awt.Point)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Point p, temp$9;
        java.awt.Dimension size, temp$0;
        int temp$1, temp$2, temp$3, temp$4, temp$5, temp$6;
        CH.ifa.draw.framework.PointConstrainer temp$7, temp$8;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        p := @parameter0: java.awt.Point;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension getSize()>();
        size = temp$0;
        temp$1 = size.<java.awt.Dimension: int width>;
        temp$2 = p.<java.awt.Point: int x>;
        temp$3 = staticinvoke <CH.ifa.draw.util.Geom: int range(int,int,int)>(1, temp$1, temp$2);
        p.<java.awt.Point: int x> = temp$3;
        temp$4 = size.<java.awt.Dimension: int height>;
        temp$5 = p.<java.awt.Point: int y>;
        temp$6 = staticinvoke <CH.ifa.draw.util.Geom: int range(int,int,int)>(1, temp$4, temp$5);
        p.<java.awt.Point: int y> = temp$6;
        temp$7 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        if temp$7 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$8 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        temp$9 = interfaceinvoke temp$8.<CH.ifa.draw.framework.PointConstrainer: java.awt.Point constrainPoint(java.awt.Point)>(p);
        return temp$9;

     label1:
        nop;
        return p;
    }

    public void keyPressed(java.awt.event.KeyEvent)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.event.KeyEvent e;
        int code, temp$0;
        CH.ifa.draw.util.Command cmd;
        CH.ifa.draw.standard.DeleteCommand temp$1;
        CH.ifa.draw.framework.DrawingEditor temp$2;
        boolean temp$3;
        CH.ifa.draw.framework.Tool temp$4;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        e := @parameter0: java.awt.event.KeyEvent;
        temp$0 = virtualinvoke e.<java.awt.event.KeyEvent: int getKeyCode()>();
        code = temp$0;
        if code == 8 goto label1;

        goto label0;

     label0:
        nop;
        if code == 127 goto label1;

        goto label4;

        goto label4;

     label1:
        nop;
        temp$1 = new CH.ifa.draw.standard.DeleteCommand;
        temp$2 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.DrawingEditor editor()>();
        specialinvoke temp$1.<CH.ifa.draw.standard.DeleteCommand: void <init>(java.lang.String,CH.ifa.draw.framework.DrawingEditor)>("Delete", temp$2);
        cmd = temp$1;
        temp$3 = interfaceinvoke cmd.<CH.ifa.draw.util.Command: boolean isExecutable()>();
        if temp$3 == 0 goto label3;

        goto label2;

     label2:
        nop;
        interfaceinvoke cmd.<CH.ifa.draw.util.Command: void execute()>();

     label3:
        nop;
        goto label11;

     label4:
        nop;
        if code == 40 goto label8;

        goto label5;

     label5:
        nop;
        if code == 38 goto label8;

        goto label6;

        goto label6;

     label6:
        nop;
        if code == 39 goto label8;

        goto label7;

        goto label7;

     label7:
        nop;
        if code == 37 goto label8;

        goto label9;

        goto label9;

     label8:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void handleCursorKey(int)>(code);
        goto label10;

     label9:
        nop;
        temp$4 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Tool tool()>();
        interfaceinvoke temp$4.<CH.ifa.draw.framework.Tool: void keyDown(java.awt.event.KeyEvent,int)>(e, code);

     label10:
        nop;

     label11:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void checkDamage()>();
        return;
    }

    protected void handleCursorKey(int)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        int key, dx, dy, stepX, stepY, temp$2, temp$4, temp$5, temp$6;
        CH.ifa.draw.framework.PointConstrainer temp$0, temp$1, temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        key := @parameter0: int;
        dx = 0;
        dy = 0;
        stepX = 1;
        stepY = 1;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        temp$2 = interfaceinvoke temp$1.<CH.ifa.draw.framework.PointConstrainer: int getStepX()>();
        stepX = temp$2;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.PointConstrainer fConstrainer>;
        temp$4 = interfaceinvoke temp$3.<CH.ifa.draw.framework.PointConstrainer: int getStepY()>();
        stepY = temp$4;

     label1:
        nop;
        goto label6;

     label2:
        nop;
        dy = stepY;
        goto label7;

     label3:
        nop;
        temp$5 = neg stepY;
        dy = temp$5;
        goto label7;

     label4:
        nop;
        dx = stepX;
        goto label7;

     label5:
        nop;
        temp$6 = neg stepX;
        dx = temp$6;
        goto label7;

        goto label7;

     label6:
        nop;
        nop;
        tableswitch(key)
        {
            case 37: goto label5;
            case 38: goto label3;
            case 39: goto label4;
            case 40: goto label2;
            default: goto label7;
        };

     label7:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void moveSelection(int,int)>(dx, dy);
        return;
    }

    private final void moveSelection(int, int)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        int dx, dy;
        CH.ifa.draw.framework.FigureEnumeration figures, temp$0;
        boolean temp$1;
        CH.ifa.draw.framework.Figure temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        dx := @parameter0: int;
        dy := @parameter1: int;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.FigureEnumeration selectionElements()>();
        figures = temp$0;

     label0:
        nop;
        temp$1 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$1 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = interfaceinvoke figures.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        interfaceinvoke temp$2.<CH.ifa.draw.framework.Figure: void moveBy(int,int)>(dx, dy);
        goto label0;

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void checkDamage()>();
        return;
    }

    public synchronized void checkDamage()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.util.Enumeration each, temp$1;
        CH.ifa.draw.framework.Drawing temp$0;
        boolean temp$2, temp$4;
        java.lang.Object l, temp$3;
        CH.ifa.draw.framework.DrawingView temp$5;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: java.util.Enumeration drawingChangeListeners()>();
        each = temp$1;

     label0:
        nop;
        temp$2 = interfaceinvoke each.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$2 == 0 goto label4;

        goto label1;

     label1:
        nop;
        temp$3 = interfaceinvoke each.<java.util.Enumeration: java.lang.Object nextElement()>();
        l = temp$3;
        temp$4 = l instanceof CH.ifa.draw.framework.DrawingView;
        if temp$4 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$5 = (CH.ifa.draw.framework.DrawingView) l;
        interfaceinvoke temp$5.<CH.ifa.draw.framework.DrawingView: void repairDamage()>();

     label3:
        nop;
        goto label0;

     label4:
        nop;
        return;
    }

    public void repairDamage()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Rectangle temp$0, temp$1, temp$3, temp$5, temp$7, temp$9;
        int temp$2, temp$4, temp$6, temp$8;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        temp$2 = temp$1.<java.awt.Rectangle: int x>;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        temp$4 = temp$3.<java.awt.Rectangle: int y>;
        temp$5 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        temp$6 = temp$5.<java.awt.Rectangle: int width>;
        temp$7 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        temp$8 = temp$7.<java.awt.Rectangle: int height>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint(int,int,int,int)>(temp$2, temp$4, temp$6, temp$8);
        temp$9 = null;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage> = temp$9;

     label1:
        nop;
        return;
    }

    public void drawingInvalidated(CH.ifa.draw.framework.DrawingChangeEvent)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingChangeEvent e;
        java.awt.Rectangle r, temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        e := @parameter0: CH.ifa.draw.framework.DrawingChangeEvent;
        temp$0 = virtualinvoke e.<CH.ifa.draw.framework.DrawingChangeEvent: java.awt.Rectangle getInvalidatedRectangle()>();
        r = temp$0;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        if temp$1 == null goto label0;

        goto label1;

     label0:
        nop;
        this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage> = r;
        goto label2;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle fDamage>;
        virtualinvoke temp$2.<java.awt.Rectangle: void add(java.awt.Rectangle)>(r);

     label2:
        nop;
        return;
    }

    public void drawingRequestUpdate(CH.ifa.draw.framework.DrawingChangeEvent)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.DrawingChangeEvent e;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        e := @parameter0: CH.ifa.draw.framework.DrawingChangeEvent;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repairDamage()>();
        return;
    }

    protected void paintComponent(java.awt.Graphics)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        CH.ifa.draw.framework.Painter temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Painter getDisplayUpdate()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Painter: void draw(java.awt.Graphics,CH.ifa.draw.framework.DrawingView)>(g, this);
        return;
    }

    public void drawAll(java.awt.Graphics)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        boolean isPrinting;
        java.util.Vector temp$0, temp$1, temp$2, temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        isPrinting = g instanceof java.awt.PrintGraphics;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawBackground(java.awt.Graphics)>(g);
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        if temp$0 != null goto label0;

        goto label2;

     label0:
        nop;
        if isPrinting == 0 goto label1;

        goto label2;

        goto label1;

     label1:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawPainters(java.awt.Graphics,java.util.Vector)>(g, temp$1);

     label2:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawDrawing(java.awt.Graphics)>(g);
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        if temp$2 != null goto label3;

        goto label5;

     label3:
        nop;
        if isPrinting == 0 goto label4;

        goto label5;

        goto label4;

     label4:
        nop;
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawPainters(java.awt.Graphics,java.util.Vector)>(g, temp$3);

     label5:
        nop;
        if isPrinting == 0 goto label6;

        goto label7;

     label6:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawHandles(java.awt.Graphics)>(g);

     label7:
        nop;
        return;
    }

    public void draw(java.awt.Graphics, CH.ifa.draw.framework.FigureEnumeration)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        CH.ifa.draw.framework.FigureEnumeration fe;
        boolean isPrinting;
        java.util.Vector temp$0, temp$1, temp$3, temp$4;
        CH.ifa.draw.framework.Drawing temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        fe := @parameter1: CH.ifa.draw.framework.FigureEnumeration;
        isPrinting = g instanceof java.awt.PrintGraphics;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        if temp$0 != null goto label0;

        goto label2;

     label0:
        nop;
        if isPrinting == 0 goto label1;

        goto label2;

        goto label1;

     label1:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawPainters(java.awt.Graphics,java.util.Vector)>(g, temp$1);

     label2:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        interfaceinvoke temp$2.<CH.ifa.draw.framework.Drawing: void draw(java.awt.Graphics,CH.ifa.draw.framework.FigureEnumeration)>(g, fe);
        temp$3 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        if temp$3 != null goto label3;

        goto label5;

     label3:
        nop;
        if isPrinting == 0 goto label4;

        goto label5;

        goto label4;

     label4:
        nop;
        temp$4 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawPainters(java.awt.Graphics,java.util.Vector)>(g, temp$4);

     label5:
        nop;
        if isPrinting == 0 goto label6;

        goto label7;

     label6:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void drawHandles(java.awt.Graphics)>(g);

     label7:
        nop;
        return;
    }

    public void drawHandles(java.awt.Graphics)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        java.util.Enumeration k, temp$0;
        boolean temp$1;
        java.lang.Object temp$2;
        CH.ifa.draw.framework.Handle temp$3;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Enumeration selectionHandles()>();
        k = temp$0;

     label0:
        nop;
        temp$1 = interfaceinvoke k.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$1 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$2 = interfaceinvoke k.<java.util.Enumeration: java.lang.Object nextElement()>();
        temp$3 = (CH.ifa.draw.framework.Handle) temp$2;
        interfaceinvoke temp$3.<CH.ifa.draw.framework.Handle: void draw(java.awt.Graphics)>(g);
        goto label0;

     label2:
        nop;
        return;
    }

    public void drawDrawing(java.awt.Graphics)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: void draw(java.awt.Graphics)>(g);
        return;
    }

    public void drawBackground(java.awt.Graphics)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        java.awt.Color temp$0;
        java.awt.Rectangle temp$1, temp$3;
        int temp$2, temp$4;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Color getBackground()>();
        virtualinvoke g.<java.awt.Graphics: void setColor(java.awt.Color)>(temp$0);
        temp$1 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle getBounds()>();
        temp$2 = temp$1.<java.awt.Rectangle: int width>;
        temp$3 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Rectangle getBounds()>();
        temp$4 = temp$3.<java.awt.Rectangle: int height>;
        virtualinvoke g.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, temp$2, temp$4);
        return;
    }

    private final void drawPainters(java.awt.Graphics, java.util.Vector)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Graphics g;
        java.util.Vector v;
        int i, temp$0, temp$3, temp$4;
        java.lang.Object temp$1;
        CH.ifa.draw.framework.Painter temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        g := @parameter0: java.awt.Graphics;
        v := @parameter1: java.util.Vector;
        i = 0;

     label0:
        nop;
        temp$0 = virtualinvoke v.<java.util.Vector: int size()>();
        if i < temp$0 goto label1;

        goto label2;

     label1:
        nop;
        temp$1 = virtualinvoke v.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        temp$2 = (CH.ifa.draw.framework.Painter) temp$1;
        interfaceinvoke temp$2.<CH.ifa.draw.framework.Painter: void draw(java.awt.Graphics,CH.ifa.draw.framework.DrawingView)>(g, this);
        nop;
        temp$3 = i;
        temp$4 = temp$3 + 1;
        i = temp$4;
        goto label0;

     label2:
        nop;
        return;
    }

    public void addBackground(CH.ifa.draw.framework.Painter)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter painter;
        java.util.Vector temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        painter := @parameter0: CH.ifa.draw.framework.Painter;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        if temp$0 == null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>(int)>(3);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds> = temp$1;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        virtualinvoke temp$2.<java.util.Vector: void addElement(java.lang.Object)>(painter);
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint()>();
        return;
    }

    public void removeBackground(CH.ifa.draw.framework.Painter)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter painter;
        java.util.Vector temp$0, temp$1;
        boolean temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        painter := @parameter0: CH.ifa.draw.framework.Painter;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fBackgrounds>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: boolean removeElement(java.lang.Object)>(painter);

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint()>();
        return;
    }

    public void removeForeground(CH.ifa.draw.framework.Painter)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter painter;
        java.util.Vector temp$0, temp$1;
        boolean temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        painter := @parameter0: CH.ifa.draw.framework.Painter;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        if temp$0 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        temp$2 = virtualinvoke temp$1.<java.util.Vector: boolean removeElement(java.lang.Object)>(painter);

     label1:
        nop;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint()>();
        return;
    }

    public void addForeground(CH.ifa.draw.framework.Painter)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Painter painter;
        java.util.Vector temp$0, temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        painter := @parameter0: CH.ifa.draw.framework.Painter;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        if temp$0 == null goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>(int)>(3);
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds> = temp$1;

     label1:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fForegrounds>;
        virtualinvoke temp$2.<java.util.Vector: void addElement(java.lang.Object)>(painter);
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void repaint()>();
        return;
    }

    public void freezeView()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: void lock()>();
        return;
    }

    public void unfreezeView()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.Drawing temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: void unlock()>();
        return;
    }

    private final void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.io.ObjectInputStream s;
        java.util.Vector temp$0, temp$3;
        CH.ifa.draw.framework.Drawing temp$1, temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        s := @parameter0: java.io.ObjectInputStream;
        virtualinvoke s.<java.io.ObjectInputStream: void defaultReadObject()>();
        temp$0 = new java.util.Vector;
        specialinvoke temp$0.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelection> = temp$0;
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        if temp$1 != null goto label0;

        goto label1;

     label0:
        nop;
        temp$2 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing fDrawing>;
        interfaceinvoke temp$2.<CH.ifa.draw.framework.Drawing: void addDrawingChangeListener(CH.ifa.draw.framework.DrawingChangeListener)>(this);

     label1:
        nop;
        temp$3 = new java.util.Vector;
        specialinvoke temp$3.<java.util.Vector: void <init>()>();
        this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners> = temp$3;
        return;
    }

    private final void checkMinimumSize()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.FigureEnumeration k, temp$1;
        CH.ifa.draw.framework.Drawing temp$0;
        java.awt.Dimension d, temp$2, temp$16, temp$19, temp$22, temp$25, temp$28;
        boolean temp$3;
        java.awt.Rectangle r, temp$5;
        CH.ifa.draw.framework.Figure temp$4;
        int temp$6, temp$7, temp$8, temp$9, temp$10, temp$11, temp$12, temp$13, temp$14, temp$15, temp$17, temp$18, temp$20, temp$21, temp$23, temp$24, temp$26, temp$27;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.framework.Drawing drawing()>();
        temp$1 = interfaceinvoke temp$0.<CH.ifa.draw.framework.Drawing: CH.ifa.draw.framework.FigureEnumeration figures()>();
        k = temp$1;
        temp$2 = new java.awt.Dimension;
        specialinvoke temp$2.<java.awt.Dimension: void <init>(int,int)>(0, 0);
        d = temp$2;

     label0:
        nop;
        temp$3 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: boolean hasMoreElements()>();
        if temp$3 == 0 goto label2;

        goto label1;

     label1:
        nop;
        temp$4 = interfaceinvoke k.<CH.ifa.draw.framework.FigureEnumeration: CH.ifa.draw.framework.Figure nextFigure()>();
        temp$5 = interfaceinvoke temp$4.<CH.ifa.draw.framework.Figure: java.awt.Rectangle displayBox()>();
        r = temp$5;
        temp$6 = d.<java.awt.Dimension: int width>;
        temp$7 = r.<java.awt.Rectangle: int x>;
        temp$8 = r.<java.awt.Rectangle: int width>;
        temp$9 = temp$7 + temp$8;
        temp$10 = staticinvoke <java.lang.Math: int max(int,int)>(temp$6, temp$9);
        d.<java.awt.Dimension: int width> = temp$10;
        temp$11 = d.<java.awt.Dimension: int height>;
        temp$12 = r.<java.awt.Rectangle: int y>;
        temp$13 = r.<java.awt.Rectangle: int height>;
        temp$14 = temp$12 + temp$13;
        temp$15 = staticinvoke <java.lang.Math: int max(int,int)>(temp$11, temp$14);
        d.<java.awt.Dimension: int height> = temp$15;
        goto label0;

     label2:
        nop;
        temp$16 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        temp$17 = temp$16.<java.awt.Dimension: int height>;
        temp$18 = d.<java.awt.Dimension: int height>;
        if temp$17 < temp$18 goto label4;

        goto label3;

     label3:
        nop;
        temp$19 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        temp$20 = temp$19.<java.awt.Dimension: int width>;
        temp$21 = d.<java.awt.Dimension: int width>;
        if temp$20 < temp$21 goto label4;

        goto label5;

        goto label5;

     label4:
        nop;
        temp$22 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        temp$23 = d.<java.awt.Dimension: int height>;
        temp$24 = temp$23 + 10;
        temp$22.<java.awt.Dimension: int height> = temp$24;
        temp$25 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        temp$26 = d.<java.awt.Dimension: int width>;
        temp$27 = temp$26 + 10;
        temp$25.<java.awt.Dimension: int width> = temp$27;
        temp$28 = this.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Dimension fViewSize>;
        virtualinvoke this.<CH.ifa.draw.standard.StandardDrawingView: void setSize(java.awt.Dimension)>(temp$28);

     label5:
        nop;
        return;
    }

    public boolean isFocusTraversable()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = 1;
        return temp$0;
    }

    public boolean isInteractive()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        boolean temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = 1;
        return temp$0;
    }

    public void keyTyped(java.awt.event.KeyEvent)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.event.KeyEvent e;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        e := @parameter0: java.awt.event.KeyEvent;
        return;
    }

    public void keyReleased(java.awt.event.KeyEvent)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.event.KeyEvent e;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        e := @parameter0: java.awt.event.KeyEvent;
        return;
    }

    public void addFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.FigureSelectionListener fsl;
        java.util.Vector temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        fsl := @parameter0: CH.ifa.draw.framework.FigureSelectionListener;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean add(java.lang.Object)>(fsl);
        return;
    }

    public void removeFigureSelectionListener(CH.ifa.draw.framework.FigureSelectionListener)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.framework.FigureSelectionListener fsl;
        java.util.Vector temp$0;
        boolean temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        fsl := @parameter0: CH.ifa.draw.framework.FigureSelectionListener;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: java.util.Vector fSelectionListeners>;
        temp$1 = virtualinvoke temp$0.<java.util.Vector: boolean remove(java.lang.Object)>(fsl);
        return;
    }

    public int getDefaultDNDActions()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        int temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = <java.awt.dnd.DnDConstants: int ACTION_COPY_OR_MOVE>;
        return temp$0;
    }

    public void autoscroll(java.awt.Point)
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.awt.Point p;
        CH.ifa.draw.standard.StandardDrawingView$ASH temp$0;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        p := @parameter0: java.awt.Point;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.standard.StandardDrawingView$ASH ash>;
        virtualinvoke temp$0.<CH.ifa.draw.standard.StandardDrawingView$ASH: void autoscroll(java.awt.Point)>(p);
        return;
    }

    public java.awt.Insets getAutoscrollInsets()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        CH.ifa.draw.standard.StandardDrawingView$ASH temp$0;
        java.awt.Insets temp$1;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = this.<CH.ifa.draw.standard.StandardDrawingView: CH.ifa.draw.standard.StandardDrawingView$ASH ash>;
        temp$1 = virtualinvoke temp$0.<CH.ifa.draw.standard.StandardDrawingView$ASH: java.awt.Insets getAutoscrollInsets()>();
        return temp$1;
    }

    public java.lang.String toString()
    {
        CH.ifa.draw.standard.StandardDrawingView this;
        java.lang.StringBuffer temp$0;
        int temp$1;
        java.lang.String temp$2;

        this := @this: CH.ifa.draw.standard.StandardDrawingView;
        temp$0 = new java.lang.StringBuffer;
        specialinvoke temp$0.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("DrawingView Nr: ");
        temp$1 = this.<CH.ifa.draw.standard.StandardDrawingView: int myCounter>;
        virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$1);
        temp$2 = virtualinvoke temp$0.<java.lang.StringBuffer: java.lang.String toString()>();
        return temp$2;
    }

    public static java.awt.Point set$fLastClick$access$0(CH.ifa.draw.standard.StandardDrawingView, java.awt.Point)
    {
        CH.ifa.draw.standard.StandardDrawingView that;
        java.awt.Point value;

        that := @parameter0: CH.ifa.draw.standard.StandardDrawingView;
        value := @parameter1: java.awt.Point;
        that.<CH.ifa.draw.standard.StandardDrawingView: java.awt.Point fLastClick> = value;
        return value;
    }
}
