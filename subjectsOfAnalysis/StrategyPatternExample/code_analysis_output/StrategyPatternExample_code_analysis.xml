<?xml version="1.0" encoding="UTF-8" ?><ClassList><Class><ToString>Duck</ToString><FieldList><Field><ToString>{Duck: FlyBehavior flyBehavior}</ToString><Type>FlyBehavior</Type><Name>flyBehavior</Name></Field><Field><ToString>{Duck: QuackBehavior quackBehavior}</ToString><Type>QuackBehavior</Type><Name>quackBehavior</Name></Field></FieldList><MethodList><Method><ToString>{Duck: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: Duck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(@this: Duck)</ToString><Type>Duck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Duck</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{Duck: void setFlyBehavior(FlyBehavior)}</ToString><ReturnType>void</ReturnType><ParameterList><Parameter0>FlyBehavior</Parameter0></ParameterList><UnitList><Unit><ToString>this := @this: Duck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(@this: Duck)</ToString><Type>Duck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Duck</RightOp></Unit><Unit><ToString>fb := @parameter0: FlyBehavior</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(fb)</ToString><Type>FlyBehavior</Type></DefBox0><UseBox0><ToString>VB(@parameter0: FlyBehavior)</ToString><Type>FlyBehavior</Type></UseBox0><LeftOp>fb</LeftOp><RightOp>@parameter0: FlyBehavior</RightOp></Unit><Unit><ToString>this.{Duck: FlyBehavior flyBehavior} = fb</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(this.{Duck: FlyBehavior flyBehavior})</ToString><Type>FlyBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(fb)</ToString><Type>FlyBehavior</Type></UseBox1><LeftOp>this.{Duck: FlyBehavior flyBehavior}</LeftOp><RightOp>fb</RightOp></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{Duck: void setQuackBehavior(QuackBehavior)}</ToString><ReturnType>void</ReturnType><ParameterList><Parameter0>QuackBehavior</Parameter0></ParameterList><UnitList><Unit><ToString>this := @this: Duck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(@this: Duck)</ToString><Type>Duck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Duck</RightOp></Unit><Unit><ToString>qb := @parameter0: QuackBehavior</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(qb)</ToString><Type>QuackBehavior</Type></DefBox0><UseBox0><ToString>VB(@parameter0: QuackBehavior)</ToString><Type>QuackBehavior</Type></UseBox0><LeftOp>qb</LeftOp><RightOp>@parameter0: QuackBehavior</RightOp></Unit><Unit><ToString>this.{Duck: QuackBehavior quackBehavior} = qb</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(this.{Duck: QuackBehavior quackBehavior})</ToString><Type>QuackBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(qb)</ToString><Type>QuackBehavior</Type></UseBox1><LeftOp>this.{Duck: QuackBehavior quackBehavior}</LeftOp><RightOp>qb</RightOp></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{Duck: void performFly()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: Duck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(@this: Duck)</ToString><Type>Duck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Duck</RightOp></Unit><Unit><ToString>temp$0 = this.{Duck: FlyBehavior flyBehavior}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>FlyBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(this.{Duck: FlyBehavior flyBehavior})</ToString><Type>FlyBehavior</Type></UseBox1><LeftOp>temp$0</LeftOp><RightOp>this.{Duck: FlyBehavior flyBehavior}</RightOp></Unit><Unit><ToString>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>FlyBehavior</Type></UseBox0><UseBox1><ToString>VB(interfaceinvoke temp$0.{FlyBehavior: void fly()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{FlyBehavior: void fly()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{Duck: void performQuack()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: Duck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(@this: Duck)</ToString><Type>Duck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Duck</RightOp></Unit><Unit><ToString>temp$0 = this.{Duck: QuackBehavior quackBehavior}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>QuackBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(this.{Duck: QuackBehavior quackBehavior})</ToString><Type>QuackBehavior</Type></UseBox1><LeftOp>temp$0</LeftOp><RightOp>this.{Duck: QuackBehavior quackBehavior}</RightOp></Unit><Unit><ToString>interfaceinvoke temp$0.{QuackBehavior: void quack()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>QuackBehavior</Type></UseBox0><UseBox1><ToString>VB(interfaceinvoke temp$0.{QuackBehavior: void quack()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{QuackBehavior: void quack()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>FlyBehavior</ToString><FieldList></FieldList><MethodList><Method><ToString>{FlyBehavior: void fly()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList></UnitList></Method></MethodList></Class><Class><ToString>FlyNoWay</ToString><FieldList></FieldList><MethodList><Method><ToString>{FlyNoWay: void fly()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyNoWay</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyNoWay</Type></DefBox0><UseBox0><ToString>VB(@this: FlyNoWay)</ToString><Type>FlyNoWay</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyNoWay</RightOp></Unit><Unit><ToString>temp$0 = {java.lang.System: java.io.PrintStream out}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></DefBox0><UseBox0><ToString>VB({java.lang.System: java.io.PrintStream out})</ToString><Type>java.io.PrintStream</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>{java.lang.System: java.io.PrintStream out}</RightOp></Unit><Unit><ToString>virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I can\'t fly")</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></UseBox0><UseBox1><ToString>VB("I can\'t fly")</ToString><Type>java.lang.String</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I can\'t fly"))</ToString><Type>void</Type></UseBox2><InvokeMethod>{java.io.PrintStream: void println(java.lang.String)}</InvokeMethod><ArgumentList><Argument>"I can\'t fly"</Argument></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{FlyNoWay: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyNoWay</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyNoWay</Type></DefBox0><UseBox0><ToString>VB(@this: FlyNoWay)</ToString><Type>FlyNoWay</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyNoWay</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>FlyNoWay</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>FlyRocketPowered</ToString><FieldList></FieldList><MethodList><Method><ToString>{FlyRocketPowered: void fly()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyRocketPowered</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyRocketPowered</Type></DefBox0><UseBox0><ToString>VB(@this: FlyRocketPowered)</ToString><Type>FlyRocketPowered</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyRocketPowered</RightOp></Unit><Unit><ToString>temp$0 = {java.lang.System: java.io.PrintStream out}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></DefBox0><UseBox0><ToString>VB({java.lang.System: java.io.PrintStream out})</ToString><Type>java.io.PrintStream</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>{java.lang.System: java.io.PrintStream out}</RightOp></Unit><Unit><ToString>virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I\'m flying by rocket")</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></UseBox0><UseBox1><ToString>VB("I\'m flying by rocket")</ToString><Type>java.lang.String</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I\'m flying by rocket"))</ToString><Type>void</Type></UseBox2><InvokeMethod>{java.io.PrintStream: void println(java.lang.String)}</InvokeMethod><ArgumentList><Argument>"I\'m flying by rocket"</Argument></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{FlyRocketPowered: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyRocketPowered</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyRocketPowered</Type></DefBox0><UseBox0><ToString>VB(@this: FlyRocketPowered)</ToString><Type>FlyRocketPowered</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyRocketPowered</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>FlyRocketPowered</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>FlyWithWings</ToString><FieldList></FieldList><MethodList><Method><ToString>{FlyWithWings: void fly()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyWithWings</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyWithWings</Type></DefBox0><UseBox0><ToString>VB(@this: FlyWithWings)</ToString><Type>FlyWithWings</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyWithWings</RightOp></Unit><Unit><ToString>temp$0 = {java.lang.System: java.io.PrintStream out}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></DefBox0><UseBox0><ToString>VB({java.lang.System: java.io.PrintStream out})</ToString><Type>java.io.PrintStream</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>{java.lang.System: java.io.PrintStream out}</RightOp></Unit><Unit><ToString>virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I\'m flying!!")</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></UseBox0><UseBox1><ToString>VB("I\'m flying!!")</ToString><Type>java.lang.String</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("I\'m flying!!"))</ToString><Type>void</Type></UseBox2><InvokeMethod>{java.io.PrintStream: void println(java.lang.String)}</InvokeMethod><ArgumentList><Argument>"I\'m flying!!"</Argument></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{FlyWithWings: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: FlyWithWings</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>FlyWithWings</Type></DefBox0><UseBox0><ToString>VB(@this: FlyWithWings)</ToString><Type>FlyWithWings</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: FlyWithWings</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>FlyWithWings</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>MallardDuck</ToString><FieldList></FieldList><MethodList><Method><ToString>{MallardDuck: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: MallardDuck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>MallardDuck</Type></DefBox0><UseBox0><ToString>VB(@this: MallardDuck)</ToString><Type>MallardDuck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: MallardDuck</RightOp></Unit><Unit><ToString>specialinvoke this.{Duck: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>MallardDuck</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{Duck: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>temp$0 = new Quack</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>Quack</Type></DefBox0><UseBox0><ToString>VB(new Quack)</ToString><Type>Quack</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>new Quack</RightOp></Unit><Unit><ToString>specialinvoke temp$0.{Quack: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>Quack</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$0.{Quack: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Quack: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>virtualinvoke this.{MallardDuck: void setQuackBehavior(QuackBehavior)}(temp$0)</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>MallardDuck</Type></UseBox0><UseBox1><ToString>VB(temp$0)</ToString><Type>Quack</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke this.{MallardDuck: void setQuackBehavior(QuackBehavior)}(temp$0))</ToString><Type>void</Type></UseBox2><InvokeMethod>{Duck: void setQuackBehavior(QuackBehavior)}</InvokeMethod><ArgumentList><Argument>temp$0</Argument></ArgumentList></Unit><Unit><ToString>temp$1 = new FlyWithWings</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$1)</ToString><Type>FlyWithWings</Type></DefBox0><UseBox0><ToString>VB(new FlyWithWings)</ToString><Type>FlyWithWings</Type></UseBox0><LeftOp>temp$1</LeftOp><RightOp>new FlyWithWings</RightOp></Unit><Unit><ToString>specialinvoke temp$1.{FlyWithWings: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$1)</ToString><Type>FlyWithWings</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$1.{FlyWithWings: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{FlyWithWings: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>this.{MallardDuck: FlyBehavior flyBehavior} = temp$1</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(this.{MallardDuck: FlyBehavior flyBehavior})</ToString><Type>FlyBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>MallardDuck</Type></UseBox0><UseBox1><ToString>VB(temp$1)</ToString><Type>FlyWithWings</Type></UseBox1><LeftOp>this.{MallardDuck: FlyBehavior flyBehavior}</LeftOp><RightOp>temp$1</RightOp></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>MiniDuckSimulator</ToString><FieldList></FieldList><MethodList><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><ReturnType>void</ReturnType><ParameterList><Parameter0>java.lang.String[]</Parameter0></ParameterList><UnitList><Unit><ToString>args := @parameter0: java.lang.String[]</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(args)</ToString><Type>java.lang.String[]</Type></DefBox0><UseBox0><ToString>VB(@parameter0: java.lang.String[])</ToString><Type>java.lang.String[]</Type></UseBox0><LeftOp>args</LeftOp><RightOp>@parameter0: java.lang.String[]</RightOp></Unit><Unit><ToString>temp$0 = new MallardDuck</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>MallardDuck</Type></DefBox0><UseBox0><ToString>VB(new MallardDuck)</ToString><Type>MallardDuck</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>new MallardDuck</RightOp></Unit><Unit><ToString>specialinvoke temp$0.{MallardDuck: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>MallardDuck</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$0.{MallardDuck: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{MallardDuck: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>mallard = temp$0</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(mallard)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(temp$0)</ToString><Type>MallardDuck</Type></UseBox0><LeftOp>mallard</LeftOp><RightOp>temp$0</RightOp></Unit><Unit><ToString>virtualinvoke mallard.{Duck: void performQuack()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(mallard)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(virtualinvoke mallard.{Duck: void performQuack()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void performQuack()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>virtualinvoke mallard.{Duck: void performFly()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(mallard)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(virtualinvoke mallard.{Duck: void performFly()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void performFly()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>temp$1 = new ModelDuck</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$1)</ToString><Type>ModelDuck</Type></DefBox0><UseBox0><ToString>VB(new ModelDuck)</ToString><Type>ModelDuck</Type></UseBox0><LeftOp>temp$1</LeftOp><RightOp>new ModelDuck</RightOp></Unit><Unit><ToString>specialinvoke temp$1.{ModelDuck: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$1)</ToString><Type>ModelDuck</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$1.{ModelDuck: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{ModelDuck: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>model = temp$1</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(model)</ToString><Type>Duck</Type></DefBox0><UseBox0><ToString>VB(temp$1)</ToString><Type>ModelDuck</Type></UseBox0><LeftOp>model</LeftOp><RightOp>temp$1</RightOp></Unit><Unit><ToString>virtualinvoke model.{Duck: void performFly()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(model)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(virtualinvoke model.{Duck: void performFly()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void performFly()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>temp$2 = new FlyRocketPowered</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$2)</ToString><Type>FlyRocketPowered</Type></DefBox0><UseBox0><ToString>VB(new FlyRocketPowered)</ToString><Type>FlyRocketPowered</Type></UseBox0><LeftOp>temp$2</LeftOp><RightOp>new FlyRocketPowered</RightOp></Unit><Unit><ToString>specialinvoke temp$2.{FlyRocketPowered: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$2)</ToString><Type>FlyRocketPowered</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$2.{FlyRocketPowered: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{FlyRocketPowered: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2)</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(model)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(temp$2)</ToString><Type>FlyRocketPowered</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2))</ToString><Type>void</Type></UseBox2><InvokeMethod>{Duck: void setFlyBehavior(FlyBehavior)}</InvokeMethod><ArgumentList><Argument>temp$2</Argument></ArgumentList></Unit><Unit><ToString>virtualinvoke model.{Duck: void performFly()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(model)</ToString><Type>Duck</Type></UseBox0><UseBox1><ToString>VB(virtualinvoke model.{Duck: void performFly()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void performFly()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{MiniDuckSimulator: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: MiniDuckSimulator</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>MiniDuckSimulator</Type></DefBox0><UseBox0><ToString>VB(@this: MiniDuckSimulator)</ToString><Type>MiniDuckSimulator</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: MiniDuckSimulator</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>MiniDuckSimulator</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>ModelDuck</ToString><FieldList></FieldList><MethodList><Method><ToString>{ModelDuck: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: ModelDuck</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>ModelDuck</Type></DefBox0><UseBox0><ToString>VB(@this: ModelDuck)</ToString><Type>ModelDuck</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: ModelDuck</RightOp></Unit><Unit><ToString>specialinvoke this.{Duck: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>ModelDuck</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{Duck: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Duck: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>temp$0 = new FlyNoWay</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>FlyNoWay</Type></DefBox0><UseBox0><ToString>VB(new FlyNoWay)</ToString><Type>FlyNoWay</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>new FlyNoWay</RightOp></Unit><Unit><ToString>specialinvoke temp$0.{FlyNoWay: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>FlyNoWay</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$0.{FlyNoWay: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{FlyNoWay: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>this.{ModelDuck: FlyBehavior flyBehavior} = temp$0</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(this.{ModelDuck: FlyBehavior flyBehavior})</ToString><Type>FlyBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>ModelDuck</Type></UseBox0><UseBox1><ToString>VB(temp$0)</ToString><Type>FlyNoWay</Type></UseBox1><LeftOp>this.{ModelDuck: FlyBehavior flyBehavior}</LeftOp><RightOp>temp$0</RightOp></Unit><Unit><ToString>temp$1 = new Quack</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$1)</ToString><Type>Quack</Type></DefBox0><UseBox0><ToString>VB(new Quack)</ToString><Type>Quack</Type></UseBox0><LeftOp>temp$1</LeftOp><RightOp>new Quack</RightOp></Unit><Unit><ToString>specialinvoke temp$1.{Quack: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$1)</ToString><Type>Quack</Type></UseBox0><UseBox1><ToString>VB(specialinvoke temp$1.{Quack: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{Quack: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>this.{ModelDuck: QuackBehavior quackBehavior} = temp$1</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(this.{ModelDuck: QuackBehavior quackBehavior})</ToString><Type>QuackBehavior</Type></DefBox0><UseBox0><ToString>VB(this)</ToString><Type>ModelDuck</Type></UseBox0><UseBox1><ToString>VB(temp$1)</ToString><Type>Quack</Type></UseBox1><LeftOp>this.{ModelDuck: QuackBehavior quackBehavior}</LeftOp><RightOp>temp$1</RightOp></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>MuteQuack</ToString><FieldList></FieldList><MethodList><Method><ToString>{MuteQuack: void quack()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: MuteQuack</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>MuteQuack</Type></DefBox0><UseBox0><ToString>VB(@this: MuteQuack)</ToString><Type>MuteQuack</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: MuteQuack</RightOp></Unit><Unit><ToString>temp$0 = {java.lang.System: java.io.PrintStream out}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></DefBox0><UseBox0><ToString>VB({java.lang.System: java.io.PrintStream out})</ToString><Type>java.io.PrintStream</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>{java.lang.System: java.io.PrintStream out}</RightOp></Unit><Unit><ToString>virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("{{ Silence~ }}")</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></UseBox0><UseBox1><ToString>VB("{{ Silence~ }}")</ToString><Type>java.lang.String</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("{{ Silence~ }}"))</ToString><Type>void</Type></UseBox2><InvokeMethod>{java.io.PrintStream: void println(java.lang.String)}</InvokeMethod><ArgumentList><Argument>"{{ Silence~ }}"</Argument></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{MuteQuack: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: MuteQuack</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>MuteQuack</Type></DefBox0><UseBox0><ToString>VB(@this: MuteQuack)</ToString><Type>MuteQuack</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: MuteQuack</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>MuteQuack</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>Quack</ToString><FieldList></FieldList><MethodList><Method><ToString>{Quack: void quack()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: Quack</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Quack</Type></DefBox0><UseBox0><ToString>VB(@this: Quack)</ToString><Type>Quack</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Quack</RightOp></Unit><Unit><ToString>temp$0 = {java.lang.System: java.io.PrintStream out}</ToString><UnitClass>soot.jimple.internal.JAssignStmt</UnitClass><DefBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></DefBox0><UseBox0><ToString>VB({java.lang.System: java.io.PrintStream out})</ToString><Type>java.io.PrintStream</Type></UseBox0><LeftOp>temp$0</LeftOp><RightOp>{java.lang.System: java.io.PrintStream out}</RightOp></Unit><Unit><ToString>virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("Quack")</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(temp$0)</ToString><Type>java.io.PrintStream</Type></UseBox0><UseBox1><ToString>VB("Quack")</ToString><Type>java.lang.String</Type></UseBox1><UseBox2><ToString>VB(virtualinvoke temp$0.{java.io.PrintStream: void println(java.lang.String)}("Quack"))</ToString><Type>void</Type></UseBox2><InvokeMethod>{java.io.PrintStream: void println(java.lang.String)}</InvokeMethod><ArgumentList><Argument>"Quack"</Argument></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method><Method><ToString>{Quack: void {init}()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList><Unit><ToString>this := @this: Quack</ToString><UnitClass>soot.jimple.internal.JIdentityStmt</UnitClass><DefBox0><ToString>VB(this)</ToString><Type>Quack</Type></DefBox0><UseBox0><ToString>VB(@this: Quack)</ToString><Type>Quack</Type></UseBox0><LeftOp>this</LeftOp><RightOp>@this: Quack</RightOp></Unit><Unit><ToString>specialinvoke this.{java.lang.Object: void {init}()}()</ToString><UnitClass>soot.jimple.internal.JInvokeStmt</UnitClass><UseBox0><ToString>VB(this)</ToString><Type>Quack</Type></UseBox0><UseBox1><ToString>VB(specialinvoke this.{java.lang.Object: void {init}()}())</ToString><Type>void</Type></UseBox1><InvokeMethod>{java.lang.Object: void {init}()}</InvokeMethod><ArgumentList></ArgumentList></Unit><Unit><ToString>return</ToString><UnitClass>soot.jimple.internal.JReturnVoidStmt</UnitClass></Unit></UnitList></Method></MethodList></Class><Class><ToString>QuackBehavior</ToString><FieldList></FieldList><MethodList><Method><ToString>{QuackBehavior: void quack()}</ToString><ReturnType>void</ReturnType><ParameterList></ParameterList><UnitList></UnitList></Method></MethodList></Class></ClassList>