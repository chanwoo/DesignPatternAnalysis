<AnalysisResultList><AnalysisResult><AbstractType>Duck</AbstractType><CallerList><Method><ToString>{Duck: void {init}()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>specialinvoke this.{java.lang.Object: void {init}()}()</CallStatement></CallStatementList></RoleList></Method><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>virtualinvoke mallard.{Duck: void performQuack()}()</CallStatement><CallStatement>virtualinvoke mallard.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2)</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement></CallStatementList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new MallardDuck</CreateStatement><CreateStatement>temp$1 = new ModelDuck</CreateStatement></CreateStatementList></RoleList></Method></CallerList><ReferenceFlowPathList><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>virtualinvoke mallard.{Duck: void performQuack()}()</CallStatement><CallStatement>virtualinvoke mallard.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2)</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement></CallStatementList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new MallardDuck</CreateStatement><CreateStatement>temp$1 = new ModelDuck</CreateStatement></CreateStatementList></RoleList></Method><Path><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>virtualinvoke mallard.{Duck: void performQuack()}()</CallStatement><CallStatement>virtualinvoke mallard.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2)</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement></CallStatementList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new MallardDuck</CreateStatement><CreateStatement>temp$1 = new ModelDuck</CreateStatement></CreateStatementList></RoleList></Method></Path></ReferenceFlowPathList><CreatorList><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>virtualinvoke mallard.{Duck: void performQuack()}()</CallStatement><CallStatement>virtualinvoke mallard.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement><CallStatement>virtualinvoke model.{Duck: void setFlyBehavior(FlyBehavior)}(temp$2)</CallStatement><CallStatement>virtualinvoke model.{Duck: void performFly()}()</CallStatement></CallStatementList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new MallardDuck</CreateStatement><CreateStatement>temp$1 = new ModelDuck</CreateStatement></CreateStatementList></RoleList></Method></CreatorList></AnalysisResult><AnalysisResult><AbstractType>FlyBehavior</AbstractType><CallerList><Method><ToString>{Duck: void performFly()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</CallStatement></CallStatementList></RoleList></Method></CallerList><ReferenceFlowPathList><Method><ToString>{Duck: void performFly()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</CallStatement></CallStatementList></RoleList></Method><Path><Method><ToString>{Duck: void performFly()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</CallStatement></CallStatementList></RoleList></Method><Field><ToString>{Duck: FlyBehavior flyBehavior}</ToString><Role></Role></Field><Method><ToString>{ModelDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new FlyNoWay</CreateStatement></CreateStatementList></RoleList></Method></Path><Path><Method><ToString>{Duck: void performFly()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</CallStatement></CallStatementList></RoleList></Method><Field><ToString>{Duck: FlyBehavior flyBehavior}</ToString><Role></Role></Field><Method><ToString>{MallardDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$1 = new FlyWithWings</CreateStatement></CreateStatementList></RoleList></Method></Path><Path><Method><ToString>{Duck: void performFly()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{FlyBehavior: void fly()}()</CallStatement></CallStatementList></RoleList></Method><Field><ToString>{Duck: FlyBehavior flyBehavior}</ToString><Role></Role></Field><Method><ToString>{Duck: void setFlyBehavior(FlyBehavior)}</ToString><RoleList></RoleList></Method><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$2 = new FlyRocketPowered</CreateStatement></CreateStatementList></RoleList></Method></Path></ReferenceFlowPathList><CreatorList><Method><ToString>{MallardDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$1 = new FlyWithWings</CreateStatement></CreateStatementList></RoleList></Method><Method><ToString>{MiniDuckSimulator: void main(java.lang.String[])}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$2 = new FlyRocketPowered</CreateStatement></CreateStatementList></RoleList></Method><Method><ToString>{ModelDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new FlyNoWay</CreateStatement></CreateStatementList></RoleList></Method></CreatorList></AnalysisResult><AnalysisResult><AbstractType>QuackBehavior</AbstractType><CallerList><Method><ToString>{Duck: void performQuack()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{QuackBehavior: void quack()}()</CallStatement></CallStatementList></RoleList></Method></CallerList><ReferenceFlowPathList><Method><ToString>{Duck: void performQuack()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{QuackBehavior: void quack()}()</CallStatement></CallStatementList></RoleList></Method><Path><Method><ToString>{Duck: void performQuack()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{QuackBehavior: void quack()}()</CallStatement></CallStatementList></RoleList></Method><Field><ToString>{Duck: QuackBehavior quackBehavior}</ToString><Role></Role></Field><Method><ToString>{Duck: void setQuackBehavior(QuackBehavior)}</ToString><RoleList></RoleList></Method><Method><ToString>{MallardDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new Quack</CreateStatement></CreateStatementList></RoleList></Method></Path><Path><Method><ToString>{Duck: void performQuack()}</ToString><RoleList><Role>Caller</Role><CallStatementList><CallStatement>interfaceinvoke temp$0.{QuackBehavior: void quack()}()</CallStatement></CallStatementList></RoleList></Method><Field><ToString>{Duck: QuackBehavior quackBehavior}</ToString><Role></Role></Field><Method><ToString>{ModelDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$1 = new Quack</CreateStatement></CreateStatementList></RoleList></Method></Path></ReferenceFlowPathList><CreatorList><Method><ToString>{MallardDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$0 = new Quack</CreateStatement></CreateStatementList></RoleList></Method><Method><ToString>{ModelDuck: void {init}()}</ToString><RoleList><Role>Creator</Role><CreateStatementList><CreateStatement>temp$1 = new Quack</CreateStatement></CreateStatementList></RoleList></Method></CreatorList></AnalysisResult></AnalysisResultList>